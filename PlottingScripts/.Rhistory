45+20
50-3
50/3
45*7
2.5 * 10^9
250000000
dpois(1,1)
dpois(1,4)
dpois(1,5)
dpois(1,5)*2000000000*.001
dpois(1,4)*2000000000*.001
dpois(2,4)*2000000000*.001
1100000-337177
11000000
10*600000*0.01
10*600000*0.0001
10*600000*0.000001
0.00000125
0.0000000125
0.000000015
4363/11000000
11000000 - 4363
1100000 - 4363
.01*.01*.01
1/1100000
663/1100000
1/(4*10000*1/5e-8)
1/(4*10000*1.5e-8)
4*10000*1.5e-8
0.0006
1000/365
365*3
15000+15000+6000+1000
15000 / 37000
1000/37000
2000/37000
9000+30000+15000+6000+1000
61000/3
1000/61000
3000/61000
6000/61000
30000*20
1000/25
63000/3
21000*20
30000/20
37577*18
5241+1329
6570*18
676386-118260
5000/300000
0.01666667*8000
300000/5000
60*5000
60*8000
500000/20
400+600+200
1200*4
1000+850+1000+500
18000+15000+11000
4000/44000
6000/44000
30000
60*10000
30000*20
23000+13000+13000
4000/49000
6000/49000
2000/49000
23000+17000+13000
4000/53000
2000/52000
5000/52000
4000/52000
10000/600000
600000/10000
60*10000
10000/600000
0.01666667*600000
4000+30000+11000+5000+2000
4000/52000
11000/52000
5000/52000
2000/52000
12000*5
14694*3
11065.50*3
715*3
60000+44082+33196.5+2145
8*20
1707-5
1702/2
255*4
4*6
55000/24
255*10
55445/100
54194+73+73+73+68
54194+63+63+63+68
2 * 226252
5 * 226252
1131260/2
5 * 226252
2* 226252 * 5
2* 226252 * 5 / 5
226252 * 5
226252 * 5 / 2
226252 * 5
1131260 * 2
2262520/5
2262520/4
565630/2
226252*5
1131260/2
452504*5
2262520/4
700(52)
700*52
32194-57-9.50-40-789.30
31298.2-2952.72
3600/2500
3700/2500
3721/2500
dpois(250000/1000000)
dpois(1,250000/1000000)
dpois(2000,250000/1000000)
dpois(1,250000/1000000)*1800
dpois(1,250000/1000000)*1800 * 0.01
50/50
50*25
50*49
50/2
50/3
50/4
50/5
50/6
50/7
50/10
10*25
25*200
5000/4
4*10000*.01
2/6
2*9/6
13.9*61
1000/100000
3450/1735350
(1-.7111)/(1-.7589)
1.198258 - 1
(1-.8531)/(1-.8638)
(1-.8638)/(1-.8531)
(1-.8351)/(1-.8638)
1000/5
4*1000*.05
4*1000*.005
4*1000*.001
4*1000*.00125
252+26+13+26+51+21+11+11+12+19+10+1
3450/300000000
1/100000
0.2*60
15/169
7/102
7/109
1e-4*1000
1e-4*10000
1e-4*100000
100*20
10855542 +25000
10855542 +250000
16380196 + 250000
16380196 + 500000
16380196 -250000
11105542 + 2500000
11105542 + 250000
10000*.0125
10000*.125
1100000
10^7
10000000
5000/25
2500/25
1e-4*500000
1e-4*1000000
2*15000/3*1e-8
9-15
24-6
Matrix <- (nrow=4,nrow=4)
Matrix <- (,nrow=4,nrow=4)
Matrix <- matrix(nrow=4,nrow=4)
Matrix <- matrix(,nrow=4,nrow=4)
Matrix <- matrix(,nrow=4,ncol=4)
Matrix
Matrix <- matrix(nrow=4,ncol=4)
825*20
45*7
18000*19.03
30*10
30*10*10
60*24
146-23
146-123
23*30
690/60
21*21
8292 * 1.48671e-04
0.22018806380597428/0.0001
0.04457228061998871/0.0001
2.691172883700121/0.0001
0.22018806380597428/0.0001
5000.0*.0.16677688224562598
5000*0.16677688224562598
5000*0.03218540108616168
Test <- c(10,20,30)
1/Test
3 / (1/Test)
3 / (1/sum(Test))
3 / sum(1/Test)
1/10 + 1/20 + 1/30
3/0.1833333
Test <- c(10,10,10,20,30)
5 / sum(1/Test)
(1/10)^3 + 1/20 + 1/30
5/0.08433333
1/20 + 1/30 + 1/10 + 1/10 + 1/10
(1/10)*3 + 1/20 + 1/30
.0003*10000
25e-5 * 12300
3e-5 * 12300
273*100
1050*60
63000/20
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure11_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure10_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the scaled UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 4594/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
Prob_One_Percent <- 61813 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure10_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure10_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.3856727, 0.0, 0.6143273)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.1","= 0.54","< 0.01")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 4594/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
Prob_One_Percent <- 61813 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure10_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure10_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.3856727, 0.0, 0.6143273)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.1","= 0.54","< 0.01")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure11_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
Prob_One_Percent <- 11048 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure10_1_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.48","= 0.56","= 0.14")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
Prob_One_Percent <- 11048 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure11_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure11_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure11_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.48","= 0.56","= 0.14")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure11_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
Prob_One_Percent <- 11048 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure11_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure11_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure16_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.48","= 0.56","= 0.14")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure11_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
SelectionNS <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KBootstrap.txt")#
SelectionSyn <- read.table("../Results/ResultsSelectionInferred/SelectionSynUK10KBootstrap.txt")#
#
Plot <- paste("../Figures/SuppFigure11_UK10KSelInferenceSynNS.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(SelectionNS$V1, SelectionSyn$V1, names=c("Non Syn","Syn"), ylab="Estimated 4Ns values", xlab="Type of Variants", main="Inference of Selection in the\nscaled UK10K model", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
SelectionNS <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KBootstrap.txt")#
SelectionSyn <- read.table("../Results/ResultsSelectionInferred/SelectionSynUK10KBootstrap.txt")#
#
Plot <- paste("../Figures/SuppFigure12_UK10KSelInferenceSynNS.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(SelectionNS$V1, SelectionSyn$V1, names=c("Non Syn","Syn"), ylab="Estimated 4Ns values", xlab="Type of Variants", main="Inference of Selection in the\nscaled UK10K model", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KTestTwo.txt")#
#
pdf("../Figures/SuppFigure12_UK10K_ESS.pdf")#
plot(-200:200,Data[12,403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[2,403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[3,403:803],type="l",col="blue",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
#Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KNeutral.txt")#
#lines(-200:200,Data[403:803],type="l",col="green",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KTestTwo.txt")#
#
pdf("../Figures/SuppFigure13_UK10K_ESS.pdf")#
plot(-200:200,Data[12,403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[2,403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[3,403:803],type="l",col="blue",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
#Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KNeutral.txt")#
#lines(-200:200,Data[403:803],type="l",col="green",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
#pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/SuppFigure14_BarPlot_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" *bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# legend = c(expression("Real" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Inferred"  ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression('P'[psi]~ "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
axis (2,at=c(0+0.01, 1+0.01, 2+0.01, 3+0.01), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
#axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsSuppTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentSuppTableS3.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) - log10(0.001),0)#
logcounts[1,2] <- max(log10(sum(P_Allele_Is_2Ns_given_OnePercent[2:10])) - log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) - log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) - log10(0.001), 0)#
logcounts[2,2] <- max(log10(sum(Probs[2:10])) - log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[11]) - log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) - log10(0.001),0)#
logcounts[3,2] <- max(log10(sum(ProbsBoyko[2:10])) - log10(0.001) ,0)#
logcounts[3,3] <- max(log10(ProbsBoyko[11]) - log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) - log10(0.001) ,0)#
logcounts[4,2] <- max(log10(sum(ProbsKim[2:10])) - log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[11]) - log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table ### Caution the next plot is wrong in the intermediate bin. Need to correct.#
#
ViridisColors <- viridis(4, alpha = 0.7)#
# pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBinsLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
# barplot(logcounts + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.1, 3.5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.3), yaxt="n")#
#
# axis (2,at=c(0+0.1,1+0.1,2+0.1,3+0.1), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    SumLower <- SumLower + Quantiles[1]#
    SumUpper <- SumUpper + Quantiles[2]#
    }#
    #    points((i - 1)* 5 + 2.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        SumLower <- SumLower + Quantiles[1]#
        SumUpper <- SumUpper + Quantiles[2]#
    }#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    #    points((i - 1)* 5 + 1.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
#
    }else{#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #     points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #     points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    }#
}#
#
#####################################################################################
# dev.off()#
######################################################################################################################################################## Natural scale #######################################
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
# logcounts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
# logcounts[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
# logcounts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcounts[1,1] <- Probs[1]#
logcounts[1,2] <- sum(Probs[2:10])#
logcounts[1,3] <- Probs[11]#
logcounts[2,1] <- ProbsBoyko[1]#
logcounts[2,2] <- sum(ProbsBoyko[2:10])#
logcounts[2,3] <- ProbsBoyko[11]#
logcounts[3,1] <- ProbsKim[1]#
logcounts[3,2] <- sum(ProbsKim[2:10])#
logcounts[3,3] <- ProbsKim[11]#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c( expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(-0.01, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "center",cex=2), yaxt="n")#
#
# egend = c(expression("Inferred " ~ 'P'[psi] ~ "(" *bolditalic(s[j])*" | 1%, " * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Boyko et al 2008 " ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")") , expression("Kim et al 2017 P("*bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2)#
#
# text(3, 1.1,"p-value = 0.1", cex = 2)#
# text(8, 1.1,"p-value = 0.54", cex = 2)#
# text(13, 1.1,"p-value < 0.01", cex = 2)#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixFinalProbs[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixFinalProbs[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (SumLower)#
        print (SumUpper)#
#
        points((i - 1)* 4 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        #        points((i - 1)* 5 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
    }else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
#####################################################################################
dev.off()#
#
#################################################################################### Density plots
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure15_DFEParameterEstimatesUK10K.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates\n in the UK10K dataset",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
############# Plot Boyko plus positive selection#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
MLE <- read.table("../Results/MLEDFEs/PopExpansionBoykoPositiveMLE.txt")#
#
Sel <- MLE$V1 %% 3#
#
hist(Sel)#
#
AllMLEs <- round(MLE / 3,0)#
#
Row <- ( AllMLEs$V1 ) %% 30 + 1#
Column <- floor(( AllMLEs$V1 ) / 30) + 1#
#
pdf("../Figures/SuppFigure17_PopExpansionPosPlusNegSelection.pdf")#
par(mfrow = c(2,2))#
#
plot(Row*30,Column*.02, xlim=c(0,450), ylim=c(0,0.3), xlab="Shape", ylab="Scale", main="A) Pop Expansion \nDeleterious variation DFEf parameters", cex.lab=1.35,cex.main=1.2,pch=19)#
points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
lines(1:450,5.570284/1:450,lty="dashed",lwd=2,col="red")#
#
beanplot(-2*Row*30*Column*.02,main="B) Pop Expansion\nDeleterious variation mean 4Ns value",ylab="Mean 4Ns value",cex.lab=1.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
points(1,-2*2.926423e+01*0.1906465,col="red",pch=19)#
#
Sel <- MLE$V1 %% 3#
par(mar = c(5,5,4,3))#
#
hist(Sel,main="C) Pop Expansion\nProportion of positive selection variants",axes=FALSE,xlab="Proportion of variants under positive selection",ylab="Number of times a certain proportion of\n variants under positive selection were inferred")#
axis(2,)#
axis(1,at=c(0.1,0.9,1.9),labels=c("0%","5%","10%"))#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsConstantPopSize.txt")#
#
pdf("../Figures/SuppFigure18_ConstantPopSizeESS.pdf")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsPopExpansion.txt")#
#
pdf("../Figures/SuppFigure19_PopExpansionESS.pdf")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
#pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/SuppFigure14_BarPlot_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" *bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# legend = c(expression("Real" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Inferred"  ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression('P'[psi]~ "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
axis (2,at=c(0+0.01, 1+0.01, 2+0.01, 3+0.01), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
#axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsSuppTableS4.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentSuppTableS4.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) - log10(0.001),0)#
logcounts[1,2] <- max(log10(sum(P_Allele_Is_2Ns_given_OnePercent[2:10])) - log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) - log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) - log10(0.001), 0)#
logcounts[2,2] <- max(log10(sum(Probs[2:10])) - log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[11]) - log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) - log10(0.001),0)#
logcounts[3,2] <- max(log10(sum(ProbsBoyko[2:10])) - log10(0.001) ,0)#
logcounts[3,3] <- max(log10(ProbsBoyko[11]) - log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) - log10(0.001) ,0)#
logcounts[4,2] <- max(log10(sum(ProbsKim[2:10])) - log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[11]) - log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table ### Caution the next plot is wrong in the intermediate bin. Need to correct.#
#
ViridisColors <- viridis(4, alpha = 0.7)#
# pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBinsLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
# barplot(logcounts + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.1, 3.5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.3), yaxt="n")#
#
# axis (2,at=c(0+0.1,1+0.1,2+0.1,3+0.1), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    SumLower <- SumLower + Quantiles[1]#
    SumUpper <- SumUpper + Quantiles[2]#
    }#
    #    points((i - 1)* 5 + 2.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        SumLower <- SumLower + Quantiles[1]#
        SumUpper <- SumUpper + Quantiles[2]#
    }#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    #    points((i - 1)* 5 + 1.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
#
    }else{#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #     points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #     points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    }#
}#
#
#####################################################################################
# dev.off()#
######################################################################################################################################################## Natural scale #######################################
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
# logcounts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
# logcounts[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
# logcounts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcounts[1,1] <- Probs[1]#
logcounts[1,2] <- sum(Probs[2:10])#
logcounts[1,3] <- Probs[11]#
logcounts[2,1] <- ProbsBoyko[1]#
logcounts[2,2] <- sum(ProbsBoyko[2:10])#
logcounts[2,3] <- ProbsBoyko[11]#
logcounts[3,1] <- ProbsKim[1]#
logcounts[3,2] <- sum(ProbsKim[2:10])#
logcounts[3,3] <- ProbsKim[11]#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c( expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(-0.01, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "center",cex=2), yaxt="n")#
#
# egend = c(expression("Inferred " ~ 'P'[psi] ~ "(" *bolditalic(s[j])*" | 1%, " * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Boyko et al 2008 " ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")") , expression("Kim et al 2017 P("*bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2)#
#
# text(3, 1.1,"p-value = 0.1", cex = 2)#
# text(8, 1.1,"p-value = 0.54", cex = 2)#
# text(13, 1.1,"p-value < 0.01", cex = 2)#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixFinalProbs[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixFinalProbs[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (SumLower)#
        print (SumUpper)#
#
        points((i - 1)* 4 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        #        points((i - 1)* 5 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
    }else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
#####################################################################################
dev.off()#
#
#################################################################################### Density plots
