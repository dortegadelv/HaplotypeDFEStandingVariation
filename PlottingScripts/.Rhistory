plot(TestRemainThreeToTwo)
(Matrix[3,2]/(abs(Matrix[3,3])))
Matrix[3,]
1/3
0.5/3
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Matrix
Time
i <- 1
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
Dif <- MiniTest - MatExponentiationValuesThree
plot(Dif)
Dif <- MiniTest - TestRemainThree
plot(Dif)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot(IntegralTwo)
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
plot (IntegralTwo)
(1 - exp(-abs(Matrix[3,3])*1000*.004))
(Matrix[3,2]/(abs(Matrix[3,3])))
( exp(-abs(Matrix[2,2])*(Time - Time)))
( exp(-abs(Matrix[2,2])*(Time - 0)))
Time
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
Integral
Integral2
Integral3
Integral3*1/6
Integral3$integral*1/6
library(expm)#
library(ape)#
library(geiger)#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]/(abs(Matrix[3,3]))) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)
18800+32100
50900/2
500/20
550/20
160+20+50+376+136
550+742
1292/20
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (1 - exp(-abs(Matrix[3,3])*x[1])) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0), upperLimit = c(Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}#
#
plot(MatExponentiationValues)#
lines(TestRemain,col="red")#
#
par(mfrow=c(3,2))#
#
plot(MatExponentiationValuesOne)#
lines(TestRemainOne,col="red")#
#
plot(MatExponentiationValuesTwo)#
lines(TestRemainTwo,col="red")#
#
plot(MatExponentiationValuesThree)#
lines(TestRemainThree,col="red")#
#
plot(MatExponentiationValuesFour)#
lines(TestRemainFour,col="red")#
#
plot(MatExponentiationValuesFive)#
lines(TestRemainFive,col="red")#
#
par(mfrow=c(3,2))#
#
plot (MatExponentiationValuesOne - TestRemainOne)#
plot (MatExponentiationValuesTwo - TestRemainTwo)#
plot (MatExponentiationValuesThree - TestRemainThree)#
plot (MatExponentiationValuesFour - TestRemainFour)#
plot (MatExponentiationValuesFive - TestRemainFive)#
#
plot (MatExponentiationValuesThreeToTwo)#
lines (TestRemainThreeToTwo, col = "red")#
#
Dif <- MiniTest - TestRemainThree#
plot(Dif)#
#
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour)#
lines (TestRemainFiveToFour, col = "red")
plot (MatExponentiationValuesFiveToFour - TestRemainFiveToFour)
plot (MatExponentiationValuesThreeToOne)
(0 < 1)
3*(0 < 1)
3*(0 < -1)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0, 0), upperLimit = c(Time, Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
    #    f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    #   Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
MatExponentiationValuesThreeToOne$integral
MatExponentiationValuesThreeToOne[1000]
MatExponentiationValuesThreeToOne[100]
Time <- 100*.004
Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))
Integral3$integral
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time))#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
Integral3
Integral
?adaptintegrate
?adaptIntegrate
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-4)
adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree$integral,col="red")
length(IntegralThree$integral)
IntegralThree
lines(IntegralThree,col="red")
library(expm)#
library(ape)#
library(geiger)#
library(cubature)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 100#
m2 <- 100#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- 2*N_1* mig2#
DivergenceTime <- DivTime/mu#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
########################################################
#
AllFT_11 <- c()#
AllFT_12 <- c()#
AllFT_22 <- c()#
ProbPop1 <- c()#
ProbPop2 <- c()#
MatExponentiationValues <- c()#
MatExponentiationValuesOne <- c()#
MatExponentiationValuesTwo <- c()#
MatExponentiationValuesThree <- c()#
MatExponentiationValuesFour <- c()#
MatExponentiationValuesFive <- c()#
MatExponentiationValuesThreeToTwo <- c()#
MatExponentiationValuesThreeToOne <- c()#
MatExponentiationValuesFiveToFour <- c()#
TestRemainOne <- c()#
TestRemainTwo <- c()#
TestRemainThree <- c()#
TestRemainFour <- c()#
TestRemainFive <- c()#
TestRemainThreeToTwo <- c()#
TestRemainFiveToFour <- c()#
MiniTest <- c()#
IntegralTwo <- c()#
IntegralThree <- c()#
#
TestRemain <- c()#
TestRemainBest <- c()#
TestRemainTwo <- c()#
KeepTimeMatrix <- c()#
#
MatrixBind <- matrix(,nrow=1,ncol=6)#
#
for (i in 1:1000){#
    print (i)#
    Time <- i *0.004#
    TimeMatrix <- Matrix * Time#
    MatrixExponentiation <- expm(TimeMatrix)#
    F1_11 <- MatrixExponentiation[3,1]*Matrix[1,6] + MatrixExponentiation[3,2]*Matrix[2,7] + MatrixExponentiation[3,3]*Matrix[3,7] + MatrixExponentiation[3,3]*Matrix[3,8] + MatrixExponentiation[3,4]*Matrix[4,8] + MatrixExponentiation[3,5]*Matrix[5,9]#
    MatExponentiationValues <- c(MatExponentiationValues,MatrixExponentiation[3,3])#
    MatExponentiationValuesOne <- c(MatExponentiationValuesOne,MatrixExponentiation[1,1])#
    MatExponentiationValuesTwo <- c(MatExponentiationValuesTwo,MatrixExponentiation[2,2])#
    MatExponentiationValuesThree <- c(MatExponentiationValuesThree,MatrixExponentiation[3,3])#
    MatExponentiationValuesFour <- c(MatExponentiationValuesFour,MatrixExponentiation[4,4])#
    MatExponentiationValuesFive <- c(MatExponentiationValuesFive,MatrixExponentiation[5,5])#
    MatExponentiationValuesThreeToTwo <- c(MatExponentiationValuesThreeToTwo, MatrixExponentiation[3,2])#
    MatExponentiationValuesThreeToOne <- c(MatExponentiationValuesThreeToOne, MatrixExponentiation[3,1])#
    MatExponentiationValuesFiveToFour <- c(MatExponentiationValuesFiveToFour, MatrixExponentiation[5,4])#
    TestRemain <- c(TestRemain, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainOne <- c(TestRemainOne, 1 - pexp(Time,abs(Matrix[1,1])))#
    TestRemainTwo <- c(TestRemainTwo, 1 - pexp(Time,abs(Matrix[2,2])))#
    TestRemainThree <- c(TestRemainThree, 1 - pexp(Time,abs(Matrix[3,3])))#
    TestRemainFour <- c(TestRemainFour, 1 - pexp(Time,abs(Matrix[4,4])))#
    TestRemainFive <- c(TestRemainFive, 1 - pexp(Time,abs(Matrix[5,5])))#
    f <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(Time - x[1]))) } # "x" is vector#
    f2 <- function(x) {  (exp(-abs(Matrix[5,5])*x[1]))*(Matrix[5,4]) * ( exp(-abs(Matrix[4,4])*(Time - x[1]))) }#
        f3 <- function(x) { (exp(-abs(Matrix[3,3])*x[1]))*(Matrix[3,2]) * ( exp(-abs(Matrix[2,2])*(x[2] - x[1]))) * (Matrix[2,1]) * ( exp(-abs(Matrix[1,1])*(Time - x[2]))) * (x[1] < x[2]) } # "x" is vector#
#
    Integral <-  adaptIntegrate(f, lowerLimit = c(0), upperLimit = c(Time))#
    Integral2 <-  adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(Time))#
    Integral3 <-  adaptIntegrate(f3, lowerLimit = c(0, 0), upperLimit = c(Time, Time),tol = 1e-3)#
#
    IntegralTwo <- c(IntegralTwo, Integral2$integral)#
    IntegralThree <- c(IntegralThree, Integral3$integral)#
    TestRemainThreeToTwo <- c(TestRemainThreeToTwo, Integral$integral)#
    TestRemainFiveToFour <- c(TestRemainFiveToFour, Integral2$integral)#
    MiniTest <- c(MiniTest, exp(-abs(Matrix[3,3])*Time))#
    TestRemainBest <- c(TestRemainBest, (1 - pexp(Time,abs(Matrix[3,3]))) + (0.0))#
    KeepTimeMatrix <- c(KeepTimeMatrix,TimeMatrix[3,3])#
    MatrixBind <- rbind(MatrixBind, c(MatrixExponentiation[3,1]*Matrix[1,6]*0.004, MatrixExponentiation[3,2]*Matrix[2,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,7]*0.004, MatrixExponentiation[3,3]*Matrix[3,8]*0.004, MatrixExponentiation[3,4]*Matrix[4,8]*0.004, MatrixExponentiation[3,5]*Matrix[5,9]*0.004))#
    AllFT_11 <- c(AllFT_11,F1_11)#
}
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
plot (MatExponentiationValuesThreeToOne)
lines(IntegralThree,col="red")
sum(IntegralThree)
sum(MatExponentiationValuesThreeToOne)
sum(IntegralThree-MatExponentiationValuesThreeToOne)
sum((IntegralThree-MatExponentiationValuesThreeToOne)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
MatExponentiationValuesThreeToOne[1]
IntegralThree[1]
(MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne
MatExponentiationValuesThreeToOne[1]
(MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1]
sum((MatExponentiationValuesThreeToOne[1]-IntegralThree[1])/MatExponentiationValuesThreeToOne[1])
sum((MatExponentiationValuesThreeToOne-IntegralThree)/MatExponentiationValuesThreeToOne)
sum((MatExponentiationValuesThreeToOne[600]-IntegralThree[600])/MatExponentiationValuesThreeToOne[600])
sum((MatExponentiationValuesThreeToOne[1:600]-IntegralThree[1:600])/MatExponentiationValuesThreeToOne[1:600])
sum((MatExponentiationValuesThreeToOne[1:400]-IntegralThree[1:400])/MatExponentiationValuesThreeToOne[1:400])
400/17
2740/6
5.3+4.3+6.8
16.4/3
-0.0586-0.0907-0.2750
0.4243/3
.3073+.2383+.0996
0.6452/3
0.5445+.4392+.3128
1.2965/3
.005*6
5*6
0.0125*1:10
1000/18
1000/16
412*12
# Recombination rate in the EPAS1 gene#
#
5.264853e-09*60567#
#
qexp(.5, 0.0003188764*2)*3#
qexp(.9, 0.0003188764*2)*3#
qexp(.95, 0.0003188764*2)*3
qexp(.95, 0.0003188764)*3
qexp(.95, 0.0003188764)*3 /2
qexp(.95, 0.0003188764)*3.5
qexp(.95, 0.0003188764*2)*3.5
qexp(.95, 0.0003188764*2)*2
122/2 + 92.78/2 + 58.57/2 + 50/2
900/13
950/13
900/11
0.25/5
900/8
500/8
400/8
700/5
8.05+7.45+37.64+10.53+27.89+25.46+27.16+23.89
2.25+55+2.29
168.07-59.54
412*12
580*12
79/(79+32)
1167796751 - 1826551
1167796751 - 18335011
18335011/1167796751
200/20
1167796751*10
11677967510/3600
3243880/100
3243880/300
7445 - 45 -198 - 86 - 113 - 14 - 128 - 92 - 93 - 73
7/5
9.88+9.4+15.31+26.58+20+14+14+15+7+24+4.16+31+16+26
ppois(1,0.5)
ppois(1,0.5)*6
ppois(1,3)
ppois(6,0.5)
dpois(1,1)
dpois(1,1)*6
dpois(1,6)
dpois(1,1/6)
dpois(1,6)
dpois(1,1)
27+18
45/34
50/34
222000000/60000
45000000/60000
220/3
0.212285 /0.211454
Probabilities <- c(0,0,0,0,0,0,0)#
#
TotalSum <- 0#
for (Paths in 1:8){#
for (CurTree in 1:18){#
TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
print (Paths)#
print (CurTree)#
print(TreeSum[Paths,CurTree])#
if ((CurTree == 1) || (CurTree == 2)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 3)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
#
}#
if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 16) || (CurTree == 17)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
#
}#
if ((CurTree == 18)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
}#
}#
}
MigrationRate <- c(0.01,0.05,0.1,0.5,1,5,10,50)#
ProbList <- Matrix(,ncol=7,nrow=0)#
#
ProportionTestValue <- read.table("ProportionsSizeChange.txt")#
LL <- c()#
for (Mig in 1:8){#
    ### Construct Matrices#
    VeryRecentMatrix <- matrix(0,nrow=5,ncol=5)#
    Matrix <- matrix(0,nrow=14,ncol=14)#
    MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
    m1 <- 0#
    m2 <- 666.666667#
    AncM1 <- 0#
    AncM2 <- 0#
    Theta1 <- 0.005#
    Theta2 <- 0.005  * MigrationRate[Mig]#
    ThetaA <- 0.002#
    DivTime <- 0.3#
    AncTime <- 0.05#
    #################### Set mu ############################
    mu <- 1e-8#
    N_1 <- Theta1 / (4*mu)#
    N_2 <- Theta2 / (4*mu)#
    N_A <- ThetaA / (4*mu)#
    mig1 <- m1 * (mu)#
    mig2 <- m2 * (mu)#
    ancmig1 <- AncM1 * mu#
    ancmig2 <- AncM2 * mu#
    TwoN1mig1 <- 2*N_1* mig1#
    TwoN2mig2 <- 5#
    TwoN1Ancmig1 <- 2*N_1* ancmig1#
    TwoN2Ancmig2 <- 2*N_1* ancmig2#
    DivergenceTime <- DivTime/mu#
    AncestralSampleTime <- AncTime/mu#
    #DivergenceTimeInGens <- N_1*4*0.6#
    DivergenceTimeInGens <- N_1*4*10#
    #AncestralTimeInGens <- N_1*4*0.1#
    AncestralTimeInGens <- N_1*4*0.0#
    BinLimitDivTime <- DivergenceTimeInGens/2000#
    BinLimitAncTime <- AncestralTimeInGens/2000#
    DivTimeMs <- DivergenceTime / (4*N_1)#
    AncTimeMs <- AncestralSampleTime / (4*N_1)#
    ########################################################
    VeryRecentMatrix[1,1] <- - 2*TwoN1Ancmig1 - 1#
    VeryRecentMatrix[1,2] <- 2*TwoN1Ancmig1#
    VeryRecentMatrix[1,4] <- 1#
    VeryRecentMatrix[2,1] <- TwoN2Ancmig2#
    VeryRecentMatrix[2,2] <- - TwoN2Ancmig2 - TwoN1Ancmig1#
    VeryRecentMatrix[2,3] <- TwoN1Ancmig1#
    VeryRecentMatrix[3,2] <- 2*TwoN2Ancmig2#
    VeryRecentMatrix[3,3] <- - 2*TwoN2Ancmig2 - 1 * N_1 / N_2#
    VeryRecentMatrix[3,5] <- 1 * N_1 / N_2#
    VeryRecentMatrix[4,4] <- -TwoN1Ancmig1#
    VeryRecentMatrix[4,5] <- TwoN1Ancmig1#
    VeryRecentMatrix[5,4] <- TwoN2Ancmig2#
    VeryRecentMatrix[5,5] <- -TwoN2Ancmig2#
    ########################################################
    Matrix[1,1] <- -4*TwoN1mig1 - 6#
    Matrix[1,2] <- 4*TwoN1mig1#
    Matrix[1,6] <- 6#
    Matrix[2,1] <- TwoN2mig2#
    Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
    Matrix[2,3] <- 3 * TwoN1mig1#
    Matrix[2,7] <- 3#
    Matrix[3,2] <- 2*TwoN2mig2#
    Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
    Matrix[3,4] <- 2*TwoN1mig1#
    Matrix[3,7] <- 1 * N_1 / N_2#
    Matrix[3,8] <- 1#
    Matrix[4,3] <- 3*TwoN2mig2#
    Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
    Matrix[4,5] <- TwoN1mig1#
    Matrix[4,8] <- 3* N_1 / N_2#
    Matrix[5,4] <- 4*TwoN2mig2#
    Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
    Matrix[5,9] <- 6 * N_1 / N_2#
    Matrix[6,6] <- - 3*TwoN1mig1 - 3#
    Matrix[6,7] <- 3*TwoN1mig1#
    Matrix[6,10] <- 3#
    Matrix[7,6] <- TwoN2mig2#
    Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
    Matrix[7,8] <- 2*TwoN1mig1#
    Matrix[7,11] <- 1#
    Matrix[8,7] <- 2*TwoN2mig2#
    Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1 * N_1 / N_2#
    Matrix[8,9] <- TwoN1mig1#
    Matrix[8,11] <- 1 * N_1 / N_2#
    Matrix[9,8] <- 3*TwoN2mig2#
    Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
    Matrix[9,12] <- 3 * N_1 / N_2#
    Matrix[10,10] <- - 2*TwoN1mig1 - 1#
    Matrix[10,11] <- 2*TwoN1mig1#
    Matrix[10,13] <- 1#
    Matrix[11,10] <- TwoN2mig2#
    Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
    Matrix[11,12] <- TwoN1mig1#
    Matrix[12,11] <- 2*TwoN2mig2#
    Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
    Matrix[12,14] <- 1 * N_1 / N_2#
    Matrix[13,13] <- -TwoN1mig1#
    Matrix[13,14] <- TwoN1mig1#
    Matrix[14,13] <- TwoN2mig2#
    Matrix[14,14] <- -TwoN2mig2#
    ########################################################
    MiniMatrixTest[1,1] <- -6/0.4#
    MiniMatrixTest[1,2] <- 6/0.4#
    MiniMatrixTest[2,2] <- -3/0.4#
    MiniMatrixTest[2,3] <- 3/0.4#
    MiniMatrixTest[3,3] <- -1/0.4#
    MiniMatrixTest[3,4] <- 1/0.4#
    #### Get PDFs#
    print ("PDFs")#
    # T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    ##### Tree tests#
    print ("Tree tests")#
    SumPathFrequency <- c()#
    for (i in 1:11){#
        SumPathFrequency <- c(SumPathFrequency,sum(TreeTypeOne[,i]))#
    }#
    # Before June 28, 2017#
    # MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequency.txt")#
    MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequencyTreeOrder.txt")#
    TreeSum <- c()#
    TreeSum <- rbind(TreeSum,SumPathFrequency[1]*(MatrixPathTreeFrequency$V1))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[2]*(MatrixPathTreeFrequency$V2))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[3]*(MatrixPathTreeFrequency$V3))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[4]*(MatrixPathTreeFrequency$V4))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[5]*(MatrixPathTreeFrequency$V5))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[6]*(MatrixPathTreeFrequency$V6))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[7]*(MatrixPathTreeFrequency$V7))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[8]*(MatrixPathTreeFrequency$V8))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[9]*(MatrixPathTreeFrequency$V9))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[10]*(MatrixPathTreeFrequency$V10))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[11]*(MatrixPathTreeFrequency$V11))#
    FinalSum <- c()#
    for (i in 1:18){#
        FinalSum <- c(FinalSum,sum(TreeSum[,i]))#
    }#
    print ("Tree Mean T2")#
    T2MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(TreeTypeOne)){#
            T2MeanTimes[i] <- T2MeanTimes[i] + TreeTypeOne[j,i]/sum(TreeTypeOne[,i])*j#
        }#
    }#
    print ("Tree Mean T3")#
    T3MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(T3Distribution)){#
            T3MeanTimes[i] <- T3MeanTimes[i] + T3Distribution[j,i]/sum(T3Distribution[,i])*j#
        }#
    }#
    print ("Tree Mean T4")#
    T4MeanTimes <- c(0,0,0,0,0)#
    for (i in 1:5){#
        for (j in 3:nrow(T4Distribution)){#
            T4MeanTimes[i] <- T4MeanTimes[i] + T4Distribution[j,i]/sum(T4Distribution[,i])*(j-2)#
        }#
    }#
    ConvertT4MeanTimes <- c(T4MeanTimes[2],T4MeanTimes[5],T4MeanTimes[4],T4MeanTimes[4],T4MeanTimes[3],T4MeanTimes[3],T4MeanTimes[2],T4MeanTimes[2],T4MeanTimes[1],T4MeanTimes[1],T4MeanTimes[1])#
    print ("Probabilities")#
    Probabilities <- c(0,0,0,0,0,0,0)#
    TotalSum <- 0#
    for (Paths in 1:8){#
        for (CurTree in 1:18){#
            TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
            #        print (Paths)#
            #        print (CurTree)#
            #        print(TreeSum[Paths,CurTree])#
            if ((CurTree == 1) || (CurTree == 2)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 3)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 16) || (CurTree == 17)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 18)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
        }#
    }#
    ProbList <- rbind(ProbList,Probabilities)#
    Value <- ProportionTestValue$V1*log(Probabilities[1]) + ProportionTestValue$V2*log(Probabilities[2]) + ProportionTestValue$V3*log(Probabilities[3]) + ProportionTestValue$V4*log(Probabilities[4]) + ProportionTestValue$V5*log(Probabilities[5]) + ProportionTestValue$V6*log(Probabilities[6]) + ProportionTestValue$V7*log(Probabilities[7])#
    LL <- c(LL, Value)#
}
Probabilities <- c(0,0,0,0,0,0,0)#
#
TotalSum <- 0#
for (Paths in 1:8){#
for (CurTree in 1:18){#
TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
print (Paths)#
print (CurTree)#
print(TreeSum[Paths,CurTree])#
if ((CurTree == 1) || (CurTree == 2)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 3)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
#
}#
if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
#
}#
if ((CurTree == 16) || (CurTree == 17)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
#
}#
if ((CurTree == 18)){#
    T2 <- T2MeanTimes[Paths]#
    T3 <- T3MeanTimes[Paths]#
    T4 <- ConvertT4MeanTimes[Paths]#
    Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
#
    Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
    Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
    Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
    Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
    Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
    Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
}#
}#
}#
############ LL experiment#
#
MigrationRate <- c(0.25,0.75,2.5,5,7.5,25,50,75)#
ProbList <- Matrix(,ncol=7,nrow=0)#
#
ProportionTestValue <- read.table("Proportions.txt")#
LL <- c()#
for (Mig in 1:8){#
#
### Construct Matrices#
#
VeryRecentMatrix <- matrix(0,nrow=5,ncol=5)#
#
Matrix <- matrix(0,nrow=14,ncol=14)#
MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
#
m1 <- 0#
m2 <- 666.666667#
AncM1 <- 0#
AncM2 <- 0#
Theta1 <- 0.005#
Theta2 <- 0.005#
ThetaA <- 0.002#
DivTime <- 0.3#
AncTime <- 0.05#
#
#################### Set mu ############################
#
mu <- 1e-8#
N_1 <- Theta1 / (4*mu)#
N_2 <- Theta2 / (4*mu)#
N_A <- ThetaA / (4*mu)#
mig1 <- m1 * (mu)#
mig2 <- m2 * (mu)#
ancmig1 <- AncM1 * mu#
ancmig2 <- AncM2 * mu#
#
TwoN1mig1 <- 2*N_1* mig1#
TwoN2mig2 <- MigrationRate[Mig]#
TwoN1Ancmig1 <- 2*N_1* ancmig1#
TwoN2Ancmig2 <- 2*N_1* ancmig2#
#
DivergenceTime <- DivTime/mu#
AncestralSampleTime <- AncTime/mu#
#DivergenceTimeInGens <- N_1*4*0.6#
DivergenceTimeInGens <- N_1*4*10#
#AncestralTimeInGens <- N_1*4*0.1#
AncestralTimeInGens <- N_1*4*0.0#
BinLimitDivTime <- DivergenceTimeInGens/2000#
BinLimitAncTime <- AncestralTimeInGens/2000#
#
DivTimeMs <- DivergenceTime / (4*N_1)#
AncTimeMs <- AncestralSampleTime / (4*N_1)#
#
########################################################
#
VeryRecentMatrix[1,1] <- - 2*TwoN1Ancmig1 - 1#
VeryRecentMatrix[1,2] <- 2*TwoN1Ancmig1#
VeryRecentMatrix[1,4] <- 1#
#
VeryRecentMatrix[2,1] <- TwoN2Ancmig2#
VeryRecentMatrix[2,2] <- - TwoN2Ancmig2 - TwoN1Ancmig1#
VeryRecentMatrix[2,3] <- TwoN1Ancmig1#
#
VeryRecentMatrix[3,2] <- 2*TwoN2Ancmig2#
VeryRecentMatrix[3,3] <- - 2*TwoN2Ancmig2 - 1 * N_1 / N_2#
VeryRecentMatrix[3,5] <- 1 * N_1 / N_2#
#
VeryRecentMatrix[4,4] <- -TwoN1Ancmig1#
VeryRecentMatrix[4,5] <- TwoN1Ancmig1#
#
VeryRecentMatrix[5,4] <- TwoN2Ancmig2#
VeryRecentMatrix[5,5] <- -TwoN2Ancmig2#
#
########################################################
#
Matrix[1,1] <- -4*TwoN1mig1 - 6#
Matrix[1,2] <- 4*TwoN1mig1#
Matrix[1,6] <- 6#
#
Matrix[2,1] <- TwoN2mig2#
Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
Matrix[2,3] <- 3 * TwoN1mig1#
Matrix[2,7] <- 3#
#
Matrix[3,2] <- 2*TwoN2mig2#
Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
Matrix[3,4] <- 2*TwoN1mig1#
Matrix[3,7] <- 1 * N_1 / N_2#
Matrix[3,8] <- 1#
#
Matrix[4,3] <- 3*TwoN2mig2#
Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
Matrix[4,5] <- TwoN1mig1#
Matrix[4,8] <- 3* N_1 / N_2#
#
Matrix[5,4] <- 4*TwoN2mig2#
Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
Matrix[5,9] <- 6 * N_1 / N_2#
#
Matrix[6,6] <- - 3*TwoN1mig1 - 3#
Matrix[6,7] <- 3*TwoN1mig1#
Matrix[6,10] <- 3#
#
Matrix[7,6] <- TwoN2mig2#
Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
Matrix[7,8] <- 2*TwoN1mig1#
Matrix[7,11] <- 1#
#
Matrix[8,7] <- 2*TwoN2mig2#
Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1#
Matrix[8,9] <- TwoN1mig1#
Matrix[8,11] <- 1 * N_1 / N_2#
#
Matrix[9,8] <- 3*TwoN2mig2#
Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
Matrix[9,12] <- 3 * N_1 / N_2#
#
Matrix[10,10] <- - 2*TwoN1mig1 - 1#
Matrix[10,11] <- 2*TwoN1mig1#
Matrix[10,13] <- 1#
#
Matrix[11,10] <- TwoN2mig2#
Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
Matrix[11,12] <- TwoN1mig1#
#
Matrix[12,11] <- 2*TwoN2mig2#
Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
Matrix[12,14] <- 1 * N_1 / N_2#
#
Matrix[13,13] <- -TwoN1mig1#
Matrix[13,14] <- TwoN1mig1#
#
Matrix[14,13] <- TwoN2mig2#
Matrix[14,14] <- -TwoN2mig2#
#
########################################################
#
MiniMatrixTest[1,1] <- -6/0.4#
MiniMatrixTest[1,2] <- 6/0.4#
MiniMatrixTest[2,2] <- -3/0.4#
MiniMatrixTest[2,3] <- 3/0.4#
MiniMatrixTest[3,3] <- -1/0.4#
MiniMatrixTest[3,4] <- 1/0.4#
#
#### Get PDFs#
print ("PDFs")#
# T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
# T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
# TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,400000,0,400000,200,10000)#
T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,400000,0,400000,200,10000)#
TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,400000,0,400000,200,10000)#
##### Tree tests#
#
print ("Tree tests")#
#
SumPathFrequency <- c()#
#
for (i in 1:11){#
    SumPathFrequency <- c(SumPathFrequency,sum(TreeTypeOne[,i]))#
}#
#
# Before June 28, 2017#
# MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequency.txt")#
#
MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequencyTreeOrder.txt")#
#
TreeSum <- c()#
#
TreeSum <- rbind(TreeSum,SumPathFrequency[1]*(MatrixPathTreeFrequency$V1))#
TreeSum <- rbind(TreeSum,SumPathFrequency[2]*(MatrixPathTreeFrequency$V2))#
TreeSum <- rbind(TreeSum,SumPathFrequency[3]*(MatrixPathTreeFrequency$V3))#
TreeSum <- rbind(TreeSum,SumPathFrequency[4]*(MatrixPathTreeFrequency$V4))#
TreeSum <- rbind(TreeSum,SumPathFrequency[5]*(MatrixPathTreeFrequency$V5))#
TreeSum <- rbind(TreeSum,SumPathFrequency[6]*(MatrixPathTreeFrequency$V6))#
TreeSum <- rbind(TreeSum,SumPathFrequency[7]*(MatrixPathTreeFrequency$V7))#
TreeSum <- rbind(TreeSum,SumPathFrequency[8]*(MatrixPathTreeFrequency$V8))#
TreeSum <- rbind(TreeSum,SumPathFrequency[9]*(MatrixPathTreeFrequency$V9))#
TreeSum <- rbind(TreeSum,SumPathFrequency[10]*(MatrixPathTreeFrequency$V10))#
TreeSum <- rbind(TreeSum,SumPathFrequency[11]*(MatrixPathTreeFrequency$V11))#
#
FinalSum <- c()#
#
for (i in 1:18){#
    FinalSum <- c(FinalSum,sum(TreeSum[,i]))#
}#
#
print ("Tree Mean T2")#
#
T2MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
#
for (i in 1:11){#
    for (j in 1:nrow(TreeTypeOne)){#
        T2MeanTimes[i] <- T2MeanTimes[i] + TreeTypeOne[j,i]/sum(TreeTypeOne[,i])*j#
    }#
}#
#
print ("Tree Mean T3")#
#
T3MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
#
for (i in 1:11){#
    for (j in 1:nrow(T3Distribution)){#
        T3MeanTimes[i] <- T3MeanTimes[i] + T3Distribution[j,i]/sum(T3Distribution[,i])*j#
    }#
}#
#
print ("Tree Mean T4")#
#
T4MeanTimes <- c(0,0,0,0,0)#
#
for (i in 1:5){#
    for (j in 3:nrow(T4Distribution)){#
        T4MeanTimes[i] <- T4MeanTimes[i] + T4Distribution[j,i]/sum(T4Distribution[,i])*(j-2)#
    }#
}#
#
ConvertT4MeanTimes <- c(T4MeanTimes[2],T4MeanTimes[5],T4MeanTimes[4],T4MeanTimes[4],T4MeanTimes[3],T4MeanTimes[3],T4MeanTimes[2],T4MeanTimes[2],T4MeanTimes[1],T4MeanTimes[1],T4MeanTimes[1])#
#
print ("Probabilities")#
#
Probabilities <- c(0,0,0,0,0,0,0)#
#
TotalSum <- 0#
for (Paths in 1:8){#
    for (CurTree in 1:18){#
        TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
        #        print (Paths)#
        #        print (CurTree)#
        #        print(TreeSum[Paths,CurTree])#
        if ((CurTree == 1) || (CurTree == 2)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 3)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
        }#
        if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 16) || (CurTree == 17)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
        }#
        if ((CurTree == 18)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
    }#
}#
ProbList <- rbind(ProbList,Probabilities)#
Value <- ProportionTestValue$V1*log(Probabilities[1]) + ProportionTestValue$V2*log(Probabilities[2]) + ProportionTestValue$V3*log(Probabilities[3]) + ProportionTestValue$V4*log(Probabilities[4]) + ProportionTestValue$V5*log(Probabilities[5]) + ProportionTestValue$V6*log(Probabilities[6]) + ProportionTestValue$V7*log(Probabilities[7])#
LL <- c(LL, Value)#
}#
#
pdf("LLMigRate.pdf")#
par(mar=c(4.1,5.1,4.1,2.1))#
plot(LL,type="o",xaxt='n',xlab="4Nm",cex=2,pch=19,cex.axis=2,cex.lab=2)#
arrows(3,LL[3]-10000,3,LL[3]-1000)#
axis(1,at=c(1,2,3,4,5,6,7,8),labels=c("0.5","1.5","5","10","15","50","100","150"),cex.axis=1.5)#
legend(1.2,LL[3]-8000,"True value",bty="n",cex=2)#
dev.off()#
#
############################# Population size change #################################
MigrationRate <- c(0.01,0.05,0.1,0.5,1,5,10,50)#
ProbList <- Matrix(,ncol=7,nrow=0)#
#
ProportionTestValue <- read.table("ProportionsSizeChange.txt")#
LL <- c()#
for (Mig in 1:8){#
    ### Construct Matrices#
    VeryRecentMatrix <- matrix(0,nrow=5,ncol=5)#
    Matrix <- matrix(0,nrow=14,ncol=14)#
    MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
    m1 <- 0#
    m2 <- 666.666667#
    AncM1 <- 0#
    AncM2 <- 0#
    Theta1 <- 0.005#
    Theta2 <- 0.005  * MigrationRate[Mig]#
    ThetaA <- 0.002#
    DivTime <- 0.3#
    AncTime <- 0.05#
    #################### Set mu ############################
    mu <- 1e-8#
    N_1 <- Theta1 / (4*mu)#
    N_2 <- Theta2 / (4*mu)#
    N_A <- ThetaA / (4*mu)#
    mig1 <- m1 * (mu)#
    mig2 <- m2 * (mu)#
    ancmig1 <- AncM1 * mu#
    ancmig2 <- AncM2 * mu#
    TwoN1mig1 <- 2*N_1* mig1#
    TwoN2mig2 <- 5#
    TwoN1Ancmig1 <- 2*N_1* ancmig1#
    TwoN2Ancmig2 <- 2*N_1* ancmig2#
    DivergenceTime <- DivTime/mu#
    AncestralSampleTime <- AncTime/mu#
    #DivergenceTimeInGens <- N_1*4*0.6#
    DivergenceTimeInGens <- N_1*4*10#
    #AncestralTimeInGens <- N_1*4*0.1#
    AncestralTimeInGens <- N_1*4*0.0#
    BinLimitDivTime <- DivergenceTimeInGens/2000#
    BinLimitAncTime <- AncestralTimeInGens/2000#
    DivTimeMs <- DivergenceTime / (4*N_1)#
    AncTimeMs <- AncestralSampleTime / (4*N_1)#
    ########################################################
    VeryRecentMatrix[1,1] <- - 2*TwoN1Ancmig1 - 1#
    VeryRecentMatrix[1,2] <- 2*TwoN1Ancmig1#
    VeryRecentMatrix[1,4] <- 1#
    VeryRecentMatrix[2,1] <- TwoN2Ancmig2#
    VeryRecentMatrix[2,2] <- - TwoN2Ancmig2 - TwoN1Ancmig1#
    VeryRecentMatrix[2,3] <- TwoN1Ancmig1#
    VeryRecentMatrix[3,2] <- 2*TwoN2Ancmig2#
    VeryRecentMatrix[3,3] <- - 2*TwoN2Ancmig2 - 1 * N_1 / N_2#
    VeryRecentMatrix[3,5] <- 1 * N_1 / N_2#
    VeryRecentMatrix[4,4] <- -TwoN1Ancmig1#
    VeryRecentMatrix[4,5] <- TwoN1Ancmig1#
    VeryRecentMatrix[5,4] <- TwoN2Ancmig2#
    VeryRecentMatrix[5,5] <- -TwoN2Ancmig2#
    ########################################################
    Matrix[1,1] <- -4*TwoN1mig1 - 6#
    Matrix[1,2] <- 4*TwoN1mig1#
    Matrix[1,6] <- 6#
    Matrix[2,1] <- TwoN2mig2#
    Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
    Matrix[2,3] <- 3 * TwoN1mig1#
    Matrix[2,7] <- 3#
    Matrix[3,2] <- 2*TwoN2mig2#
    Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
    Matrix[3,4] <- 2*TwoN1mig1#
    Matrix[3,7] <- 1 * N_1 / N_2#
    Matrix[3,8] <- 1#
    Matrix[4,3] <- 3*TwoN2mig2#
    Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
    Matrix[4,5] <- TwoN1mig1#
    Matrix[4,8] <- 3* N_1 / N_2#
    Matrix[5,4] <- 4*TwoN2mig2#
    Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
    Matrix[5,9] <- 6 * N_1 / N_2#
    Matrix[6,6] <- - 3*TwoN1mig1 - 3#
    Matrix[6,7] <- 3*TwoN1mig1#
    Matrix[6,10] <- 3#
    Matrix[7,6] <- TwoN2mig2#
    Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
    Matrix[7,8] <- 2*TwoN1mig1#
    Matrix[7,11] <- 1#
    Matrix[8,7] <- 2*TwoN2mig2#
    Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1 * N_1 / N_2#
    Matrix[8,9] <- TwoN1mig1#
    Matrix[8,11] <- 1 * N_1 / N_2#
    Matrix[9,8] <- 3*TwoN2mig2#
    Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
    Matrix[9,12] <- 3 * N_1 / N_2#
    Matrix[10,10] <- - 2*TwoN1mig1 - 1#
    Matrix[10,11] <- 2*TwoN1mig1#
    Matrix[10,13] <- 1#
    Matrix[11,10] <- TwoN2mig2#
    Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
    Matrix[11,12] <- TwoN1mig1#
    Matrix[12,11] <- 2*TwoN2mig2#
    Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
    Matrix[12,14] <- 1 * N_1 / N_2#
    Matrix[13,13] <- -TwoN1mig1#
    Matrix[13,14] <- TwoN1mig1#
    Matrix[14,13] <- TwoN2mig2#
    Matrix[14,14] <- -TwoN2mig2#
    ########################################################
    MiniMatrixTest[1,1] <- -6/0.4#
    MiniMatrixTest[1,2] <- 6/0.4#
    MiniMatrixTest[2,2] <- -3/0.4#
    MiniMatrixTest[2,3] <- 3/0.4#
    MiniMatrixTest[3,3] <- -1/0.4#
    MiniMatrixTest[3,4] <- 1/0.4#
    #### Get PDFs#
    print ("PDFs")#
    # T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    ##### Tree tests#
    print ("Tree tests")#
    SumPathFrequency <- c()#
    for (i in 1:11){#
        SumPathFrequency <- c(SumPathFrequency,sum(TreeTypeOne[,i]))#
    }#
    # Before June 28, 2017#
    # MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequency.txt")#
    MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequencyTreeOrder.txt")#
    TreeSum <- c()#
    TreeSum <- rbind(TreeSum,SumPathFrequency[1]*(MatrixPathTreeFrequency$V1))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[2]*(MatrixPathTreeFrequency$V2))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[3]*(MatrixPathTreeFrequency$V3))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[4]*(MatrixPathTreeFrequency$V4))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[5]*(MatrixPathTreeFrequency$V5))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[6]*(MatrixPathTreeFrequency$V6))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[7]*(MatrixPathTreeFrequency$V7))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[8]*(MatrixPathTreeFrequency$V8))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[9]*(MatrixPathTreeFrequency$V9))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[10]*(MatrixPathTreeFrequency$V10))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[11]*(MatrixPathTreeFrequency$V11))#
    FinalSum <- c()#
    for (i in 1:18){#
        FinalSum <- c(FinalSum,sum(TreeSum[,i]))#
    }#
    print ("Tree Mean T2")#
    T2MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(TreeTypeOne)){#
            T2MeanTimes[i] <- T2MeanTimes[i] + TreeTypeOne[j,i]/sum(TreeTypeOne[,i])*j#
        }#
    }#
    print ("Tree Mean T3")#
    T3MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(T3Distribution)){#
            T3MeanTimes[i] <- T3MeanTimes[i] + T3Distribution[j,i]/sum(T3Distribution[,i])*j#
        }#
    }#
    print ("Tree Mean T4")#
    T4MeanTimes <- c(0,0,0,0,0)#
    for (i in 1:5){#
        for (j in 3:nrow(T4Distribution)){#
            T4MeanTimes[i] <- T4MeanTimes[i] + T4Distribution[j,i]/sum(T4Distribution[,i])*(j-2)#
        }#
    }#
    ConvertT4MeanTimes <- c(T4MeanTimes[2],T4MeanTimes[5],T4MeanTimes[4],T4MeanTimes[4],T4MeanTimes[3],T4MeanTimes[3],T4MeanTimes[2],T4MeanTimes[2],T4MeanTimes[1],T4MeanTimes[1],T4MeanTimes[1])#
    print ("Probabilities")#
    Probabilities <- c(0,0,0,0,0,0,0)#
    TotalSum <- 0#
    for (Paths in 1:8){#
        for (CurTree in 1:18){#
            TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
            #        print (Paths)#
            #        print (CurTree)#
            #        print(TreeSum[Paths,CurTree])#
            if ((CurTree == 1) || (CurTree == 2)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 3)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 16) || (CurTree == 17)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 18)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
        }#
    }#
    ProbList <- rbind(ProbList,Probabilities)#
    Value <- ProportionTestValue$V1*log(Probabilities[1]) + ProportionTestValue$V2*log(Probabilities[2]) + ProportionTestValue$V3*log(Probabilities[3]) + ProportionTestValue$V4*log(Probabilities[4]) + ProportionTestValue$V5*log(Probabilities[5]) + ProportionTestValue$V6*log(Probabilities[6]) + ProportionTestValue$V7*log(Probabilities[7])#
    LL <- c(LL, Value)#
}#
pdf("PopSizeChangeRate.pdf")#
par(mar=c(4.1,5.1,4.1,2.1))#
plot(LL,type="o",xaxt='n',xlab=expression(N[2]/N[1]),cex=2,pch=19,cex.axis=2,cex.lab=2)#
arrows(3,LL[3]-10000,3,LL[3]-1000)#
axis(1,at=c(1,2,3,4,5,6,7,8),labels=c("0.01","0.05","0.1","0.5","1","5","10","50"),cex.axis=1.5)#
legend(1.2,LL[3]-8000,"True value",bty="n",cex=2)#
dev.off()
611*2
factorial(72)
factorial(2)
factorial(72-2)
6.123446e+103/1.197857e+100
5112*611
factorial(72)/factorial(70)
6.123446e+103/(2*1.197857e+100)
250*48
1174/25
1264/25
3433000000/20
3433000000/17
255/60
#### run the main function by typing:#
# success_rate = test_venter(rounds, n)#
#
#n is the number of people in each group#
#rounds is the number of simulation rounds.#
#success_rate is the identifiability power of demographic iddentifiers#
#
# The function runs a simple procedure that matches the Venter et al.#
# definition of identifiability.#
# In each round, the function genreates sex, age, and self-reported ethnicity labels#
# for n people according to the distributions of the Venter paper. #
# It then takes the first person to be the person of interest#
# and compares whether this person is unique in the n people. #
# If the combination of labels for this person is unique, it says: "Success!"#
#
# Venter had a team of 30 researchers that developed fancy face morphology predictions, #
# voice signatures, and many other sophisticated algorithms. Using the same success creterion, #
# they had a success rate of 80%.#
#
# You are about to test a procedure that uses age, sex, and ethnic group which are not protected by #
#HIPAA and took me less than an hour to develop. #
# Try running test_venter(1000, 10)#
# and see the success rate.#
library(reshape)#
freq <- function(x){#
  return (x/sum(x))#
}#
#
inverse_cdf<-function(cdf) {#
  p = runif(1, 0, 1)#
#
  for (i in 1:length(cdf)) {#
    if (p < cdf[i]) {#
        return (i)#
    }#
  }#
  return (length(cdf))#
}#
simulate_a_group_of_people<-function(n, rounds) {#
  take_n_people = c()#
  #let's generate a group of n people from Venter's cohort#
  for (i in 1:n){#
    sex_ethnicity_label = inverse_cdf(people.cdf)#
    age_label =  inverse_cdf(age.cdf)#
    final_label = paste(sex_ethnicity_label, age_label, sep='_')#
    take_n_people = rbind(take_n_people, final_label)#
  }#
  colnames(take_n_people)[1] <- 'labels' #the name of the column#
  return(take_n_people)#
}#
test_venter<-function(rounds, n) {#
  #rounds: the number of times to run the procedure#
  #n: the group of individuals to re-identify the sample#
  #lading data#
  male = c(381,	126,	39,	39,	8,	39)#
  female = c(188, 147, 24, 24, 10, 36)#
  people = data.frame(male,female)#
  row.names(people) = c('African', 'European','Latino','East Asian','South Asian', 'Other')#
  age = c(295, 190, 130, 90, 95, 120, 100, 35, 5, 1)#
  #calculating pdfs#
  people.freq = freq(people)#
  age.freq = freq(age)#
  people.freq_v = melt(people.freq) #table to a long vector#
  people.cdf = cumsum(people.freq_v$value)#
  age.cdf = cumsum(age.freq)#
  success = 0#
  #start sampling#
  for (i in 1:rounds){#
    #let draw n people from the distribution#
    a_group_of_people = (simulate_a_group_of_people(n))#
    our_person = a_group_of_people[1] # we decided arbitrarly that the person of interest is always first#
    z = length(grep(our_person, a_group_of_people))#
    if (z == 1) {#
      success = success + 1#
    }#
  }#
  return(success/rounds)#
}
test_venter(100,2)
s = test_venter(100,2)
1100/24
1070/23
1060/22
205*25
1160/21
45+89+183+125
2017-44
200*25
130*30
370*30
41638/12
41638/11
3785.273*12
700/12
600/12
636/11
626/11
600/11
580/11
580/9
10^-5
.00001
.0001
7000*.0001
514+111
625+282
907/5
407/5
700000/40000000
12/44
24/44
44/2
12627/44993
44993/12627
44993/2000
7780
5500 + 3300
119(31)
119*31
.0005
.0005 * 10000
60+3+1+1+2+2
3350-900
7800-3300
1200/26
10+29.58+27.01
10+29.58+27.01+76+48.75
191.34/2
10+27.01+76+48.75
161.76/2
551894/110379
551894/110378
11.0959/2
11.0959/10.5408
1+401+401+201
1+401+201
11.0959/10000
0.00110959*551894
4594*0.01088376
22970* 0.01088376
22970* 0.01088376/5
0.01088376/5
1200/17
110379*5
10000/6
100000/6
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
for (j in 1:3){#
	print(DemScenario[j])#
	MaxFreq <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxFreq <- max(MaxFreq,Data$V2)#
		print(MaxFreq)#
	}#
	ListMaxFreq <- c(ListMaxFreq,MaxFreq)#
	MaxAge <- 0#
	TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTest[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Max <- max(density(Data$V1*Ne[j]*2,from=0,to=quantile(Data$V1*Ne[j]*2,0.99))$x)#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTest[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxAge <- max(MaxAge,(density(Data$V1*Ne[j]*2,from=0,to=Max)$y))#
		print(MaxAge)#
	}#
	ListMaxAge <- c(ListMaxAge,MaxAge)#
	MaxT2 <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxT2 <- max(MaxT2,Data$V2)#
		print(MaxT2)#
	}#
	ListMaxT2 <- c(ListMaxT2,MaxT2)	#
}#
############################################################################ Only three figures #
for (j in 1:1){#
	Plot <- paste("../Figures/SuppFigure3_AgeT2SelInference.pdf",sep="")#
	pdf(Plot,width=12,height=12)#
	par(mfrow=c(2,2))#
	par(mar=c(5,5,4,2) + 0.1)   #
#
############### Population scenarios#
#
	if (j==1 || j==2){#
		plot(c(100000,100000-5000,100000-5200,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Ancient Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
#
	if (j==9 || j==10){#
		plot(c(100000,100000-100,100000-300,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Recent Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
	if (j==5 || j==6){#
		plot(c(100000,100000-2000,100000-2200,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Moderately Ancient Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
	if (j==7 || j==8){#
	plot(c(100000,100000-100,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Population Expansion Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
	axis(1,at=c(100000,100000-100,100000-200,100000-300),labels = c("Present","100","200","300"),cex.axis=2)#
	axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2)#
	}#
	if (j==3 || j==4 || j==11){#
		plot(c(100000,100000-100,100000-10000),c(10000,10000,10000),type="s",xlim=c(100000-6000,100000),ylim=c(0,10000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Constant Population Size Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(10000,0),labels = c("10000","0"),cex.axis=2)#
	}#
############## Trajectories#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	ColorViridis <- viridis(5)#
	ColorViridisAlpha <- viridis(5,alpha=0.6)#
	Color <- col2rgb("black")#
	if (j==7 || j==8){#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Generations before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[j]*1.3),main="B) Average Frequency Trajectory",xaxt="n",cex.lab=2,cex.main=2,cex.axis=2,lwd=6,col=ColorViridis[3])#
	}else{#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Generations before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[j]),main="B) Average Frequency Trajectory",xaxt="n",cex.lab=2,cex.main=2,cex.axis=2,lwd=6,col=ColorViridis[3])#
	}#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	if (j==7 || j==8){#
	abline(v=5000-100,lty=3,cex=3,lwd=3)#
	}#
	if (j==1 || j==2){#
		abline(v=5000-5000,lty=3,lwd=3)#
		abline(v=5000-5200,lty=3,lwd=3)#
	}#
	if (j==5 || j==6){#
		abline(v=5000-2000,lty=3,lwd=3)#
		abline(v=5000-2200,lty=3,lwd=3)#
	}#
	if (j==9 || j==10){#
		abline(v=5000-100,lty=3,cex=3,lwd=3)#
		abline(v=5000-300,lty=3,cex=3,lwd=3)#
	}#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[2],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[3],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[4],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[5],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
	if (j == 1 || j == 2 ){#
	legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 5){#
	legend(5000-1500,0.0078,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 6){#
		legend(5000-1600,0.0035,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 9){#
		legend(5000-1500,0.017,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 10){#
		legend(5000-1500,0.0065,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if (j == 7 || j == 8 ){#
		legend("topleft",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")	#
	}else if (j == 3 ||j == 4 ||j == 11){#
		legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(5000,4000,3000,2000,1000,0),labels=c("Present","1000","2000","3000","4000","5000"),cex.lab=2,cex.axis=2)#
	par(mar=c(5,5,4,2) + 0.1)   #
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[1],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("black")#
	axis.break(1, max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.2*(XLimFigureTwo[j]), style = "gap")#
#
	plot(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],xlab=expression(bold(T[2])),ylab="Probability",type="l",main=expression(bold(paste("C) ",T[2],sep=""))),ylim=c(-0.2*ListMaxT2[j],1.05*ListMaxT2[j]),xaxt="n",yaxt="n",cex.lab=2,cex.main=2,cex.axis=1.5,lwd=6,col=ColorViridis[3])#
#,ylim=c(0,1.0)#
	if (j==7 || j==8){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
	}#
	if (j==1 || j==2){#
#		abline(v=Data$V1[XLimFigureThree[j]]-5000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-5200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5000,0,Data$V1[XLimFigureThree[j]]-5000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5200,0,Data$V1[XLimFigureThree[j]]-5200,300,lty=3,lwd=3)#
#
	}#
	if (j==5 || j==6){#
#		abline(v=Data$V1[XLimFigureThree[j]]-2000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-2200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2000,0,Data$V1[XLimFigureThree[j]]-2000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2200,0,Data$V1[XLimFigureThree[j]]-2200,300,lty=3,lwd=3)#
#
	}#
	if (j==9 || j==10){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-300,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-300,0,Data$V1[XLimFigureThree[j]]-100,300,lty=3,lwd=3)#
#
	}#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.12*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.12*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[3],lwd=6)#
#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.12*ListMaxT2[j],pch=20,col=ColorViridis[3],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[2],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[2],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.08*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.08*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[2],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.08*ListMaxT2[j],pch=20,col=ColorViridis[2],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[3],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[1],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.04*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.04*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[1],lwd=6)#
#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.04*ListMaxT2[j],pch=20,col=ColorViridis[1],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[4],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[4],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.16*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.16*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[4],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.16*ListMaxT2[j],pch=20,col=ColorViridis[4],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[5],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[5],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.2*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.2*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[5],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.2*ListMaxT2[j],pch=20,col=ColorViridis[5],cex=3)#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(XLimFigureThree[j]-700,XLimFigureThree[j]-600,XLimFigureThree[j]-500,XLimFigureThree[j]-400,XLimFigureThree[j]-300,XLimFigureThree[j]-200,XLimFigureThree[j]-100,XLimFigureThree[j]),labels=c("700","600","500","400","300","200","100","Present"),cex.lab=2,cex.axis=2)	#
	axis(2,at=c(0,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04),labels=c("0","0.005","0.01","0.015","0.02","0.025","0.03","0.035","0.04"),cex.lab=2,cex.axis=2)	#
	if (j==3){#
		Distribution4Ns0 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable0_N10000.txt")#
		Distribution4Ns5 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-5_N10000.txt")#
		Distribution4Ns10 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-10_N10000.txt")#
		Distribution4Ns50 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-50_N10000.txt")#
		Distribution4Ns100 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-100_N10000.txt")#
#		boxplot(Distribution4Ns0$V1,Distribution4Ns5$V1,Distribution4Ns10$V1,Distribution4Ns50$V1,Distribution4Ns100$V1,names=c("0","5","10","50","100"), main="D) Inference of selection",xlab="Actual 4Ns values",ylab="Estimated 4Ns values",ylim=c(0,150),cex.lab=2,cex.axis=2)#
#		abline(a=0,b=0,lty=2)#
#		abline(a=5,b=0,lty=2)#
#		abline(a=10,b=0,lty=2)#
#		abline(a=50,b=0,lty=2)#
#		abline(a=100,b=0,lty=2)#
	}#
	if (j==7){#
		DataMinus50 <- read.table("InferenceOfSelection/Selection-50_N10000.txt")#
		Data0 <- read.table("InferenceOfSelection/Selection0_N10000.txt")#
		DataPlus50 <- read.table("InferenceOfSelection/Selection50_N10000.txt")#
#		boxplot(DataMinus50$V1-100,Data0$V1-100,DataPlus50$V1-100,names=c("-50","0","50"),ylab="Estimated 4Ns values",xlab="Real 4Ns values", main="D) Inference of selection",cex.lab=2,cex.names=2,cex.axis=2)#
# "10,000 haplotype lenghts per point (100 points in total per 4Ns value)"#
#		abline(h=-50,lty=2)#
#		abline(h=0,lty=2)#
#		abline(h=50,lty=2)#
#	dev.off()#
	}#
    Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck0_N10000.txt")#
    Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck50_N10000.txt")#
    Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck100_N10000.txt")#
    Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck-50_N10000.txt")#
    Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck-100_N10000.txt")#
    beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="D) Inference of Selection",cex.axis=1.3,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
    abline(h=0,lty=3)#
    abline(h=-50,lty=3)#
    abline(h=50,lty=3)#
    abline(h=100,lty=3)#
    abline(h=-100,lty=3)#
	par(mar=c(0,0,5,0) + 0.1)#
#par(oma=c(0,0,0,0) + 0.1)#
#	Image <- readJPEG("PotentialPaperFigures/HaplotypeLengths/Slide1.jpg")#
#	plot(0.5,0.5,xaxt="n",yaxt="n",xlim=c(0,1.333333),ylim=c(0,1),main="D) The effect of selection on pairwise\n haplotypic identity by state lengths (L)",cex.main=2)#
#	rasterImage(Image,0.0,0.0,1.333333,1,bty="n")#
	dev.off()#
}
