19065/117000
6515/78000
6515/78000/2
6515/39000
8184/39000
dbinom(57,300,71/300)
pbbinom(57,300,71/300)
pbinom(57,300,71/300)
pbinom(71,300,57/300)
234000/300
2200*12
12000/12
500*12
1700*12
1500*12
1600*12
1700*12
1750*12
1650*12
101*12
1900/850
20000000*101
4 * 1000 * 1.2e-8 * 5
0.000000012
468000/600
185527/468000
520954/1331460
1/5000
2000*500
1000000/40
4*10000*.001
3000*20
60000/3600
2000/300
2000/200
10*40
400/60
500/20
25*20
500/60
1000/15
11284/403
1500/150
300/60
1500/140
10*40
400/60
(203+76+203)/3
(203+76+203)/5
(200+200+0+0+(203-76))/5
200*4/5
(43+203+16+23+203)/5
21600/12
337/1800
1800/337
0.1872222/600
0.1872222*600
0.1872222*1800
0.1872222*3000
0.1872222*3600
0.1872222*3300
1800/20
90*20
1800/60
4*1000*500000
4*1000*500000 * 10^-8
4*1000*500000 * 10^-10
dpois(0,0.2)
dpois(0,0.02)
108995/282360
219470/563940
151740/390000
110925/282360
362*2
108634/563940
54952/282360
1800/12
1800*12
21600/48
900*48
480/6
480/60
1000/448
1000/48
0.00000000012
337*1560
337*780
8636364 * 5
50000/20
200*500
200*200
200*400
library(here)#
library(viridis)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2 / 3 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.666666667 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(187.3759681 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(187.3759681 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((187.3759681 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(187.3759681 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()
i^0
( 29277495 * 160 * 0.666666667 * 0.00000006 )
exp(.2)
exp(2)
log(10)
exp(2)
7242 * 0.0095
7242 * 0.0105
470 * 3 + 520
1930 - 1930*.15
2615(6)
2615*6
15690/20
2641
2641/20
0.0302/0.2553
0.2553/0.0302
factorial(72)/(factorial(70)*factorial(2))
2556*2*273
2*1000
10000/500
2000*20
40000/100
400/60
400/24
40000/100
400/24
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 1:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print (sum(TotalErrors))#
print (SignificantPValueNumber)#
NeutralVector <- rbind(NeutralVector, ConcatenateTestValues[203*6+1:6,545])#
#### AdditionalStep#
#
for (i in 1:546){#
    if (RecValues$V1[i] >= RecombinationQuantiles$V1[20]){#
        ConcatenateTestValues[,i] <- rep.int(1, 403*6)#
        print(i)#
    }#
}#
#
write.table(ConcatenateTestValues, file = "PLGivenSTableWithRecs.txt",row.names= FALSE,col.names = FALSE)#
#
Stuff <- c()#
for (i in 1:403){#
Stuff <- rbind(Stuff,c( ConcatenateTestValues[ i * 6 + 1:6,545] ))#
}#
Stuff#
write.table(Stuff,"AyCaon.txt",sep="\t")
Test
?poly
Test
Error
sum(TotalErrors)
nrow(TotalErrors)
length(TotalErrors)
2418/6
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print (sum(TotalErrors))#
print (SignificantPValueNumber)#
NeutralVector <- rbind(NeutralVector, ConcatenateTestValues[203*6+1:6,545])#
#### AdditionalStep#
#
for (i in 1:546){#
    if (RecValues$V1[i] >= RecombinationQuantiles$V1[20]){#
        ConcatenateTestValues[,i] <- rep.int(1, 403*6)#
        print(i)#
    }#
}#
#
write.table(ConcatenateTestValues, file = "PLGivenSTableWithRecs.txt",row.names= FALSE,col.names = FALSE)#
#
Stuff <- c()#
for (i in 1:403){#
Stuff <- rbind(Stuff,c( ConcatenateTestValues[ i * 6 + 1:6,545] ))#
}#
Stuff#
write.table(Stuff,"AyCaon.txt",sep="\t")
nrow(TotalErrors)
length(TotalErrors)
2406/401
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 1#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print (sum(TotalErrors))#
print (SignificantPValueNumber)
Points
Test
length(TotalErrors)
print (sum(TotalErrors)) / length(TotalErrors)
print (sum(TotalErrors) / length(TotalErrors))
6*401
round(print (sum(TotalErrors)) / length(TotalErrors), digits=3)
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 1#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 2#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 3#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 4#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 6#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
round(print (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
0.342-0.319
0.342-0.319 / 0.342
0.342-0.319 / 0.319
length(TotalErrors)
print(round)(sum(TotalErrors)) / length(TotalErrors), digits=4))
print(round(sum(TotalErrors)) / length(TotalErrors), digits=4))
print(round(sum(TotalErrors)) / length(TotalErrors), digits=4)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 7#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 1#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 2#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 3#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 4#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 6#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 7#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
(0.03408-0.032)
0.032*0.1
summary(lm.out1)
Points
Comparison$V1
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims")#
#
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts/Sims/UK10K_OnePercenters/ForwardSims/RecRateMissenseOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
NeutralVector <- c()#
# par(mfrow=c(2,3))#
#
SignificantPValueNumber <- 0#
TotalErrors <- c()#
ConcatenateErrorValues <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 3:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
for (k in 1:(PolyNum+1)){#
    if (summary(lm.out1)$coefficients[k,4] > 0.05){#
        SignificantPValueNumber <- SignificantPValueNumber + 1#
        ConcatenateErrorValues <- c(ConcatenateErrorValues,rbind(i,k,FourNs))#
    }#
}#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
print(round (sum(TotalErrors)) / length(TotalErrors), digits=4)#
print (SignificantPValueNumber)
Points
Test
RecombinationQuantiles$V1
ConcatenateTestValues
t(SingleTest)
nrow(ConcatenateTestValues)
RecombinationQuantiles$V1
RecValues
plot(RecValues,t(SingleTest))
plot(RecValues,SingleTest)
plot(RecValues$V1,SingleTest)
length(SingleTest)
length(SingleTest$V1)
plot(RecValues$V1,SingleTest$V1)
lines(RecValues$V1,SingleTest$V1)
plot(RecValues$V1,SingleTest$V1)
lines(RecValues$V1,SingleTest$V1)
201^
1
201*6
Points
Test
sum(Points-Test)
sum(abs(Points-Test))
head(ConcatenateTestValues)
ConcatenateTestValues[1406,]
1406/6
1206/6
201*6
401*6
nrow(ConcatenateTestValues)
plot(RecValues$V1,ConcatenateTestValues[1201,])
plot(RecValues$V1,ConcatenateTestValues[1201,])
points(RecValues$V1,ConcatenateTestValues[1201,],lty="l")
lines(RecValues$V1,ConcatenateTestValues[1201,],lty="l")
plot(RecValues$V1,ConcatenateTestValues[1201,],type="l")
length(RecValues$V1)
length(ConcatenateTestValues[1201,])
plot(t(RecValues$V1),t(ConcatenateTestValues[1201,]),type="l")
plot(c(1:100),c(201:300),type="l")
t(RecValues$V1)
RecValues$V1[1,]
RecValues$V1
ConcatenateTestValues[1201,]
plot(RecValues$V1,ConcatenateTestValues[1201,],type="l")
newdata <- mtcars[order(mpg),]
NewTable <- cbind(RecValues$V1,ConcatenateTestValues[1201,])
head(NewTable)
newdata <- NewTable[order($V1),]
attach(mtcars)#
#
# sort by mpg#
newdata <- mtcars[order(mpg),]
head(newdata)
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)
]
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")
pdf("../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
#
dev.off()
pdf("../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)
pdf("../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
#
dev.off()
RecombinationQuantiles
RecombinationQuantiles$V1
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,1]#
points(RecombinationQuantiles$V1,Points)
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,1]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
dev.off()
Points
Data[0:20*403 + 201,1]
Data[0:20*403 + 201,]
Data[0:20*403 + 201,1]
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
#
dev.off()
RecombinationQuantiles$V1
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(3,2))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l")#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]))#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[2]))#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[3]))#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[4]))#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[5]))#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[6]))#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = expression(P(L %subset% w[1] | 4Ns = 0, f, D, rho[k])))
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability")#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=2, cex.main=2)#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.75, cex.main=2)#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="l",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2)#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19)#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
pdf("../../../../Figures/SuppFigureSX14_PRLine.pdf",width=14,height = 10)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(2,3))#
#
OrderedVector <- ConcatenateTestValues[1201,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[1]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,2]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1202,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[2]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,3]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1203,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[3]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,4]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1204,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[4]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,5]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
OrderedVector <- ConcatenateTestValues[1205,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[5]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,6]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
OrderedVector <- ConcatenateTestValues[1206,order(RecValues$V1)]#
SortRecValues <- sort(RecValues$V1)#
#
plot(SortRecValues,OrderedVector,type="o",main=expression(w[6]), xlab = "Population scaled recombination rate in the region",  ylab = "Probability", cex.lab=1.7, cex.main=2, pch = 3)#
Points <- Data[0:20*403 + 201,7]#
points(RecombinationQuantiles$V1,Points,pch=19, col = "red")#
abline(v=RecombinationQuantiles$V1[20],lty=2)#
#
dev.off()
