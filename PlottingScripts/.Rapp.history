sd(rbinom(100,98290*2,0.01))
sd(rbinom(100,113126*2,0.01))
mean(rbinom(100,113126*2,0.01))
mean(rbinom(100,98290*2,0.01))
mean(rbinom(100,98290*2,0.01))/98290*2
mean(rbinom(100,98290*2,0.01))/(98290*2)
sd(rbinom(100,98290*2,0.01))/(98290*2)
sd(rbinom(100,113126*2,0.01))/(113126*2)
Values <- rep(100,sd(rbinom(100,113126*2,0.01))/(113126*2))
mean(Values)
Values
sd(rbinom(10000,113126*2,0.01))/(113126*2)
sd(rbinom(10000,98920*2,0.01))/(98920*2)
sd(rbinom(10000,113126*2,0.01))/(113126*2)
0.0002092041*113126
0.0002233182*98920
8.536587/22
12.4719/33
144.89/405
12.4719/33
18.6131/51
19.4193/53
19.7753/55
1960.48/5396
25.78/69
26.9417/73
27.5635/4/3
27.5635/4*3
dbinom(10,100,0.01)
10 es it
100 es el tamano de la poblacion
0.01 x prima
Sum = 0
for i in (1:100){
for (i in 1:100){
Sum = Sum + dbinom(i,100,0.01)
}
Sum
Sum = 0
for (i in 0:100){
Sum = Sum + dbinom(i,100,0.01)
}
Sum
2226 + 785 + 342 + 178 + 114 + 81
2226 + 785 + 342 + 178 + 114 + 81 + 61 + 46 + 35 + 27 + 23 + 19 + 17 + 16 + 15 + 13 + 12 + 11 + 10
698197/5
8117/5
126237/5
198/5
553670/5
19157/5
152/5
321/5
718796/5
323/5
553670/5
100/50000
.002*1226
249/5
12170/5
2420/5
293/5
781587/5
3077/5
266/5
3097/5
218/5
7242*0.0095
7242*0.0105
0,999**10
0.999**10
230/5
3840/5
113100*5
437685/5
72/7242
71/7242
73/7242
1000000/5
90*10
900/60
library(here)#
#
FileNames <- c("../Results/RecMaps/LeftBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/RightBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/LeftBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt", "../Results/RecMaps/RightBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
Table <- as.numeric(Table)#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../Figures/SuppFigure21_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
RecMapNS <- RecMap[1:250000]/(27300)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
RecMapNS <- c(RecMapNS,RecMap[1:250000]/(27300))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()
3077/5
266/5
1.13/1.27
1.27/1.13
247/5
1495/5
90768/5
Data <- read.table("FullTable.txt")#
RecombinationQuantiles <- read.table("QuantilesRecombination.txt")#
#
RecValuesOne <- read.table("../ForwardSims/RecRateSynonymousOnePercentRightNoCpG.txt")#
RecValuesTwo <- read.table("../ForwardSims/RecRateSynonymousOnePercentLeftNoCpG.txt")#
RecValues <- rbind(RecValuesOne,RecValuesTwo)#
#
for (i in 1:546){#
}#
AllCoefficients <- c()#
#
for (i in 1:403){#
    Points <- Data[0:20*403 + i,2]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out1 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,3]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out2 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Points <- Data[0:20*403 + i,4]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out3 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,5]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out4 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,6]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out5 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
    Points <- Data[0:20*403 + i,7]#
    Comparison <- cbind(RecombinationQuantiles,Points)#
    lm.out6 = lm(Points ~ poly(V1,4,raw=TRUE),Comparison)#
#
    Row <- c(lm.out1$coefficients, lm.out2$coefficients, lm.out3$coefficients, lm.out4$coefficients, lm.out5$coefficients, lm.out6$coefficients )#
    AllCoefficients <- rbind(AllCoefficients,Row)#
}#
#
write.table(AllCoefficients, file = "AllRegressionCoefficients.txt",row.names= FALSE,col.names = FALSE)#
#
# par(mfrow=c(2,3))#
#
TotalErrors <- c()#
i <- 1#
ConcatenateTestValues <- c()#
PolyNum <- 5#
for (FourNs in 1:403){#
print (FourNs)#
FirstElement <- c()#
FirstPoint <- c()#
RecTestValue <- 4000#
AllComparisons <- c(t(RecombinationQuantiles))#
for (i in 2:7){#
Points <- Data[0:20*403 + FourNs,i]#
Comparison <- cbind(RecombinationQuantiles,Points)#
AllComparisons <- cbind(AllComparisons, Points)#
lm.out1 = lm(Points ~ poly(V1,PolyNum,raw=TRUE),Comparison)#
# plot(Comparison$V1,Comparison$Points)#
#
Test <- 0#
SingleTest <- 0#
for (Nums in 1:(PolyNum+1)){#
#
CurrentMultiplication <- lm.out1$coefficients[Nums]#
SingleMult <- lm.out1$coefficients[Nums]#
if (Nums > 1){#
    for (MulNum in 1:(Nums - 1) ){#
    CurrentMultiplication <- CurrentMultiplication * RecombinationQuantiles$V1#
    SingleMult <- SingleMult * RecValues#
    }#
}#
Test <- Test + CurrentMultiplication#
SingleTest <- SingleTest + SingleMult#
}#
Error <- sum(abs(Points-Test))#
TotalErrors <- c(TotalErrors,Error)#
#
# Test <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecombinationQuantiles$V1 + lm.out1$coefficients[3]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[4]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1 + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1#
#
# + lm.out1$coefficients[5]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 + lm.out1$coefficients[6]* RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1* RecombinationQuantiles$V1 * RecombinationQuantiles$V1#
# lines(Comparison$V1,Test, col = "red")#
# points(t(RecValues), t(SingleTest), col = "blue")#
# SingleTest <- lm.out1$coefficients[1] + lm.out1$coefficients[2] * RecValues + lm.out1$coefficients[3]* RecValues * RecValues + lm.out1$coefficients[4]* RecValues * RecValues * RecValues + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues#
# + lm.out1$coefficients[5]* RecValues * RecValues * RecValues * RecValues + lm.out1$coefficients[6]* RecValues * RecValues * RecValues * RecValues  * RecValues#
ConcatenateTestValues <- rbind(ConcatenateTestValues, t(SingleTest))#
}#
#
print(Test)#
# FirstElement <- rbind(FirstElement, Test)#
# FirstPoint <- rbind(FirstPoint, Points)#
}#
#
#### AdditionalStep#
#
for (i in 1:284){#
    if (RecValues$V1[i] >= RecombinationQuantiles$V1[20]){#
        ConcatenateTestValues[,i] <- rep.int(1, 403*6)#
        print(i)#
    }#
}#
#
write.table(ConcatenateTestValues, file = "PLGivenSTableWithRecsSyn.txt",row.names= FALSE,col.names = FALSE)#
#
Stuff <- c()#
for (i in 1:403){#
Stuff <- rbind(Stuff,c( ConcatenateTestValues[ i * 6 + 1:6,545] ))#
}#
Stuff#
write.table(Stuff,"AyCaon.txt",sep="\t")
6/100
21*800
1*10 *1 * 1000
100*21
1000*21
( 1 * 10 + $Repetition) * 1000
( 1 * 10 + 1) * 1000
( 2 * 10 + 1) * 1000
( 3 * 10 + 1) * 1000
16331.1/75255
26856.2/75255
100/12
9*5
100/14
5/8
5/78
7264.35*2/3
25000*20
500000
4*1000*1e-8 * 100000
2/3 * 1 / 3
dbinom(1,142,1/142)
dbinom(0,142,1/142)
dbinom(2,142,1/142)
dbinom(3,142,1/142)
dbinom(4,142,1/142)
86270/5
13*6
40*5
200/6
200/60
120000*3/20
10000*20
0.03031/0.01767
0.04735/0.02700
24000*20
480000/12
4.98-2.45
2*6
12
2*7
6*7
33.87/3
19.05/3
1/.003
20 + 3 +1 + 11 + 2 + 5 + 2 + 8 + 6 + 1
20 + 3 +1 + 11 + 2 + 5 + 2 + 8 + 3 + 1 + 6 + 15
1 + 6 + 8 + 2 + 5 + 2 + 11 + 1 + 3 + 20 + 1 + 8 + 3 + 1 + 2 + 6 + 15
1 + 6 + 8 + 2 + 5 + 2 + 11 + 1 + 3 + 20 + 1 + 8 + 3 + 1 + 2 + 6 + 15 + 7
183 -141
0.0001088376*2*4594
200*0.0001088376*2*4594
4594*5
22970/2
10000/60
39440*2
100*10
235*20
360*20
18000*20
22200*20
factorial(40)
1560*300
17121342/46800000
factorial(40)/(factorial(38)*factorial(2))
780*2
1560*2*275
factorial(72)/(factorial(70)*factorial(2))
2556*2
5112*275
13414669/42174000
1200/8
2112*25
2112*25*8
5112*25*8
5112*25
5112*25*8
996650/3067200
328040/1022400
60*5
300/24
989969/3021192
1109778/4217400
1029030/3113400
1109778/4217400
factorial(69)/(factorial(69)*factorial(2))
factorial(69)/(factorial(67)*factorial(2))
2346*2*25
1109778/4217400
1029030/3113400
1403925/4280138
14049643/42771654
1600*8
4200*6
4200*6 + 12
34*8
factorial(72)/(factorial(70)*2) * 2 * 275
factorial(72)/(factorial(70)*2) * 2 * 275 * 100 * 21
2952180000-2952180000
1424204-1405800
factorial(72)/(factorial(70)*2) * 2 * 275 * 100
142442998 - 140580000
factorial(73)/(factorial(71)*2) * 2 * 275 * 100
142442998*21
142442998*41
142387544 - 140580000
142387544*5
1424204-1405800
5*9*5
43+38+34+31+33+34+36+26
1700*4
6800+3000
22970*8
4594*8
pwd
18169*5
18169*8
10000*150
0.0460
22970*8
390*25
390*26
factorial(72)/(factorial(70)*2) * 2 * 275
factorial(73)/(factorial(71)*2) * 2 * 275
factorial(73)/(factorial(71)*2) * 2 * 275 * 100 * 5
factorial(72)/(factorial(70)*2) * 2 * 275 * 500
712784358 - 702900000
712784358 - 722700000
9194/1977933
1993286+441
0.01/25
4/10000
2.31/3.31
275/(275+142)
setwd("~/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts/OldNotUsedScripts/")
library(here)#
library(viridis)#
#
FinalTable <- matrix(,ncol=4,nrow=5)#
rownames(FinalTable) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)", "Inferred P(4Ns | DFE) lower 90% bootstrap", "Inferred P(4Ns | DFE) upper 90% bootstrap")#
colnames(FinalTable) <- c("4Ns < 1","1 < 4Ns < 10", "10 < 4Ns < 50", " 4Ns > 50")#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
for (i in 2:12){#
    UpperBound <- LowerLimit[i] + 3#
    LowerBound <- LowerLimit[(i-1)] + 3 - 1#
    CurrentSum <- sum(DFEPars[104,LowerBound:UpperBound])#
    # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.06#
Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    #    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.2297,2.297,7.297,12.297,17.297,22.97,2297000000))#
Check <- hist(TwoNsValues,breaks=c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75,100000000))#
#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[12] = 0#
    Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
}else{#
    Probs[12] <- 1 - sum (Probs[1:11])#
}#
#
FinalTable[1,1] <- Probs[1]#
FinalTable[1,2] <- sum(Probs[2:3])#
FinalTable[1,3] <- sum(Probs[4:11])#
FinalTable[1,4] <- Probs[12]#
#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
## Other limits#
OtherLimit <- c()#
OtherLimit <- c(OtherLimit,0)#
OtherLimit <- c(OtherLimit,1)#
OtherLimit <- c(OtherLimit,10)#
OtherLimit <- c(OtherLimit,50)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
FinalTable[2,1] <- ProbsBoyko[1]#
FinalTable[2,2] <- ProbsBoyko[2]#
FinalTable[2,3] <- ProbsBoyko[3]#
FinalTable[2,4] <- ProbsBoyko[4]#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
FinalTable[3,1] <- ProbsKim[1]#
FinalTable[3,2] <- ProbsKim[2]#
FinalTable[3,3] <- ProbsKim[3]#
FinalTable[3,4] <- ProbsKim[4]#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
# LowerLimit <- c()#
# LowerLimit <- c(LowerLimit,0)#
# LowerLimit <- c(LowerLimit,2.5)#
# LowerLimit <- c(LowerLimit,5)#
# LowerLimit <- c(LowerLimit,7.5)#
# LowerLimit <- c(LowerLimit,10)#
# LowerLimit <- c(LowerLimit,12.5)#
# LowerLimit <- c(LowerLimit,15)#
# LowerLimit <- c(LowerLimit,17.5)#
# LowerLimit <- c(LowerLimit,20)#
# LowerLimit <- c(LowerLimit,22.5)#
# LowerLimit <- c(LowerLimit,25)#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.5,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
# LowerLimit <- c(LowerLimit,12.297)#
# LowerLimit <- c(LowerLimit,17.297)#
# LowerLimit <- c(LowerLimit,22.97)#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    Alpha = 0.01 * SelectionDFEColumn#
    if (SelectionDFERow == 1){#
        Beta = 0.03#
    }#
    if (SelectionDFERow == 2){#
        Beta = 3#
    }#
    if (SelectionDFERow > 2){#
        Beta = 1500 * (SelectionDFERow - 2)#
    }#
    #    Beta = 30 * (SelectionDFERow)#
    for (i in 2:12){#
        UpperBound <- LowerLimit[i] + 3 - 1#
        LowerBound <- LowerLimit[(i-1)] + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:11] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:11] / Probabilities_At_One_Percent_Given_2Ns[1:11]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[12] = 0#
        Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
    }else{#
        Probs[12] <- 1 - sum (Probs[1:11])#
    }#
    Probs[13] <- sum(Probs[2:3])#
    Probs[14] <- sum(Probs[4:11])#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:14){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05, 0.5 ,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    print (Quantiles[3])#
    if (i == 1){#
    FinalTable[4,1] <- Quantiles[1]#
    FinalTable[5,1] <- Quantiles[3]#
    }#
    if (i == 13){#
        FinalTable[4,2] <- Quantiles[1]#
        FinalTable[5,2] <- Quantiles[3]#
    }#
    if (i == 14){#
        FinalTable[4,3] <- Quantiles[1]#
        FinalTable[5,3] <- Quantiles[3]#
    }#
    if (i == 12){#
        FinalTable[4,4] <- Quantiles[1]#
        FinalTable[5,4] <- Quantiles[3]#
    }#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    #    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
write.table(FinalTable, file = "../Figures/TableS4.txt", sep = "\t")
setwd("~/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/")
library(here)#
library(viridis)#
#
FinalTable <- matrix(,ncol=4,nrow=5)#
rownames(FinalTable) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)", "Inferred P(4Ns | DFE) lower 90% bootstrap", "Inferred P(4Ns | DFE) upper 90% bootstrap")#
colnames(FinalTable) <- c("4Ns < 1","1 < 4Ns < 10", "10 < 4Ns < 50", " 4Ns > 50")#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
P_Allele_Is_2Ns_given_OnePercent <- c()
setwd("~/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts/")
library(here)#
library(viridis)#
#
FinalTable <- matrix(,ncol=4,nrow=5)#
rownames(FinalTable) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)", "Inferred P(4Ns | DFE) lower 90% bootstrap", "Inferred P(4Ns | DFE) upper 90% bootstrap")#
colnames(FinalTable) <- c("4Ns < 1","1 < 4Ns < 10", "10 < 4Ns < 50", " 4Ns > 50")#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
P_Allele_Is_2Ns_given_OnePercent <- c()
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
for (i in 2:12){#
    UpperBound <- LowerLimit[i] + 3#
    LowerBound <- LowerLimit[(i-1)] + 3 - 1#
    CurrentSum <- sum(DFEPars[104,LowerBound:UpperBound])#
    # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.06#
Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    #    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.2297,2.297,7.297,12.297,17.297,22.97,2297000000))#
Check <- hist(TwoNsValues,breaks=c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75,100000000))#
#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[12] = 0#
    Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
}else{#
    Probs[12] <- 1 - sum (Probs[1:11])#
}#
#
FinalTable[1,1] <- Probs[1]#
FinalTable[1,2] <- sum(Probs[2:3])#
FinalTable[1,3] <- sum(Probs[4:11])#
FinalTable[1,4] <- Probs[12]#
#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
## Other limits#
OtherLimit <- c()#
OtherLimit <- c(OtherLimit,0)#
OtherLimit <- c(OtherLimit,1)#
OtherLimit <- c(OtherLimit,10)#
OtherLimit <- c(OtherLimit,50)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
FinalTable[2,1] <- ProbsBoyko[1]#
FinalTable[2,2] <- ProbsBoyko[2]#
FinalTable[2,3] <- ProbsBoyko[3]#
FinalTable[2,4] <- ProbsBoyko[4]#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
FinalTable[3,1] <- ProbsKim[1]#
FinalTable[3,2] <- ProbsKim[2]#
FinalTable[3,3] <- ProbsKim[3]#
FinalTable[3,4] <- ProbsKim[4]#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
# LowerLimit <- c()#
# LowerLimit <- c(LowerLimit,0)#
# LowerLimit <- c(LowerLimit,2.5)#
# LowerLimit <- c(LowerLimit,5)#
# LowerLimit <- c(LowerLimit,7.5)#
# LowerLimit <- c(LowerLimit,10)#
# LowerLimit <- c(LowerLimit,12.5)#
# LowerLimit <- c(LowerLimit,15)#
# LowerLimit <- c(LowerLimit,17.5)#
# LowerLimit <- c(LowerLimit,20)#
# LowerLimit <- c(LowerLimit,22.5)#
# LowerLimit <- c(LowerLimit,25)#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.5,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
# LowerLimit <- c(LowerLimit,12.297)#
# LowerLimit <- c(LowerLimit,17.297)#
# LowerLimit <- c(LowerLimit,22.97)#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    Alpha = 0.01 * SelectionDFEColumn#
    if (SelectionDFERow == 1){#
        Beta = 0.03#
    }#
    if (SelectionDFERow == 2){#
        Beta = 3#
    }#
    if (SelectionDFERow > 2){#
        Beta = 1500 * (SelectionDFERow - 2)#
    }#
    #    Beta = 30 * (SelectionDFERow)#
    for (i in 2:12){#
        UpperBound <- LowerLimit[i] + 3 - 1#
        LowerBound <- LowerLimit[(i-1)] + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:11] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:11] / Probabilities_At_One_Percent_Given_2Ns[1:11]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[12] = 0#
        Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
    }else{#
        Probs[12] <- 1 - sum (Probs[1:11])#
    }#
    Probs[13] <- sum(Probs[2:3])#
    Probs[14] <- sum(Probs[4:11])#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:14){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05, 0.5 ,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    print (Quantiles[3])#
    if (i == 1){#
    FinalTable[4,1] <- Quantiles[1]#
    FinalTable[5,1] <- Quantiles[3]#
    }#
    if (i == 13){#
        FinalTable[4,2] <- Quantiles[1]#
        FinalTable[5,2] <- Quantiles[3]#
    }#
    if (i == 14){#
        FinalTable[4,3] <- Quantiles[1]#
        FinalTable[5,3] <- Quantiles[3]#
    }#
    if (i == 12){#
        FinalTable[4,4] <- Quantiles[1]#
        FinalTable[5,4] <- Quantiles[3]#
    }#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    #    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
write.table(FinalTable, file = "../Figures/TableS4.txt", sep = "\t")
FinalTable
library(here)#
library(viridis)#
#
FinalTable <- matrix(,ncol=4,nrow=5)#
rownames(FinalTable) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)", "Inferred P(4Ns | DFE) lower 90% bootstrap", "Inferred P(4Ns | DFE) upper 90% bootstrap")#
colnames(FinalTable) <- c("4Ns < 1","1 < 4Ns < 10", "10 < 4Ns < 50", " 4Ns > 50")#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
for (i in 2:12){#
    UpperBound <- LowerLimit[i] + 3#
    LowerBound <- LowerLimit[(i-1)] + 3 - 1#
    CurrentSum <- sum(DFEPars[104,LowerBound:UpperBound])#
    # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.06#
Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    #    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.2297,2.297,7.297,12.297,17.297,22.97,2297000000))#
Check <- hist(TwoNsValues,breaks=c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75,100000000))#
#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent
Check
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[12] = 0#
    Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
}else{#
    Probs[12] <- 1 - sum (Probs[1:11])#
}
Probs
Prob_One_Percent
Probabilities_At_One_Percent_Given_2Ns[1:11]
P_Allele_Is_2Ns_given_OnePercent
library(here)#
library(viridis)#
#
FinalTable <- matrix(,ncol=4,nrow=5)#
rownames(FinalTable) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)", "Inferred P(4Ns | DFE) lower 90% bootstrap", "Inferred P(4Ns | DFE) upper 90% bootstrap")#
colnames(FinalTable) <- c("4Ns < 1","1 < 4Ns < 10", "10 < 4Ns < 50", " 4Ns > 50")#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
for (i in 2:12){#
    UpperBound <- LowerLimit[i] + 3 - 1#
    LowerBound <- LowerLimit[(i-1)] + 3#
    CurrentSum <- sum(DFEPars[104,LowerBound:UpperBound])#
    # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.06#
Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    #    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
CurrentLimits <- c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75)#
#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:11){#
    # print (i)#
    Prob <- pgamma(CurrentLimits[i+1],Alpha,scale=Beta) - pgamma(CurrentLimits[i],Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(24.75,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.2297,2.297,7.297,12.297,17.297,22.97,2297000000))#
Check <- hist(TwoNsValues,breaks=c(0, 0.25, 2.25, 4.75, 7.25, 9.75, 12.25, 14.75, 17.25, 19.75, 22.25, 24.75,100000000))#
#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[12] = 0#
    Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
}else{#
    Probs[12] <- 1 - sum (Probs[1:11])#
}#
#
FinalTable[1,1] <- Probs[1]#
FinalTable[1,2] <- sum(Probs[2:3])#
FinalTable[1,3] <- sum(Probs[4:11])#
FinalTable[1,4] <- Probs[12]#
#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
## Other limits#
OtherLimit <- c()#
OtherLimit <- c(OtherLimit,0)#
OtherLimit <- c(OtherLimit,1)#
OtherLimit <- c(OtherLimit,10)#
OtherLimit <- c(OtherLimit,50)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
FinalTable[2,1] <- ProbsBoyko[1]#
FinalTable[2,2] <- ProbsBoyko[2]#
FinalTable[2,3] <- ProbsBoyko[3]#
FinalTable[2,4] <- ProbsBoyko[4]#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 2:4){#
    Prob <- pgamma(OtherLimit[i] *.5,Alpha,scale=Beta) - pgamma(OtherLimit[(i-1)] *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
FinalTable[3,1] <- ProbsKim[1]#
FinalTable[3,2] <- ProbsKim[2]#
FinalTable[3,3] <- ProbsKim[3]#
FinalTable[3,4] <- ProbsKim[4]#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure14_UK10KDFE_StandingNewSOrders.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
# LowerLimit <- c()#
# LowerLimit <- c(LowerLimit,0)#
# LowerLimit <- c(LowerLimit,2.5)#
# LowerLimit <- c(LowerLimit,5)#
# LowerLimit <- c(LowerLimit,7.5)#
# LowerLimit <- c(LowerLimit,10)#
# LowerLimit <- c(LowerLimit,12.5)#
# LowerLimit <- c(LowerLimit,15)#
# LowerLimit <- c(LowerLimit,17.5)#
# LowerLimit <- c(LowerLimit,20)#
# LowerLimit <- c(LowerLimit,22.5)#
# LowerLimit <- c(LowerLimit,25)#
#
# Check <- hist(TwoNsValues,breaks=c(0,0.5,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
#
LowerLimit <- c()#
LowerLimit <- c(LowerLimit,0)#
LowerLimit <- c(LowerLimit,1)#
LowerLimit <- c(LowerLimit,5)#
LowerLimit <- c(LowerLimit,10)#
LowerLimit <- c(LowerLimit,15)#
LowerLimit <- c(LowerLimit,20)#
LowerLimit <- c(LowerLimit,25)#
LowerLimit <- c(LowerLimit,30)#
LowerLimit <- c(LowerLimit,35)#
LowerLimit <- c(LowerLimit,40)#
LowerLimit <- c(LowerLimit,45)#
LowerLimit <- c(LowerLimit,50)#
# LowerLimit <- c(LowerLimit,12.297)#
# LowerLimit <- c(LowerLimit,17.297)#
# LowerLimit <- c(LowerLimit,22.97)#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    Alpha = 0.01 * SelectionDFEColumn#
    if (SelectionDFERow == 1){#
        Beta = 0.03#
    }#
    if (SelectionDFERow == 2){#
        Beta = 3#
    }#
    if (SelectionDFERow > 2){#
        Beta = 1500 * (SelectionDFERow - 2)#
    }#
    #    Beta = 30 * (SelectionDFERow)#
    for (i in 2:12){#
        UpperBound <- LowerLimit[i] + 3 - 1#
        LowerBound <- LowerLimit[(i-1)] + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        # CurrentSum <-  pgamma(LowerLimit[i+1],Alpha,scale=Beta) - pgamma(LowerLimit[i],Alpha,scale=Beta)#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:11] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:11] / Probabilities_At_One_Percent_Given_2Ns[1:11]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[12] = 0#
        Probs[1:11] <- Probs[1:11] / sum(Probs[1:11])#
    }else{#
        Probs[12] <- 1 - sum (Probs[1:11])#
    }#
    Probs[13] <- sum(Probs[2:3])#
    Probs[14] <- sum(Probs[4:11])#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:14){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05, 0.5 ,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    print (Quantiles[3])#
    if (i == 1){#
    FinalTable[4,1] <- Quantiles[1]#
    FinalTable[5,1] <- Quantiles[3]#
    }#
    if (i == 13){#
        FinalTable[4,2] <- Quantiles[1]#
        FinalTable[5,2] <- Quantiles[3]#
    }#
    if (i == 14){#
        FinalTable[4,3] <- Quantiles[1]#
        FinalTable[5,3] <- Quantiles[3]#
    }#
    if (i == 12){#
        FinalTable[4,4] <- Quantiles[1]#
        FinalTable[5,4] <- Quantiles[3]#
    }#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    #    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
write.table(FinalTable, file = "../Figures/TableS4.txt", sep = "\t")
FinalTable
