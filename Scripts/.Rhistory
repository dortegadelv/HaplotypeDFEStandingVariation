234000/300
2200*12
12000/12
500*12
1700*12
1500*12
1600*12
1700*12
1750*12
1650*12
101*12
1900/850
20000000*101
4 * 1000 * 1.2e-8 * 5
0.000000012
468000/600
185527/468000
520954/1331460
1/5000
2000*500
1000000/40
4*10000*.001
3000*20
60000/3600
2000/300
2000/200
10*40
400/60
500/20
25*20
500/60
1000/15
11284/403
1500/150
300/60
1500/140
10*40
400/60
(203+76+203)/3
(203+76+203)/5
(200+200+0+0+(203-76))/5
200*4/5
(43+203+16+23+203)/5
21600/12
337/1800
1800/337
0.1872222/600
0.1872222*600
0.1872222*1800
0.1872222*3000
0.1872222*3600
0.1872222*3300
1800/20
90*20
1800/60
4*1000*500000
4*1000*500000 * 10^-8
4*1000*500000 * 10^-10
dpois(0,0.2)
dpois(0,0.02)
108995/282360
219470/563940
151740/390000
110925/282360
362*2
108634/563940
54952/282360
1800/12
1800*12
21600/48
900*48
480/6
480/60
1000/448
1000/48
0.00000000012
337*1560
337*780
8636364 * 5
50000/20
200*500
200*200
200*400
library(here)#
library(viridis)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2 / 3 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.666666667 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(187.3759681 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(187.3759681 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((187.3759681 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(187.3759681 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()
i^0
( 29277495 * 160 * 0.666666667 * 0.00000006 )
exp(.2)
exp(2)
log(10)
exp(2)
7242 * 0.0095
7242 * 0.0105
470 * 3 + 520
1930 - 1930*.15
2615(6)
2615*6
15690/20
2641
2641/20
0.0302/0.2553
0.2553/0.0302
factorial(72)/(factorial(70)*factorial(2))
2556*2*273
2*1000
10000/500
2000*20
40000/100
400/60
400/24
40000/100
400/24
28/3
40/3
40 -24
12* 3
Prueba <- runif(1000)
mean(Prueba)
Prueba <- runif(3000)
mean(Prueba)
Prueba <- runif(3000)
mean(Prueba)
Checar <- c()
for (i in 1:100){
Prueba <- runif(3000)
Checar <- c(Checar, Prueba)
}
plot(Prueba)
plot(Checar)
for (i in 1:100){
Prueba <- mean(runif(3000))
Checar <- c(Checar, Prueba)
}
Checar <- c()
for (i in 1:100){
Prueba <- mean(runif(3000))
Checar <- c(Checar, Prueba)
}
plot(Checar)
max(Checar) - min(Checar)
mean(Checar)
sd(Checar)
1838/2
549 + 1590
2139 / 2
1069.5 - 549
5.30 + 9
5/(12*3)
30/(25*3)
38*3
114*.4
12*3.5
12*4
3*15
50/12
345000/5400000
12 * 4
31/26
31/(26*3)
45*24
10000/300
40*0.01
.40*0.01
1/(4/10000)
pgeom(0.4072,0.0004)
?pgeom
qgeom(0.4072,0.0004)
qgeom(0.4072,0.00004)
4/10000
qgeom(0.4072,4e-04)
2/5.25
312*3 + 157 * 2
25*40
1000*4
4000*20
25 * 40
1000 * 4
4000 * 20
4000 * 16
32+31+22+26+17+26+33+17+48+42+14+14+19+15+8
500*0.92
4200000*460
2000000000- 4200000*460
68000000
168000000
500*0.08
4200000*40
0.04 / ( 10^-9)
0.04 / ( 4 * 1.31 *10^-9)
0.02 / ( 4 * 1.31 *10^-9)
1,8680.04 / ( 4 * 4.31 *10^-9)
0.04 / ( 4 * 4.31 *10^-9)
0.000000004155
phenotype=10000
1.5 - (phenotype - 10.0)^2 * 0.005
phenotype=100
1.5 - (phenotype - 10.0)^2 * 0.005
phenotype=10
1.5 - (phenotype - 10.0)^2 * 0.005
517/60
setwd("~/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts/")
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
FiveColors <- viridis(5)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
Data <- read.table("../Results/ABCResults/MedianResultsConstantPopSizes.txt")#
#
pdf("../Figures/SuppFigureSX9_ABCInferenceConstantPopSizes.pdf", height= 14)#
par(mfrow=c(2,1))#
boxplot(Data$V1, main = "N")#
abline(h=10000,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGConstantPopSize.txt")#
#
plot(density(PriorData$V1,from=1000,to=20000), col="black", xlab="N", ylab="", main="" ,lty=2,ylim = c(0,0.7e-3), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
PosteriorQuantile <- c()#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGConstantPopSize",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=1000,to=20000), col=FiveColors[i], cex=2, lwd=3)#
#
SortValues <- sort (Posterior100$V1)#
for (j in 1:100){#
    if (SortValues[j] > 10000 ){#
        PosteriorQuantile <- c(PosteriorQuantile, j)#
        break#
    }#
}#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n")#
#
dev.off()#
Data <- read.table("../Results/ABCResults/MedianResultsPopExpansion.txt")#
pdf("../Figures/SuppFigureSX9_ABCInferencePopExpansion.pdf",width=14, height= 14)#
par(mfrow=c(2,3))#
#
boxplot(Data$V1, main = "N in the present epoch", cex.axis = 2, cex.main = 2 )#
abline(h=50000,lty=2)#
boxplot(Data$V2, main =  "N in the past epoch", cex.axis = 2, cex.main = 2)#
abline(h=5000,lty=2)#
boxplot(Data$V3, main = "Time of population size change", cex.axis = 2, cex.main = 2)#
abline(h=100,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGPopExpansion.txt")#
#
plot(density(PriorData$V1,from=10000,to=100000), col="black", xlab="N in the past epoch", ylab="", main="" ,lty=2,ylim = c(0,0.2e-4), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=10000,to=100000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V2,from=1000,to=10000), col="black", xlab="N in the present epoch", ylab="", main="" ,lty=2,ylim = c(0,0.03e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V2,from=1000,to=10000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V3,from=0,to=500), col="black", xlab="Time of population size change", ylab="", main="" ,lty=2,ylim = c(0,2e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V3,from=0,to=500), col=FiveColors[i], cex=2, lwd=3)#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n",cex=1.5)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
FiveColors <- viridis(5)#
#
Data <- read.table("../Results/ABCResults/MedianResultsConstantPopSizes.txt")#
#
pdf("../Figures/SuppFigure7_ABCInferenceConstantPopSizes.pdf", height= 14)#
par(mfrow=c(2,1))#
boxplot(Data$V1, main = "N")#
abline(h=10000,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGConstantPopSize.txt")#
#
plot(density(PriorData$V1,from=1000,to=20000), col="black", xlab="N", ylab="", main="" ,lty=2,ylim = c(0,0.7e-3), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
PosteriorQuantile <- c()#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGConstantPopSize",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=1000,to=20000), col=FiveColors[i], cex=2, lwd=3)#
#
SortValues <- sort (Posterior100$V1)#
for (j in 1:100){#
    if (SortValues[j] > 10000 ){#
        PosteriorQuantile <- c(PosteriorQuantile, j)#
        break#
    }#
}#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n")#
#
dev.off()#
Data <- read.table("../Results/ABCResults/MedianResultsPopExpansion.txt")#
pdf("../Figures/SuppFigure7_ABCInferencePopExpansion.pdf",width=14, height= 14)#
par(mfrow=c(2,3))#
#
boxplot(Data$V1, main = "N in the present epoch", cex.axis = 2, cex.main = 2 )#
abline(h=50000,lty=2)#
boxplot(Data$V2, main =  "N in the past epoch", cex.axis = 2, cex.main = 2)#
abline(h=5000,lty=2)#
boxplot(Data$V3, main = "Time of population size change", cex.axis = 2, cex.main = 2)#
abline(h=100,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGPopExpansion.txt")#
#
plot(density(PriorData$V1,from=10000,to=100000), col="black", xlab="N in the past epoch", ylab="", main="" ,lty=2,ylim = c(0,0.2e-4), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=10000,to=100000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V2,from=1000,to=10000), col="black", xlab="N in the present epoch", ylab="", main="" ,lty=2,ylim = c(0,0.03e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V2,from=1000,to=10000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V3,from=0,to=500), col="black", xlab="Time of population size change", ylab="", main="" ,lty=2,ylim = c(0,2e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V3,from=0,to=500), col=FiveColors[i], cex=2, lwd=3)#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n",cex=1.5)#
dev.off()
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
FiveColors <- viridis(5)#
#
Data <- read.table("../Results/ABCResults/MedianResultsConstantPopSizes.txt")#
#
pdf("../Figures/SuppFigure7_ABCInferenceConstantPopSizes.pdf", height= 14)#
par(mfrow=c(2,1))#
boxplot(Data$V1, main = "N")#
abline(h=10000,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGConstantPopSize.txt")#
#
plot(density(PriorData$V1,from=1000,to=20000), col="black", xlab="N", ylab="", main="" ,lty=2,ylim = c(0,0.7e-3), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
PosteriorQuantile <- c()#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGConstantPopSize",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=1000,to=20000), col=FiveColors[i], cex=2, lwd=3)#
#
SortValues <- sort (Posterior100$V1)#
for (j in 1:100){#
    if (SortValues[j] > 10000 ){#
        PosteriorQuantile <- c(PosteriorQuantile, j)#
        break#
    }#
}#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n")#
#
dev.off()#
Data <- read.table("../Results/ABCResults/MedianResultsPopExpansion.txt")#
pdf("../Figures/SuppFigure8_ABCInferencePopExpansion.pdf",width=14, height= 14)#
par(mfrow=c(2,3))#
#
boxplot(Data$V1, main = "N in the present epoch", cex.axis = 2, cex.main = 2 )#
abline(h=50000,lty=2)#
boxplot(Data$V2, main =  "N in the past epoch", cex.axis = 2, cex.main = 2)#
abline(h=5000,lty=2)#
boxplot(Data$V3, main = "Time of population size change", cex.axis = 2, cex.main = 2)#
abline(h=100,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGPopExpansion.txt")#
#
plot(density(PriorData$V1,from=10000,to=100000), col="black", xlab="N in the past epoch", ylab="", main="" ,lty=2,ylim = c(0,0.2e-4), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=10000,to=100000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V2,from=1000,to=10000), col="black", xlab="N in the present epoch", ylab="", main="" ,lty=2,ylim = c(0,0.03e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V2,from=1000,to=10000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V3,from=0,to=500), col="black", xlab="Time of population size change", ylab="", main="" ,lty=2,ylim = c(0,2e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V3,from=0,to=500), col=FiveColors[i], cex=2, lwd=3)#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n",cex=1.5)#
dev.off()
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure9_AncStateMisspecification.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(abs(Selection4Ns_0$V1-200), abs(Selection4Ns_50$V1-200), abs(Selection4Ns_100$V1-200), names=c("0","50","100"), ylab="Estimated |4Ns| values", xlab="Real 4Ns values", main="Inference of selection with ancestral state\nmisspecification in a constant population size scenario", cex.axis=1.25, cex.lab=2, cex.main=1.45, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified0_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of selection with ancestral state\nmisspecification in a population expansion scenario",cex.axis=1.25,cex.lab=2,cex.main=1.45,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
Medians <- c()#
#
pdf ("../Figures/SuppFigure10_MisinferenceWithStatisticalPhasing.pdf", width = 8)#
par(mfrow = c(1,2))#
par(mar = c(4, 5, 5, 2))#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( abs(BiasedEstimators[1:100] - 200) - abs(UnbiasedEstimators[1:100]- 200), abs(BiasedEstimators[101:200] - 200) - abs(UnbiasedEstimators[101:200] - 200) , abs(BiasedEstimators[201:300] - 200) - abs(UnbiasedEstimators[201:300] - 200), abs(BiasedEstimators[301:400] - 200) - abs(UnbiasedEstimators[301:400] - 200), abs(BiasedEstimators[401:500] - 200) - abs(UnbiasedEstimators[401:500] - 200) , ylim = c(-400,400), xlab = "4Ns", ylab = "| Estimated 4Ns on haplotype data | - | Estimated 4Ns on statistically phased data |", main = "Constant population size", names = c(0, 50, 100, -50, 100) )#
#
abline (h= 0 , lty=2)#
#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( BiasedEstimators[1:100] - UnbiasedEstimators[1:100], BiasedEstimators[101:200] - UnbiasedEstimators[101:200] , BiasedEstimators[201:300] - UnbiasedEstimators[201:300] , BiasedEstimators[301:400] - UnbiasedEstimators[301:400] , BiasedEstimators[401:500] - UnbiasedEstimators[401:500] , ylim = c(-400,400), xlab = "4Ns", ylab = "Estimated 4Ns on haplotype data - Estimated 4Ns on statistically phased data", main = "Population expansion", names = c(0, 50, 100, -50, 100))#
#
abline (h= 0 , lty=2)#
#
dev.off()
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure12_AncStateMisspecification.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(abs(Selection4Ns_0$V1-200), abs(Selection4Ns_50$V1-200), abs(Selection4Ns_100$V1-200), names=c("0","50","100"), ylab="Estimated |4Ns| values", xlab="Real 4Ns values", main="Inference of selection with ancestral state\nmisspecification in a constant population size scenario", cex.axis=1.25, cex.lab=2, cex.main=1.45, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified0_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of selection with ancestral state\nmisspecification in a population expansion scenario",cex.axis=1.25,cex.lab=2,cex.main=1.45,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure12_AncStateMisspecification.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(abs(Selection4Ns_0$V1-200), abs(Selection4Ns_50$V1-200), abs(Selection4Ns_100$V1-200), names=c("0","50","100"), ylab="Estimated |4Ns| values", xlab="Real 4Ns values", main="Inference of selection with ancestral state\nmisspecification in a constant population size scenario", cex.axis=1.25, cex.lab=2, cex.main=1.45, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified0_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of selection with ancestral state\nmisspecification in a population expansion scenario",cex.axis=1.25,cex.lab=2,cex.main=1.45,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure9_AncStateMisspecification.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(abs(Selection4Ns_0$V1-200), abs(Selection4Ns_50$V1-200), abs(Selection4Ns_100$V1-200), names=c("0","50","100"), ylab="Estimated |4Ns| values", xlab="Real 4Ns values", main="Inference of selection with ancestral state\nmisspecification in a constant population size scenario", cex.axis=1.25, cex.lab=2, cex.main=1.45, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified0_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of selection with ancestral state\nmisspecification in a population expansion scenario",cex.axis=1.25,cex.lab=2,cex.main=1.45,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
Plot <- paste("../Figures/","SuppFigure10_ProbLInferenceNoSingletons.pdf",sep="")#
ColorViridis <- viridis(5)#
#
pdf(Plot,width=12,height=12/2)#
par(mfrow=c(1,2))#
par(mar=c(5,5,5,2) + 0.1)#
# Image <- readJPEG("PotentialPaperFigures/HaplotypeDivision/Slide1.jpg")#
#plot(0.5,0.5,xaxt="n",yaxt="n",xlim=c(0,1.333333),ylim=c(0,1),main="A) Windows of pairwise haplotypic\n identity by state lengths (L)",cex.main=2)#
#rasterImage(Image,0.0,0.0,1.333333,1,bty="n")#
#
#LLSurface <- read.table("ResultsSelectionInferred/ExampleLLSurface.txt")#
#plot(1:401,LLSurface[1,],type="l",lwd=6,ylab="Log-likelihood",xlab="4Ns",cex.lab=2,cex.axis=2,xaxt="n",main="C) Example Log-Likelihood plot",cex.main=2)#
#axis(1,at=c(1,101,201,301,401),labels=c(-200,-100,0,100,200),cex.lab=2,cex.axis=2)#
#arrows(201,-15761.78,201,-15666.78)#
#legend(131,-15755.78,c("MLE"),bty="n",cex=2)#
#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="A) Inference of selection in terms of |4Ns| values\n in a constant population size scenario",cex.axis=1.7,cex.lab=2,cex.main=1.25,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton-100_N10000.txt")#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="B) Inference of selection in terms of 4Ns values\n in a population expansion scenario",cex.axis=1.7,cex.lab=2,cex.main=1.25,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
Medians <- c()#
#
pdf ("../Figures/SuppFigure12_MisinferenceWithStatisticalPhasing.pdf", width = 8)#
par(mfrow = c(1,2))#
par(mar = c(4, 5, 5, 2))#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( abs(BiasedEstimators[1:100] - 200) - abs(UnbiasedEstimators[1:100]- 200), abs(BiasedEstimators[101:200] - 200) - abs(UnbiasedEstimators[101:200] - 200) , abs(BiasedEstimators[201:300] - 200) - abs(UnbiasedEstimators[201:300] - 200), abs(BiasedEstimators[301:400] - 200) - abs(UnbiasedEstimators[301:400] - 200), abs(BiasedEstimators[401:500] - 200) - abs(UnbiasedEstimators[401:500] - 200) , ylim = c(-400,400), xlab = "4Ns", ylab = "| Estimated 4Ns on haplotype data | - | Estimated 4Ns on statistically phased data |", main = "Constant population size", names = c(0, 50, 100, -50, 100) )#
#
abline (h= 0 , lty=2)#
#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( BiasedEstimators[1:100] - UnbiasedEstimators[1:100], BiasedEstimators[101:200] - UnbiasedEstimators[101:200] , BiasedEstimators[201:300] - UnbiasedEstimators[201:300] , BiasedEstimators[301:400] - UnbiasedEstimators[301:400] , BiasedEstimators[401:500] - UnbiasedEstimators[401:500] , ylim = c(-400,400), xlab = "4Ns", ylab = "Estimated 4Ns on haplotype data - Estimated 4Ns on statistically phased data", main = "Population expansion", names = c(0, 50, 100, -50, 100))#
#
abline (h= 0 , lty=2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
Medians <- c()#
pdf ("../Figures/SuppFigure11_PhasingEffectOnL.pdf", height = 10)#
par(mfrow = c(5,2))#
par(mar = c(4, 7, 5, 2))#
for (j in 1:5){#
    for (i in 1:2){#
    File <- paste("../Results/PhaseLDistribution/LDistributionStatPhased",DemographicScenarios[i],"_",FourNs[j],".txt", sep = "")#
LDataFile <- read.table(File)#
Title <- paste (DemographicScenariosTitle[i]," ",FourNsTitle[j] , sep = "")#
Medians <- c(Medians,median((LDataFile$V7 - LDataFile$V1)/1560),median((LDataFile$V8 - LDataFile$V2)/1560), median((LDataFile$V9 - LDataFile$V3)/1560), median((LDataFile$V10 - LDataFile$V4)/1560), median((LDataFile$V11 - LDataFile$V5)/1560), median((LDataFile$V12 - LDataFile$V6)/1560))#
#
CurrentMedians <- c(median((LDataFile$V7 - LDataFile$V1)/1560),median((LDataFile$V8 - LDataFile$V2)/1560), median((LDataFile$V9 - LDataFile$V3)/1560), median((LDataFile$V10 - LDataFile$V4)/1560), median((LDataFile$V11 - LDataFile$V5)/1560), median((LDataFile$V12 - LDataFile$V6)/1560))#
#
boxplot((LDataFile$V7 - LDataFile$V1)/1560, (LDataFile$V8 - LDataFile$V2)/1560, (LDataFile$V9 - LDataFile$V3)/1560, (LDataFile$V10 - LDataFile$V4)/1560, (LDataFile$V11 - LDataFile$V5)/1560, (LDataFile$V12 - LDataFile$V6)/1560, xaxt = "n",ylab = expression(atop("Mean(P(Real " * L %in% w[i] * ") -", "P(Statistically Phased " * L %in% w[i] * ")")) , xlab = "L", cex.lab = 1.0, ylim = c(-0.1,0.12), main = Title)#
## expression("Mean(P(Real L " * %in% * "wi) - P(Statistically Phased L " * %in% * "wi")#
CurrentMedians <- round(CurrentMedians,3)#
text(1,0.1,labels=CurrentMedians[1])#
text(2,0.1,labels=CurrentMedians[2])#
text(3,0.1,labels=CurrentMedians[3])#
text(4,0.1,labels=CurrentMedians[4])#
text(5,0.1,labels=CurrentMedians[5])#
text(6,0.1,labels=CurrentMedians[6])#
#
abline(h=0.0, lty = 2)#
axis(1, at=c(1, 2, 3, 4, 5, 6), labels=c(expression(w[1]), expression(w[2]), expression(w[3]), expression(w[4]), expression(w[5]), expression(w[6])))#
}#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, 50, 100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Constant Population Size 4Ns = 0","Constant Population Size 4Ns = 50","Constant Population Size 4Ns = 100","Constant Population Size 4Ns = -50","Constant Population Size 4Ns = -100")#
#
ViridisColors <- viridis(5)#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure13_MutRecMisinferenceConstantPopSize.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(abs(DataMatrix[,1] - 200) , abs(DataMatrix[,2] - 200 ), abs(DataMatrix[,3] - 200) , abs( DataMatrix[,4] - 200 ) , abs( DataMatrix[,5] - 200 ), ylab = "| 4Ns |", names = c("9e-9","1.14e-8","1.2e-8","1.26e-8","1.5e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base mutation rate " * mu * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
Magnitude <- c( "NotSoSmallRec", "FivePercentSmallRec", "FivePercentBigRec", "NotSoBigRec")#
Titles <- c("Constant Population Size 4Ns = 0","Constant Population Size 4Ns = 50","Constant Population Size 4Ns = 100","Constant Population Size 4Ns = -50","Constant Population Size 4Ns = -100")#
#
for (i in 1:1){#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(abs(DataMatrix[,1] - 200) , abs(DataMatrix[,2] - 200 ), abs(DataMatrix[,3] - 200) , abs( DataMatrix[,4] - 200 ) , abs( DataMatrix[,5] - 200 ), ylab = "| 4Ns |", names = c("7.5e-9","9.5e-9","1.0e-8","1.05e-8","1.25e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base recombination rate " * rho * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
dev.off()#
#########################################################################################
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, -50, -100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Population expansion 4Ns = 0","Population expansion 4Ns = 50","Population expansion 4Ns = 100","Population expansion 4Ns = -50","Population expansion 4Ns = -100")#
#
ViridisColors <- viridis(5)#
#
for (i in 2:2){#
    pdf ("../Figures/SuppFigure14_MutRecMisinferencePopExpansion.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot((DataMatrix[,1] - 200) , (DataMatrix[,2] - 200 ), (DataMatrix[,3] - 200) , ( DataMatrix[,4] - 200 ) , ( DataMatrix[,5] - 200 ), ylab = "4Ns", names = c("9e-9","1.14e-8","1.2e-8","1.26e-8","1.5e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base mutation rate " * mu * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
Magnitude <- c( "NotSoSmallRec", "FivePercentSmallRec", "FivePercentBigRec", "NotSoBigRec")#
Titles <- c("Population expansion 4Ns = 0","Population expansion 4Ns = 50","Population expansion 4Ns = 100","Population expansion 4Ns = -50","Population expansion 4Ns = -100")#
#
for (i in 2:2){#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot((DataMatrix[,1] - 200) , (DataMatrix[,2] - 200 ), (DataMatrix[,3] - 200) , ( DataMatrix[,4] - 200 ) , ( DataMatrix[,5] - 200 ), ylab = "4Ns", names = c("7.5e-9","9.5e-9","1.0e-8","1.05e-8","1.25e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base recombination rate " * rho * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
dev.off()
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_10.txt")#
Plot <- paste("../Figures/SuppFigure15_PopExpansionSelInference.pdf",sep="")#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates", main= "4Ns = 0", cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median,lty=3, col = "red")#
### Figure 3#
#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_10.txt")#
#
Plot <- paste("../Figures/SuppFigure15_PopExpansionSelInference4Ns50.pdf",sep="")#
#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates", main="4Ns = -50",cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median,lty=3, col = "red")#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_10.txt")#
Plot <- paste("../Figures/SuppFigure15_PopExpansionSelInference4Ns100.pdf",sep="")#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates",main="4Ns = -100",cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median, pch = 4, col = "red")#
#
dev.off()
library(here)#
library(viridis)#
### Calculation of means#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
MeanConstantBoyko <- mean(Data$V2[1:50000]*926*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
MeanConstantMouse <- mean(Data$V2[1:50000]*1034*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
MeanPopExpansionBoyko <- mean(Data$V2[1:50000]*1146*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
MeanPopExpansionMouse <- mean(Data$V2[1:50000]*20000)#
#
### Reading DFE parameters and 4Ns values from the truncated gamma distributions used#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i] <- 0#
#
for (j in 3:203){#
FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[i,j]#
}#
}#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
# FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i+nrow(DFEPars)] <- 0#
#
for (j in 3:203){#
FourNsMeans[i+nrow(DFEPars)] <- FourNsMeans[i+nrow(DFEPars)] + (j-3)* DFEPars[i,j]#
}#
}#
#
pdf("../Figures/SuppFigure16_MLEDFEHumanMouse2DemScenarios.pdf",width=7*2,height=7*2/4)#
par(mfrow = c(1,4),mar=c(5,5,5,5))#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="A) Simulation Replicate 1",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis = 1.5)#
#points(50.454203927295,0.184753036884482,col="red",pch=19,lwd=3)#
# lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
# legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
legend("topright",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanConstantBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="B) Simulation Replicate 2",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
#points(50.8608219789938,0.109621224838877,col="red",pch=19,lwd=3)#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
# lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("topright",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanConstantMouse/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="C) Simulation Replicate 3",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
#points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
#lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
#lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="D) Simulation Replicate 4",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
#points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
#lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
#lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
dev.off()#
#
pdf("../Figures/SuppFigure16_MLEDFEHumanMouse2DemScenarios_10Sims.pdf",width=7*2,height=14*2/4)#
par(mfrow = c(2,4),mar=c(5,5,5,5))#
#
Vector <- c("A)", "B)", "C)", "D)", "E)", "F)", "G)", "H)", "I)", "J)")#
for (k in 5:10){#
    File = paste ("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep = "")#
    MLE <- read.table(File)#
#
    Row <- c()#
    Column <- c()#
#
    for (i in 1:nrow(MLE)){#
        if (MLE$V1[i] < 2100 ){#
    CurRow <- ( MLE$V1[i] ) %% 70 + 1#
    CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
    Row <- c(Row, CurRow)#
    Column <- c(Column, CurColumn)#
        }else{#
    CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
    CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
    Row <- c(Row, CurRow)#
    Column <- c(Column, CurColumn)#
        }#
    }#
    BestFit <- c()#
    Differences <- c()#
    for (i in 1:70){#
    BestFit[i] <- 1#
    for (j in 1:30){#
        DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
        DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
        Differences <- c(Differences,DifferenceOne)#
        if (DifferenceOne < DifferenceTwo){#
            BestFit[i] <- j#
        }#
    }#
    }#
#
    for (i in 1:70){#
    BestFit[i+70] <- 1#
    for (j in 1:30){#
        DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
        DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
        Differences <- c(Differences,DifferenceOne)#
        if (DifferenceOne < DifferenceTwo){#
            BestFit[i+70] <- j#
        }#
    }#
    }#
    Test <- as.data.frame(table(MLE))#
    UniqueNumbers <- sort(unique(Test$Freq))#
    ColorViridis <- viridis(length(UniqueNumbers))#
#
    ColorsToPrint <- c()#
    for (i in 1:nrow(MLE)){#
        CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
        Index <- match(CurrentColor,UniqueNumbers)#
        ColorsToPrint <- c(ColorsToPrint, Index)#
    }#
#
    TitleVector <- paste (Vector[k], " Simulation Replicate ", k ,  sep="")#
    FileName <- paste("D) Simulation Replicate 4", sep = "")#
    plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"), main=TitleVector, col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
    axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
    #points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
    #lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
    #lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
    legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
    abline(v=350, lty= 3)#
    #lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
}#
#
dev.off()
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2.31 / 3.31 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.6978852 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(196.1504 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure17_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="B) Simulation Replicate 2", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((196.1504 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="C) Simulation Replicate 3", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="D) Simulation Replicate 4", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()#
#
AncPopSize <- c(784,784,784,784,1443,1166,1110,760,959,739)#
SumValuesOne <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(1443 * 7215 + 20341 * 24),(1116 * 5830 + 23992 * 27),(1110 * 5550 + 22775 * 24),(760 * 3800 + 28031 * 26),(959 * 4795 + 23563 * 27),(739 * 3695 + 27679 * 27))#
MutNumber <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(10000 * 7215 + 10000 * 24 * 20341/1443),(10000 * 5830 + 10000 * 27 * 23992/1166),(10000 * 5550 + 10000 * 24 * 22775 / 1110),(10000 * 3800 + 10000 * 26 * 28031/760),(10000 * 4795 + 10000 * 27 * 23563/959),(10000 * 3695 + 10000 * 27 * 27679/739))#
#
PlotTitle <- c("E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "F) Simulation Replicate 6", "G) Simulation Replicate 7", "H) Simulation Replicate 8", "I) Simulation Replicate 9", "J) Simulation Replicate 10")#
#
pdf("../Figures/SuppFigure17_DFEf_toDFESLiMThreeBins_10Sims.pdf",width=10,height = 14 + 14 * 2/6)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(6,1))#
for (k in 5:10){#
#
    ColorViridis <- viridis(3)#
    ViridisColors <- viridis(3)#
#
    Alpha = 0.184#
    Beta = 319.8626 * 10 * (AncPopSize[k]/2)/10000 * 5#
#
    P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
        P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
        # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
    File <- paste("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_",k,".txt", sep ="")#
    SelectionCoefficientListBoyko <- read.table(File)#
#
    ### P (allele is at 1%)#
    ## Ns sites = 3350065#
    ## Reps = 160#
    ## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
    P_allele_at_OnePercent = 5328/(196.1504 * SumValuesOne[k]) # Original#
    Alpha = 0.11#
    Beta = 8636364 * 0.01 * (AncPopSize[k]/2)/10000 * 5#
#
    # P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
        #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * MutNumber[k])) # Original Test#
        #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
#
    SelectionCoefficientList <- read.table(File)#
#
    TwoNsValues <- SelectionCoefficientList$V2*AncPopSize[k]#
#
    Breaks <- c(0,2.5*0:200 + 2.25)#
#
    Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
    Counts_At_OnePercent_Given2Ns <- Check$counts#
#
    Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
    DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
    DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
    DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
    File <- paste("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep ="")#
    MLE <- read.table(File)#
#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
#
    DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    # MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
    FourNs <- SelectionCoefficientListBoyko$V2 * AncPopSize[k] * 2#
#
    for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- MLE$V1[j] + 1#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }else {#
        ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
        ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
         MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
         DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
    }#
    GammaLimit <- Divisions * 2.5#
    LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * MutNumber[k]))#
#
    Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
    for (j in 1:100){#
        Row <- ( MLE$V1 ) %% 70 + 1#
        Column <- floor(( MLE$V1 ) / 70) + 1#
        DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
        P_Allele_Is_2Ns_given_OnePercent <- c()#
        for (i in 1:Divisions){#
            UpperBound <- i*5 + 2#
            LowerBound <- (i-1)*5 + 3#
            CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
            P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
        }#
        OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
        OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
        OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
        if (j==1){#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
            OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        }else{#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
            OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
        }#
    }#
#
    Labels <- c()#
    for (i in 1:20){#
        Label <- paste((i-1)*5,"-",i*5,sep="")#
        Labels <- c(Labels,Label)#
    }#
    Label <- paste(">","150",sep="")#
    Labels <- c("0-5","50-55","100-150",Label)#
#
    # pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
    # par(mar=c(4.1,5.1,2.6,2.1))#
    # par(mfrow = c(4,1))#
    PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
    # plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
        #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSums <- c()#
    for (i in 1:100){#
        CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
    }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartTwo <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
    # lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
        #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    # CurrentSums <- c()#
    # for (i in 1:100){#
    #     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
    # }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartThree <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
        #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSumsOnePercent <- c()#
    SumP_2Ns_OnePercent <- c()#
    for (i in 1:100){#
        CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
        SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
    }#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    # segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartFour <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
    # for (i in 1:30){#
    #    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
    # }#
    # segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
    counts <- table(mtcars$vs, mtcars$gear)#
    counts <- rbind(counts,c(1,2,3))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # for (i in 4:20){#
    # counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
    # }#
#
    # counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
    AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
    counts[1,1] <- PartOne[1]#
    counts[1,2] <- sum(PartOne[2:20])#
    counts[1,3] <- 1-sum(PartOne[1:20])#
    counts[2,1] <- PartTwo[1]#
    counts[2,2] <- PartTwo[2]#
    counts[2,3] <- 1-sum(PartTwo[1:2])#
    counts[3,1] <- PartFour[1]#
    counts[3,2] <- PartFour[2]#
    counts[3,3] <- 1-sum(PartFour[1:2])#
    BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
    colnames(counts) <- c("0-5", "5-100", ">100")#
    rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
    barplot(counts, main=PlotTitle[k], ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
    legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
    # axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
    Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
    Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
    Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
    Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
    # legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
            points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
    points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSums)#
#
    points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
    FinalMedian <- c()#
    TotalDifference <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
    }#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
    points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSumsOnePercent)#
#
    points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
}#
#
dev.off()#
#
############################################################################### Full data  ##################################################################################
#
TotalDifferences <- matrix(nrow=1000,ncol=21)#
for (i in 1:1000){#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
        j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,2] <- sum(DifferenceMatrix[i,2:20]) - sum(BoykoParams[Integer,2])#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,3] <- DifferenceMatrix[i,21] - BoykoParams[Integer,3]#
}#
#
expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")")#
#
pdf("../Figures/SuppFigureS18_BeanplotDifferencesThreeBins.pdf",width=10,height = 14)#
par(mar=c(5.1,6.1,2.6,2.1))#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
dev.off()#
#
Vector <- seq(from = 1, to = 100, by = 1)#
#
for (i in 1:1000){#
    Vector[i] <- sum(TotalDifferences[i,2:20])#
}
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2.31 / 3.31 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.6978852 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(196.1504 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure17_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="B) Simulation Replicate 2", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((196.1504 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="C) Simulation Replicate 3", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="D) Simulation Replicate 4", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()#
#
AncPopSize <- c(784,784,784,784,1443,1166,1110,760,959,739)#
SumValuesOne <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(1443 * 7215 + 20341 * 24),(1116 * 5830 + 23992 * 27),(1110 * 5550 + 22775 * 24),(760 * 3800 + 28031 * 26),(959 * 4795 + 23563 * 27),(739 * 3695 + 27679 * 27))#
MutNumber <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(10000 * 7215 + 10000 * 24 * 20341/1443),(10000 * 5830 + 10000 * 27 * 23992/1166),(10000 * 5550 + 10000 * 24 * 22775 / 1110),(10000 * 3800 + 10000 * 26 * 28031/760),(10000 * 4795 + 10000 * 27 * 23563/959),(10000 * 3695 + 10000 * 27 * 27679/739))#
#
PlotTitle <- c("E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "F) Simulation Replicate 6", "G) Simulation Replicate 7", "H) Simulation Replicate 8", "I) Simulation Replicate 9", "J) Simulation Replicate 10")#
#
pdf("../Figures/SuppFigure17_DFEf_toDFESLiMThreeBins_10Sims.pdf",width=10,height = 14 + 14 * 2/6)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(6,1))#
for (k in 5:10){#
#
    ColorViridis <- viridis(3)#
    ViridisColors <- viridis(3)#
#
    Alpha = 0.184#
    Beta = 319.8626 * 10 * (AncPopSize[k]/2)/10000 * 5#
#
    P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
        P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
        # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
    File <- paste("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_",k,".txt", sep ="")#
    SelectionCoefficientListBoyko <- read.table(File)#
#
    ### P (allele is at 1%)#
    ## Ns sites = 3350065#
    ## Reps = 160#
    ## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
    P_allele_at_OnePercent = 5328/(196.1504 * SumValuesOne[k]) # Original#
    Alpha = 0.11#
    Beta = 8636364 * 0.01 * (AncPopSize[k]/2)/10000 * 5#
#
    # P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
        #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * MutNumber[k])) # Original Test#
        #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
#
    SelectionCoefficientList <- read.table(File)#
#
    TwoNsValues <- SelectionCoefficientList$V2*AncPopSize[k]#
#
    Breaks <- c(0,2.5*0:200 + 2.25)#
#
    Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
    Counts_At_OnePercent_Given2Ns <- Check$counts#
#
    Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
    DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
    DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
    DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
    File <- paste("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep ="")#
    MLE <- read.table(File)#
#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
#
    DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    # MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
    FourNs <- SelectionCoefficientListBoyko$V2 * AncPopSize[k] * 2#
#
    for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- MLE$V1[j] + 1#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }else {#
        ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
        ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
         MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
         DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
    }#
    GammaLimit <- Divisions * 2.5#
    LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * MutNumber[k]))#
#
    Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
    for (j in 1:100){#
        Row <- ( MLE$V1 ) %% 70 + 1#
        Column <- floor(( MLE$V1 ) / 70) + 1#
        DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
        P_Allele_Is_2Ns_given_OnePercent <- c()#
        for (i in 1:Divisions){#
            UpperBound <- i*5 + 2#
            LowerBound <- (i-1)*5 + 3#
            CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
            P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
        }#
        OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
        OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
        OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
        if (j==1){#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
            OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        }else{#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
            OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
        }#
    }#
#
    Labels <- c()#
    for (i in 1:20){#
        Label <- paste((i-1)*5,"-",i*5,sep="")#
        Labels <- c(Labels,Label)#
    }#
    Label <- paste(">","150",sep="")#
    Labels <- c("0-5","50-55","100-150",Label)#
#
    # pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
    # par(mar=c(4.1,5.1,2.6,2.1))#
    # par(mfrow = c(4,1))#
    PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
    # plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
        #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSums <- c()#
    for (i in 1:100){#
        CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
    }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartTwo <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
    # lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
        #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    # CurrentSums <- c()#
    # for (i in 1:100){#
    #     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
    # }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartThree <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
        #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSumsOnePercent <- c()#
    SumP_2Ns_OnePercent <- c()#
    for (i in 1:100){#
        CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
        SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
    }#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    # segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartFour <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
    # for (i in 1:30){#
    #    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
    # }#
    # segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
    counts <- table(mtcars$vs, mtcars$gear)#
    counts <- rbind(counts,c(1,2,3))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # for (i in 4:20){#
    # counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
    # }#
#
    # counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
    AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
    counts[1,1] <- PartOne[1]#
    counts[1,2] <- sum(PartOne[2:20])#
    counts[1,3] <- 1-sum(PartOne[1:20])#
    counts[2,1] <- PartTwo[1]#
    counts[2,2] <- PartTwo[2]#
    counts[2,3] <- 1-sum(PartTwo[1:2])#
    counts[3,1] <- PartFour[1]#
    counts[3,2] <- PartFour[2]#
    counts[3,3] <- 1-sum(PartFour[1:2])#
    BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
    colnames(counts) <- c("0-5", "5-100", ">100")#
    rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
    barplot(counts, main=PlotTitle[k], ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
    legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
    # axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
    Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
    Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
    Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
    Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
    # legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
            points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
    points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSums)#
#
    points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
    FinalMedian <- c()#
    TotalDifference <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
    }#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
    points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSumsOnePercent)#
#
    points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
}#
#
dev.off()#
#
############################################################################### Full data  ##################################################################################
#
TotalDifferences <- matrix(nrow=1000,ncol=21)#
for (i in 1:1000){#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
        j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,2] <- sum(DifferenceMatrix[i,2:20]) - sum(BoykoParams[Integer,2])#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,3] <- DifferenceMatrix[i,21] - BoykoParams[Integer,3]#
}#
#
expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")")#
#
pdf("../Figures/SuppFigure18_BeanplotDifferencesThreeBins.pdf",width=10,height = 14)#
par(mar=c(5.1,6.1,2.6,2.1))#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
dev.off()#
#
Vector <- seq(from = 1, to = 100, by = 1)#
#
for (i in 1:1000){#
    Vector[i] <- sum(TotalDifferences[i,2:20])#
}
### One Percenters#
#
library(here)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatistics.txt")#
#
Posterior100 <- read.table("../Results/ABCResults/Best100.txt")#
#
pdf("../Figures/SuppFigure19_DemModelInference.pdf",height=35/6,width=7*2.2/4)#
#
par(mfrow=c(5,2),mar=c(2.1,1.1,1.1,2.1),mgp=c(3,0,0))#
#
plot(density(Posterior100$V4,from=0,to=1449),col="blue",xlab="",ylab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V4,from=0,to=1449))#
legend("topright",c(expression(T[1]),"median = 303"),bty="n")#
title(xlab="Prior ~ unif (0, 1449)", line=0)#
#axis(1,"Prior ~ unif(0, 1449)")#
plot(density(Posterior100$V2,from=1000,to=1000000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V2,from=1000,to=1000000))#
legend("bottomright",c(expression(N[1]),"median = 551894"),bty="n")#
title(xlab="Prior ~ unif (1000, 1000000)", line=0)#
plot(density(Posterior100$V3,from=500,to=50000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V3,from=500,to=50000))#
legend("topright",c(expression(N[2]),"median = 6685"),bty="n")#
title(xlab="Prior ~ unif (500, 50000)", line=0)#
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10), axes=FALSE)#
legend("center",c("Prior","Posterior"),pch=19,col=c("black","blue"),bty="n")#
dev.off()#
#
####################### Not CpG#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpG.txt")#
#
Posterior100 <- read.table("../Results/ABCResults/Best100NotCpG.txt")#
#
pdf("../Figures/SuppFigure19_DemModelInferenceNotCpG.pdf",height=35/6,width=7*2.2/4)#
#
par(mfrow=c(5,2),mar=c(2.1,1.1,1.1,2.1),mgp=c(3,0,0))#
#
plot(density(Posterior100$V4,from=0,to=1449),col="blue",xlab="",ylab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V4,from=0,to=1449))#
legend("topright",c(expression(T[1]),"median = 228"),bty="n")#
title(xlab="Prior ~ unif (0, 1449)", line=0)#
#axis(1,"Prior ~ unif(0, 1449)")#
plot(density(Posterior100$V2,from=1000,to=1000000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V2,from=1000,to=1000000))#
legend("bottomright",c(expression(N[1]),"median = 565631"),bty="n")#
title(xlab="Prior ~ unif (1000, 1000000)", line=0)#
plot(density(Posterior100$V3,from=500,to=50000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V3,from=500,to=50000))#
legend("topright",c(expression(N[2]),"median = 3740"),bty="n")#
title(xlab="Prior ~ unif (500, 50000)", line=0)#
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10), axes=FALSE)#
legend("center",c("Prior","Posterior"),pch=19,col=c("black","blue"),bty="n")#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(lawstat)#
#
MissenseVariants <- read.table("../Results/FunctionalContent_BValues/ProportionMis.txt")#
SynonymousVariants <- read.table("../Results/FunctionalContent_BValues/ProportionSyn.txt")#
MissenseVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticMis.txt")#
SynonymousVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticSyn.txt")#
pdf("../Figures/SuppFigure20_PropMisSyn.pdf",width=18,height=12/2)#
par(mfrow=c(1,3))#
par(mar=c(5.1,5.1,4.1,1.1))#
#
beanplot(MissenseVariants$V1/500000, SynonymousVariants$V1/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of exonic positions",xlab="Type of variants",main="A) Percentage of exonic positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariants$V2/500000, SynonymousVariants$V2/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of PhastCons positions",xlab="Type of variants",main="B) Percentage of PhastCons positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariantsB$V3/1000, SynonymousVariantsB$V3/1000 ,names=c("Syn","Mis"),ylab="Average B values",xlab="Type of variants",main="C) Average B values in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
dev.off()#
#
mean(MissenseVariants$V1/500000)#
mean(MissenseVariants$V2/500000)#
mean(MissenseVariantsB$V3/1000)#
#
mean(SynonymousVariants$V1/500000)#
mean(SynonymousVariants$V2/500000)#
mean(SynonymousVariantsB$V3/1000)#
#
median(MissenseVariants$V1/500000)#
median(MissenseVariants$V2/500000)#
median(MissenseVariantsB$V3/1000)#
#
median(SynonymousVariants$V1/500000)#
median(SynonymousVariants$V2/500000)#
median(SynonymousVariantsB$V3/1000)#
#
var(MissenseVariants$V1/500000)#
var(MissenseVariants$V2/500000)#
var(MissenseVariantsB$V3/1000)#
#
var(SynonymousVariants$V1/500000)#
var(SynonymousVariants$V2/500000)#
var(SynonymousVariantsB$V3/1000)#
#
wilcox.test(MissenseVariants$V1,SynonymousVariants$V1)#
wilcox.test(MissenseVariants$V2,SynonymousVariants$V2)#
wilcox.test(MissenseVariantsB$V3/1000,SynonymousVariantsB$V3/1000)#
y <- c(MissenseVariants$V1,SynonymousVariants$V1)#
group <- as.factor(c(rep(1, length(MissenseVariants$V1)), rep(2, length(SynonymousVariants$V1))))#
levene.test(y,group)#
y <- c(MissenseVariants$V2,SynonymousVariants$V2)#
group <- as.factor(c(rep(1, length(MissenseVariants$V1)), rep(2, length(SynonymousVariants$V1))))#
levene.test(y,group)#
y <- c(MissenseVariantsB$V3/1000,SynonymousVariantsB$V3/1000)#
group <- as.factor(c(rep(1, length(MissenseVariantsB$V3)), rep(2, length(SynonymousVariantsB$V3))))#
levene.test(y,group)#
#
#################################################### Non CpG Sites#
MissenseVariants <- read.table("../Results/FunctionalContent_BValues/ProportionMis.txt")#
SynonymousVariants <- read.table("../Results/FunctionalContent_BValues/ProportionSyn.txt")#
MissenseVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticMis.txt")#
SynonymousVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticSyn.txt")#
MisPosNonCpG <- read.table("../Results/FunctionalContent_BValues/CpGMisOnePercentNumberPositions.frq")#
SynPosNonCpG <- read.table("../Results/FunctionalContent_BValues/CpGSynOnePercentNumberPositions.frq")#
pdf("../Figures/SuppFigure20_PropMisSynNotCpG.pdf",width=18,height=12/2)#
par(mfrow=c(1,3))#
par(mar=c(5.1,5.1,4.1,1.1))#
#
beanplot(MissenseVariants$V1[MisPosNonCpG$V1+1]/500000, SynonymousVariants$V1[SynPosNonCpG$V1+1]/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of exonic positions",xlab="Type of variants",main="A) Percentage of exonic positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariants$V2[MisPosNonCpG$V1+1]/500000, SynonymousVariants$V2[SynPosNonCpG$V1+1]/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of PhastCons positions",xlab="Type of variants",main="B) Percentage of PhastCons positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000, SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000 ,names=c("Synonymous","Nonsynonymous"),ylab="Average B values",xlab="Type of variants",main="C) Average B values in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
dev.off()#
#
mean(MissenseVariants$V1[MisPosNonCpG$V1+1]/500000)#
mean(MissenseVariants$V2[MisPosNonCpG$V1+1]/500000)#
mean(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000)#
#
mean(SynonymousVariants$V1[SynPosNonCpG$V1+1]/500000)#
mean(SynonymousVariants$V2[SynPosNonCpG$V1+1]/500000)#
mean(SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000)#
#
median(MissenseVariants$V1[MisPosNonCpG$V1+1]/500000)#
median(MissenseVariants$V2[MisPosNonCpG$V1+1]/500000)#
median(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000)#
#
median(SynonymousVariants$V1[SynPosNonCpG$V1+1]/500000)#
median(SynonymousVariants$V2[SynPosNonCpG$V1+1]/500000)#
median(SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000)#
#
var(MissenseVariants$V1[MisPosNonCpG$V1+1]/500000)#
var(MissenseVariants$V2[MisPosNonCpG$V1+1]/500000)#
var(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000)#
#
var(SynonymousVariants$V1[SynPosNonCpG$V1+1]/500000)#
var(SynonymousVariants$V2[SynPosNonCpG$V1+1]/500000)#
var(SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000)#
#
wilcox.test(MissenseVariants$V1[MisPosNonCpG$V1+1],SynonymousVariants$V1[SynPosNonCpG$V1+1])#
wilcox.test(MissenseVariants$V2[MisPosNonCpG$V1+1],SynonymousVariants$V2[SynPosNonCpG$V1+1])#
wilcox.test(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000,SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000)#
y <- c(MissenseVariants$V1[MisPosNonCpG$V1+1],SynonymousVariants$V1[SynPosNonCpG$V1+1])#
group <- as.factor(c(rep(1, length(MissenseVariants$V1[MisPosNonCpG$V1+1])), rep(2, length(SynonymousVariants$V1[SynPosNonCpG$V1+1]))))#
levene.test(y,group)#
y <- c(MissenseVariants$V2[MisPosNonCpG$V1+1],SynonymousVariants$V2[SynPosNonCpG$V1+1])#
group <- as.factor(c(rep(1, length(MissenseVariants$V1[MisPosNonCpG$V1+1])), rep(2, length(SynonymousVariants$V1[SynPosNonCpG$V1+1]))))#
levene.test(y,group)#
y <- c(MissenseVariantsB$V3[MisPosNonCpG$V1+1]/1000,SynonymousVariantsB$V3[SynPosNonCpG$V1+1]/1000)#
group <- as.factor(c(rep(1, length(MissenseVariantsB$V3[MisPosNonCpG$V1+1])), rep(2, length(SynonymousVariantsB$V3[SynPosNonCpG$V1+1]))))#
levene.test(y,group)
library(here)#
#
FileNames <- c("../Results/RecMaps/LeftBpRecRatePerVariantNoCpGPrintMap.txt", "../Results/RecMaps/RightBpRecRatePerVariantNoCpGPrintMap.txt", "../Results/RecMaps/LeftBpRecRatePerVariantSynonymousNoCpGPrintMap.txt", "../Results/RecMaps/RightBpRecRatePerVariantSynonymousNoCpGPrintMap.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../Figures/SuppFigure21_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
RecMapNS <- RecMap[1:250000]/(27300)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
RecMapNS <- c(RecMapNS,RecMap[1:250000]/(27300))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
AbsDifference <- 0#
TotalMean <- mean(CurrentRecRate)#
#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
FirstDataBoxPlots <- BoxplotAbsDiff#
#
# boxplot(BoxplotAbsDiff)#
#
for (j in 3:4){#
    Table <- read.table(FileNames[j])#
    RecMap <- rep(0,250001)#
    ColumnToCheck <- Table$V2[1]#
    StartingPosition <- Table$V3[1]#
    EndingPosition <- Table$V4[1]#
    NumberOfVariants <- 0#
    CurrentPosition <- 0#
    BoxplotAbsDiff <- c()#
    CurrentRecRate <- rep(0,250001)#
#
    for (i in 1:nrow(Table)){#
        if (Table$V2[i] != ColumnToCheck ){#
            CurrentPosition <- 0#
            StartingPosition <- Table$V3[i]#
            EndingPosition <- Table$V4[i]#
            NumberOfVariants <- NumberOfVariants + 1#
            ColumnToCheck <- Table$V2[i]#
            CurSum <- c()#
            CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
            TotalMean <- mean(CurrentRecRate)#
            AbsDifference <- 0#
            for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
            }#
            AbsDifference <- AbsDifference / 5#
            if (AbsDifference == "NaN"){#
                AbsDifference <- 0#
            }#
#
            BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
            CurrentRecRate <- rep(0,250001)#
#
            #        break#
        }#
        if (i %% 1000 == 0){#
            print (i)#
        }#
        ToAdd <- Table$V3[i] - StartingPosition + 1#
        TheEnd <- Table$V4[i] - StartingPosition#
        #    print (ToAdd)#
        #    print (TheEnd)#
        #    break#
        RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
        CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
#
    }#
    if (j == 3){#
        jpeg(filename = "../Figures/SuppFigure21_RecMapPlotsSyn_Sites.jpeg", width = 960, quality = 90)#
        RecMapSyn <- RecMap[1:250000]/(27300)#
        plot(1:250000,RecMap[1:250000]/(15100), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
        axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "Syn Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(25001,1.65e-7,NumbersToPrint[1])#
        text(75001,1.65e-7,NumbersToPrint[2])#
        text(125001,1.65e-7,NumbersToPrint[3])#
        text(175001,1.65e-7,NumbersToPrint[4])#
        text(225001,1.65e-7,NumbersToPrint[5])#
#
    } else {#
        points(250001:500000,RecMap[1:250000]/(15100), pch = 19)#
        RecMapSyn <- c(RecMapSyn,RecMap[1:250000]/(27300))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(275001,1.65e-7,NumbersToPrint[1])#
        text(325001,1.65e-7,NumbersToPrint[2])#
        text(375001,1.65e-7,NumbersToPrint[3])#
        text(425001,1.65e-7,NumbersToPrint[4])#
        text(475001,1.65e-7,NumbersToPrint[5])#
    }#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
#
TotalMean <- mean(CurrentRecRate[1:250000])#
#
AbsDifference <- 0#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
pdf("../Figures/SuppFigure21_BoxPlots.pdf")#
par(mar=c(5.1,6.1,4.1,2.1))#
boxplot(FirstDataBoxPlots/100, BoxplotAbsDiff/100, names = c("Non synonymous","Synonomous"), ylab = expression( plain("sd (") ~ R[s[j]] ~ plain(")") ))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_0.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_25.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_50.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_-25.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_-50.txt")#
#
Plot <- paste("../Figures/SuppFigure22_UK10KSelInference.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(Selection4Ns_0$V1, Selection4Ns_Minus50$V1, Selection4Ns_Minus100$V1, names=c("0","-25","-50"), ylab="Estimated 4Ns values", xlab="Real 4Ns values", main="Inference of Selection", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=-25,lty=3)#
abline(h=-50,lty=3)#
abline(h=25,lty=3)#
abline(h=50,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_0.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_-25.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_-50.txt")#
#
beanplot(Selection4Ns_0$V1,Selection4Ns_Minus50$V1,Selection4Ns_Minus100$V1,names=c("0","-25","-50"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=-25,lty=3)#
abline(h=-50,lty=3)#
# abline(h=25,lty=3)#
# abline(h=50,lty=3)#
#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667, width = 14)#
par(mfrow=c(5,2),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\nSearch over neutral and\ndeleterious 4Ns values")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\nSearch over neutral and\ndeleterious 4Ns values")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\nSearch over neutral and\ndeleterious 4Ns values")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\nSearch over neutral and\ndeleterious 4Ns values")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667, width = 14)#
par(mfrow=c(5,2),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667, width = 14)#
par(mfrow=c(5,2),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667, width = 14)#
par(mfrow=c(3,1),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667, width = 14)#
par(mfrow=c(3,1),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667/3, width = 14/2)#
par(mfrow=c(3,1),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667/(3/5), width = 14/2)#
par(mfrow=c(3,1),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
library(here)#
library(beanplot)#
#
pdf("../Figures/SuppFigure23_Selection.pdf",height = 13.66667/(5/3), width = 14/2)#
par(mfrow=c(3,1),mar=c(4.1,3.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 1:1){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
ColorViridis <- viridis(5)#
#
Plot <- paste("../Figures/SuppFigure24_LDistributionComparison.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="A) Probability Distribution of L\n in a constant population size scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLPopExpansion.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="B) Probability Distribution of L\n in a population expansion scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLUK10K.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="C) Probability Distribution of L\n in the scaled UK10K demographic model", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-50","-25","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
dev.off()#
#
File = c("../Results/DistributionOfL/DistributionOfL.txt", "../Results/DistributionOfL/DistributionOfLPopExpansion.txt", "../Results/DistributionOfL/DistributionOfLUK10K.txt")#
#
Numbers <- c(1,4,5)#
TotalConcatenateSums <- c()#
for (i in 1:3){#
     DistributionOfL <- read.table(File[i])#
     ConcatenateSums <- c()#
     for (j in Numbers){#
         for (k in Numbers){#
             AbsoluteSum <- 0#
             for (l in 1:5){#
                 AbsoluteSum <- AbsoluteSum + abs(DistributionOfL[j,l] - DistributionOfL[k,l])#
             }#
             ConcatenateSums <- c(ConcatenateSums, AbsoluteSum)#
         }#
     }#
     TotalConcatenateSums <- c(TotalConcatenateSums, ConcatenateSums[2], ConcatenateSums[3], ConcatenateSums[6])#
}#
Plot <- paste("../Figures/FigureSX13_LDistributionBoxplot.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,4) + 0.1)#
#
plot(1:3,TotalConcatenateSums[1:3], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "D) Constant population size scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[4:6], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "E) Population expansion scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[7:9], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "F) Scaled UK10K demographic model", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 25","4Ns = 0 vs 4Ns = 50","4Ns = 25 vs 4Ns = 50"), cex.axis = 1.5 )#
#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
ColorViridis <- viridis(5)#
#
Plot <- paste("../Figures/SuppFigure24_LDistributionComparison.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="A) Probability Distribution of L\n in a constant population size scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLPopExpansion.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="B) Probability Distribution of L\n in a population expansion scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLUK10K.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="C) Probability Distribution of L\n in the scaled UK10K demographic model", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-50","-25","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
dev.off()#
#
File = c("../Results/DistributionOfL/DistributionOfL.txt", "../Results/DistributionOfL/DistributionOfLPopExpansion.txt", "../Results/DistributionOfL/DistributionOfLUK10K.txt")#
#
Numbers <- c(1,4,5)#
TotalConcatenateSums <- c()#
for (i in 1:3){#
     DistributionOfL <- read.table(File[i])#
     ConcatenateSums <- c()#
     for (j in Numbers){#
         for (k in Numbers){#
             AbsoluteSum <- 0#
             for (l in 1:5){#
                 AbsoluteSum <- AbsoluteSum + abs(DistributionOfL[j,l] - DistributionOfL[k,l])#
             }#
             ConcatenateSums <- c(ConcatenateSums, AbsoluteSum)#
         }#
     }#
     TotalConcatenateSums <- c(TotalConcatenateSums, ConcatenateSums[2], ConcatenateSums[3], ConcatenateSums[6])#
}#
Plot <- paste("../Figures/SuppFigure24_LDistributionBoxplot.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,4) + 0.1)#
#
plot(1:3,TotalConcatenateSums[1:3], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "D) Constant population size scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[4:6], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "E) Population expansion scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[7:9], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "F) Scaled UK10K demographic model", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 25","4Ns = 0 vs 4Ns = 50","4Ns = 25 vs 4Ns = 50"), cex.axis = 1.5 )#
#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
ColorViridis <- viridis(5)#
#
Plot <- paste("../Figures/SuppFigure24_LDistributionComparison.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="A) Probability Distribution of L\n in a constant population size scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLPopExpansion.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="B) Probability Distribution of L\n in a population expansion scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLUK10K.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.05,0.41), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="C) Probability Distribution of L\n in the scaled UK10K demographic model", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-50","-25","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
dev.off()#
#
File = c("../Results/DistributionOfL/DistributionOfL.txt", "../Results/DistributionOfL/DistributionOfLPopExpansion.txt", "../Results/DistributionOfL/DistributionOfLUK10K.txt")#
#
Numbers <- c(1,4,5)#
TotalConcatenateSums <- c()#
for (i in 1:3){#
     DistributionOfL <- read.table(File[i])#
     ConcatenateSums <- c()#
     for (j in Numbers){#
         for (k in Numbers){#
             AbsoluteSum <- 0#
             for (l in 1:5){#
                 AbsoluteSum <- AbsoluteSum + abs(DistributionOfL[j,l] - DistributionOfL[k,l])#
             }#
             ConcatenateSums <- c(ConcatenateSums, AbsoluteSum)#
         }#
     }#
     TotalConcatenateSums <- c(TotalConcatenateSums, ConcatenateSums[2], ConcatenateSums[3], ConcatenateSums[6])#
}#
Plot <- paste("../Figures/SuppFigure24_LDistributionBoxplot.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,5) + 0.1)#
#
plot(1:3,TotalConcatenateSums[1:3], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "D) Constant population size scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[4:6], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "E) Population expansion scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 50","4Ns = 0 vs 4Ns = 100","4Ns = 50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[7:9], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "F) Scaled UK10K demographic model", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = 25","4Ns = 0 vs 4Ns = 50","4Ns = 25 vs 4Ns = 50"), cex.axis = 1.5 )#
#
dev.off()
library(here)#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsConstantPopSize.txt")#
#
pdf("../Figures/SuppFigure25_ConstantPopSizeESS.pdf")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
library(here)#
#
Data <- read.table("../Results/AllAgeESS/FinalStatsPopExpansion.txt")#
#
pdf("../Figures/SuppFigure25_PopExpansionESS.pdf")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
library(here)#
Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KTestTwo.txt")#
#
pdf("../Figures/SuppFigure25_UK10K_ESS.pdf")#
plot(-200:200,Data[12,403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[2,403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#lines(-200:200,Data[3,403:803],type="l",col="blue",cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
#Data <- read.table("../Results/AllAgeESS/FinalStatsUK10KNeutral.txt")#
#lines(-200:200,Data[403:803],type="l",col="green",cex.lab=1.4,cex.axis=1.5,lwd=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
#
Plot <- paste("../Figures/SuppFigure26_PopExpansionConstantPopSizeSelInferenceLowESS.pdf",sep="")#
#
pdf(Plot,width=7*3, height = 7*2)#
par(mfrow = c(2,3))#
par(mar=c(5,5,5,2) + 0.1)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="A) Inference of Selection in a Constant\nPopulation Size Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="B) Inference of Selection in a Constant\nPopulation Size Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsConstantPopSize.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "C)", cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSConstantPopSize.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
legend("left",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="D) Inference of Selection in a Population\nExpansion Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="E) Inference of Selection in a Population\nExpansion Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsPopExpansion.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "F) ",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSPopExpansion.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red", cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
legend("topleft",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
#
Plot <- paste("../Figures/SuppFigure26_PopExpansionConstantPopSizeSelInferenceLowESS.pdf",sep="")#
#
pdf(Plot,width=7*3, height = 7*2)#
par(mfrow = c(2,3))#
par(mar=c(5,5,5,2) + 0.1)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="A) Inference of Selection in a Constant\nPopulation Size Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="B) Inference of Selection in a Constant\nPopulation Size Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsConstantPopSize.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "C)", cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSConstantPopSize.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
legend("left",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="D) Inference of Selection in a Population\nExpansion Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="E) Inference of Selection in a Population\nExpansion Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsPopExpansion.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "F) ",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSPopExpansion.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red", cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
legend("topleft",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, 50, 100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Constant Population Size 4Ns = 0\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = 50\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = 100\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = -50\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = -100\nActual Mutation rate = 1.2e-8")#
#
ViridisColors <- viridis(5)#
#
pdf ("../Figures/SuppFigure27_UK10K4Ns0AncMis.pdf")#
par(mar = c(6, 5, 1, 1))#
Data <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecMisAnc4496.2014Ns4Ns_0.txt")#
DataTwo <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.2014Ns4Ns_0.txt")#
#
        beanplot(Data[,1], DataTwo[,1] ,names=c("Without ancestry\nmisspecification","With ancestry\n misspecification"),ylab="Estimated 4Ns values",main="",cex.axis=1.,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
        abline(h=0,lty=3)#
#
DataSet <- data.frame(Data[,1], DataTwo[,1])#
kruskal.test(Data...1. ~ DataTwo...1., data = DataSet)#
#
dev.off()#
# , xlab="Real 4Ns values"
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("UK10K","UK10K")#
FourNs <- c("0", "25", "50", "-25", "-50")#
DemographicScenariosTitle <- c("UK10K")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 25", "4Ns = 50", "4Ns = -25", "4Ns = -50")#
#
Medians <- c()#
#
pdf ("../Figures/SuppFigure28_MisinferenceWithStatisticalPhasingUK10K.pdf", width = 8)#
par(mfrow = c(1,1))#
par(mar = c(4, 5, 5, 2))#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( BiasedEstimators[1:50]  - UnbiasedEstimators[1:50], BiasedEstimators[151:200]  - UnbiasedEstimators[151:200], BiasedEstimators[201:250] - UnbiasedEstimators[201:250] , ylim = c(-400,400), xlab = "4Ns", ylab = "Estimated 4Ns on haplotype data  - Estimated 4Ns on statistically phased data", main = "UK10K", names = c(0, -25, -50) )#
#
abline (h= 0 , lty=2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("UK10K")#
FourNs <- c("0", "-25", "-50")#
FourNsLine <- c(0, -25, -50)#
Magnitude <- c( "10", "12")#
Titles <- c("UK10K 4Ns = 0\nActual recombination rate = 5 X 7.49e-9","UK10K 4Ns = -25\nActual recombination rate = 5 X 7.49e-9","UK10K 4Ns = -50\nActual recombination rate = 5 X 7.49e-9")#
#
ViridisColors <- viridis(5)#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure29_MutRecMisinferenceUK10K.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,3))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:3){#
            DataMatrix <- matrix(,nrow= 50, ncol = 5)#
        for (k in 1:1){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k],"SmallRec" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i],"11","SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:50){#
            DataMatrix[l,2] <- Data$V1[l]#
        }#
        for (k in 2:2){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k],"SmallRec", FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-75, 75), xlab = "Recombination rate used", names = c("5 X 7.22e-9","5 X 7.49e-9","5 X 9.95e-9"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
}#
#
dev.off()#
#
Titles <- c("UK10K 4Ns = 0\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -25\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -50\nActual mutation rate = 5 X 1.5e-8")#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigureSX8_MutMisinferenceUK10K.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,3))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:3){#
            DataMatrix <- matrix(,nrow= 50, ncol = 5)#
        for (k in 1:1){#
#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K0SmallRecLowMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K11SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:50){#
            DataMatrix[l,2] <- Data$V1[l]#
        }#
        for (k in 2:2){#
            Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K1SmallRecHighMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-75, 75), xlab = "Mutation rate used", names = c("5 X 1.43e-8","5 X 1.5e-8","5 X 1.58e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Scripts")#
#
DemographicScenarios <- c("UK10K")#
FourNs <- c("0", "-25", "-50")#
FourNsLine <- c(0, -25, -50)#
Magnitude <- c( "10", "12")#
Titles <- c("UK10K 4Ns = 0\nActual recombination rate = 5 X 7.49e-9","UK10K 4Ns = -25\nActual recombination rate = 5 X 7.49e-9","UK10K 4Ns = -50\nActual recombination rate = 5 X 7.49e-9")#
#
ViridisColors <- viridis(5)#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure29_MutRecMisinferenceUK10K.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,3))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:3){#
            DataMatrix <- matrix(,nrow= 50, ncol = 5)#
        for (k in 1:1){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k],"SmallRec" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i],"11","SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:50){#
            DataMatrix[l,2] <- Data$V1[l]#
        }#
        for (k in 2:2){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k],"SmallRec", FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-75, 75), xlab = "Recombination rate used", names = c("5 X 7.22e-9","5 X 7.49e-9","5 X 9.95e-9"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
}#
#
dev.off()#
#
Titles <- c("UK10K 4Ns = 0\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -25\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -50\nActual mutation rate = 5 X 1.5e-8")#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure29_MutMisinferenceUK10K.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,3))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:3){#
            DataMatrix <- matrix(,nrow= 50, ncol = 5)#
        for (k in 1:1){#
#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K0SmallRecLowMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K11SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:50){#
            DataMatrix[l,2] <- Data$V1[l]#
        }#
        for (k in 2:2){#
            Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K1SmallRecHighMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:50){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-75, 75), xlab = "Mutation rate used", names = c("5 X 1.43e-8","5 X 1.5e-8","5 X 1.58e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure32_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure31_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure30_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the scaled UK10K model and the Boyko DFE", xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure31_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 4594/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
Prob_One_Percent <- 61813 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print ("J value")#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print ("J value")#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,4]) -log10(0.001),0), max(log10(counts[2,4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,5]) -log10(0.001),0), max(log10(counts[2,5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,6]) -log10(0.001),0), max(log10(counts[2,6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,7]) -log10(0.001),0), max(log10(counts[2,7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,8]) -log10(0.001),0), max(log10(counts[2,8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,9]) -log10(0.001),0), max(log10(counts[2,9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,10]) -log10(0.001),0), max(log10(counts[2,10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,11]) -log10(0.001),0), max(log10(counts[2,11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(counts[1,1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(counts[1,2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(counts[1,3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(counts[2,1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(counts[2,2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(counts[2,3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- counts[1,1]#
logcountsThree[1,2] <- sum(counts[1,2:10])#
logcountsThree[1,3] <- counts[1,11]#
logcountsThree[2,1] <- counts[2,1]#
logcountsThree[2,2] <- sum(counts[2,2:10])#
logcountsThree[2,3] <- counts[2,11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure30_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure35_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.3856727, 0.0, 0.6143273)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.1","= 0.54","< 0.01")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure35_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure30_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the scaled UK10K model and the Boyko DFE", xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(viridis)#
library(here)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
DFEParsFirst <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
SelectionDFERow <- ((1560 %% 52 ) + 1)#
SelectionDFEColumn <- ((1560 / 52 ) + 1)#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
for (i in 1:10){#
     UpperBound <- i*5 + 2#
     LowerBound <- (i-1)*5 + 3#
     CurrentSum <- sum(DFEPars[1560,LowerBound:UpperBound])#
     #    print (i)#
     #    print (CurrentSum)#
     P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
 }#
#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# Alpha = 0.9#
# Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
# for (i in 1:10){#
    # print (i)#
#     Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
#     P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
# }#
#
# Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:10] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:10]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
#pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/SuppFigure34_BarPlot_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" *bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# legend = c(expression("Real" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Inferred"  ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression('P'[psi]~ "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
axis (2,at=c(0+0.01, 1+0.01, 2+0.01, 3+0.01), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
#axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsSuppTableS9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentSuppTableS9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
######################################################################################################################################################################################################### Sum#
Alpha = 0.9#
Beta = 75000#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) - log10(0.001),0)#
logcounts[1,2] <- max(log10(sum(P_Allele_Is_2Ns_given_OnePercent[2:10])) - log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) - log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) - log10(0.001), 0)#
logcounts[2,2] <- max(log10(sum(Probs[2:10])) - log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[11]) - log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) - log10(0.001),0)#
logcounts[3,2] <- max(log10(sum(ProbsBoyko[2:10])) - log10(0.001) ,0)#
logcounts[3,3] <- max(log10(ProbsBoyko[11]) - log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) - log10(0.001) ,0)#
logcounts[4,2] <- max(log10(sum(ProbsKim[2:10])) - log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[11]) - log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table ### Caution the next plot is wrong in the intermediate bin. Need to correct.#
#
ViridisColors <- viridis(4, alpha = 0.7)#
# pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBinsLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
# barplot(logcounts + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.1, 3.5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.3), yaxt="n")#
#
# axis (2,at=c(0+0.1,1+0.1,2+0.1,3+0.1), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    SumLower <- SumLower + Quantiles[1]#
    SumUpper <- SumUpper + Quantiles[2]#
    }#
    #    points((i - 1)* 5 + 2.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        SumLower <- SumLower + Quantiles[1]#
        SumUpper <- SumUpper + Quantiles[2]#
    }#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    #    points((i - 1)* 5 + 1.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
#
    }else{#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #     points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #     points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    }#
}#
#
#####################################################################################
# dev.off()#
######################################################################################################################################################## Natural scale #######################################
######################################################################################################################################################################################################### Sum#
Alpha = 0.9#
Beta = 75000#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*25387829482)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22970 * 229700 + 45544 * 6104 + 5856 * 1760 + 7480 * 1222 + 1131262 * 228) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:10] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:10]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
# logcounts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
# logcounts[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
# logcounts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcounts[1,1] <- Probs[1]#
logcounts[1,2] <- sum(Probs[2:10])#
logcounts[1,3] <- Probs[11]#
logcounts[2,1] <- ProbsBoyko[1]#
logcounts[2,2] <- sum(ProbsBoyko[2:10])#
logcounts[2,3] <- ProbsBoyko[11]#
logcounts[3,1] <- ProbsKim[1]#
logcounts[3,2] <- sum(ProbsKim[2:10])#
logcounts[3,3] <- ProbsKim[11]#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c( expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(-0.01, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "center",cex=2), yaxt="n")#
#
# egend = c(expression("Inferred " ~ 'P'[psi] ~ "(" *bolditalic(s[j])*" | 1%, " * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Boyko et al 2008 " ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")") , expression("Kim et al 2017 P("*bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2)#
#
# text(3, 1.1,"p-value = 0.1", cex = 2)#
# text(8, 1.1,"p-value = 0.54", cex = 2)#
# text(13, 1.1,"p-value < 0.01", cex = 2)#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixFinalProbs[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixFinalProbs[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (SumLower)#
        print (SumUpper)#
#
        points((i - 1)* 4 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        #        points((i - 1)* 5 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
    }else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
#####################################################################################
dev.off()#
#
#################################################################################### Density plots
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns/ (NumberOfAllelesAt2Ns)#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/Figure7_DFEStandingToNewVariationBarPlotAlt.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TotalAlleleNumber <- ((80000 + (100000/10000)*100)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
LastAlleleNumber <- (1-pgamma(90,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS3.txt",row.names = FALSE)
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure30_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the scaled UK10K model and the Boyko DFE", xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 4594/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
Prob_One_Percent <- 61813 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print ("J value")#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print ("J value")#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,4]) -log10(0.001),0), max(log10(counts[2,4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,5]) -log10(0.001),0), max(log10(counts[2,5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,6]) -log10(0.001),0), max(log10(counts[2,6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,7]) -log10(0.001),0), max(log10(counts[2,7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,8]) -log10(0.001),0), max(log10(counts[2,8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,9]) -log10(0.001),0), max(log10(counts[2,9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,10]) -log10(0.001),0), max(log10(counts[2,10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,11]) -log10(0.001),0), max(log10(counts[2,11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(counts[1,1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(counts[1,2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(counts[1,3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(counts[2,1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(counts[2,2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(counts[2,3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- counts[1,1]#
logcountsThree[1,2] <- sum(counts[1,2:10])#
logcountsThree[1,3] <- counts[1,11]#
logcountsThree[2,1] <- counts[2,1]#
logcountsThree[2,2] <- sum(counts[2,2:10])#
logcountsThree[2,3] <- counts[2,11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigure30_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS2.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure30_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure35_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.3856727, 0.0, 0.6143273)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.1","= 0.54","< 0.01")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure35_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
