62 + 20 + 10
3.4 + 10 + 62 + 20 + 10
1.6*80
105/80
1.6*78
1.3*80
4200+5000+9000+4000
66460+29870.16
1790.72+418.80
1475*5
379 + (29870.16 + 28882.63) / (29870.16 + 28882.63 + 37577)
379 + (29870.16 + 28882.63) / (29870.16 + 28882.63 + 37577) * 3799
379 + (29870.16 + 28882.63) / (29870.16 + 28882.63 + 37577) * 3799 + 511 * 1083/(1329 +1083)
3799+511+379
2925.501-4689
2*70
40*6
35(6)
35*6
20000/30
4/110
110/4
109.4/3.9
43.7/1.6
215+185+120
45Â¿25
45+25
45+42.5
87.5*2
175+45
4.5*10
190+225+120
700000/20
285*52
460*52
29871*12
29871*2
29870+28882.63
1425/4
230+195+125
450+300
45+90*2
500+400
450+350
90*3+45
90*4+45
230+195+125
335+245+425
170*1.25
50/6
50/8
25+20+15+20+5
25+20+30+20+5
45+20
15*3
45+20
50-3
50/3
45*7
2.5 * 10^9
250000000
dpois(1,1)
dpois(1,4)
dpois(1,5)
dpois(1,5)*2000000000*.001
dpois(1,4)*2000000000*.001
dpois(2,4)*2000000000*.001
1100000-337177
11000000
10*600000*0.01
10*600000*0.0001
10*600000*0.000001
0.00000125
0.0000000125
0.000000015
4363/11000000
11000000 - 4363
1100000 - 4363
.01*.01*.01
1/1100000
663/1100000
1/(4*10000*1/5e-8)
1/(4*10000*1.5e-8)
4*10000*1.5e-8
0.0006
1000/365
365*3
15000+15000+6000+1000
15000 / 37000
1000/37000
2000/37000
9000+30000+15000+6000+1000
61000/3
1000/61000
3000/61000
6000/61000
30000*20
1000/25
63000/3
21000*20
30000/20
37577*18
5241+1329
6570*18
676386-118260
5000/300000
0.01666667*8000
300000/5000
60*5000
60*8000
500000/20
400+600+200
1200*4
1000+850+1000+500
18000+15000+11000
4000/44000
6000/44000
30000
60*10000
30000*20
23000+13000+13000
4000/49000
6000/49000
2000/49000
23000+17000+13000
4000/53000
2000/52000
5000/52000
4000/52000
10000/600000
600000/10000
60*10000
10000/600000
0.01666667*600000
4000+30000+11000+5000+2000
4000/52000
11000/52000
5000/52000
2000/52000
12000*5
14694*3
11065.50*3
715*3
60000+44082+33196.5+2145
8*20
1707-5
1702/2
255*4
4*6
55000/24
255*10
55445/100
54194+73+73+73+68
54194+63+63+63+68
2 * 226252
5 * 226252
1131260/2
5 * 226252
2* 226252 * 5
2* 226252 * 5 / 5
226252 * 5
226252 * 5 / 2
226252 * 5
1131260 * 2
2262520/5
2262520/4
565630/2
226252*5
1131260/2
452504*5
2262520/4
700(52)
700*52
32194-57-9.50-40-789.30
31298.2-2952.72
3600/2500
3700/2500
3721/2500
dpois(250000/1000000)
dpois(1,250000/1000000)
dpois(2000,250000/1000000)
dpois(1,250000/1000000)*1800
dpois(1,250000/1000000)*1800 * 0.01
50/50
50*25
50*49
50/2
50/3
50/4
50/5
50/6
50/7
50/10
10*25
25*200
5000/4
4*10000*.01
2/6
2*9/6
13.9*61
1000/100000
3450/1735350
(1-.7111)/(1-.7589)
1.198258 - 1
(1-.8531)/(1-.8638)
(1-.8638)/(1-.8531)
(1-.8351)/(1-.8638)
1000/5
4*1000*.05
4*1000*.005
4*1000*.001
4*1000*.00125
252+26+13+26+51+21+11+11+12+19+10+1
3450/300000000
1/100000
0.2*60
15/169
7/102
7/109
1e-4*1000
1e-4*10000
1e-4*100000
100*20
10855542 +25000
10855542 +250000
16380196 + 250000
16380196 + 500000
16380196 -250000
11105542 + 2500000
11105542 + 250000
10000*.0125
10000*.125
1100000
10^7
10000000
5000/25
2500/25
1e-4*500000
1e-4*1000000
2*15000/3*1e-8
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Results/RecMaps")#
#
FileNames <- c("LeftBpRecRatePerVariantNoCpGPrintMap.txt", "RightBpRecRatePerVariantNoCpGPrintMap.txt", "LeftBpRecRatePerVariantSynonymousNoCpGPrintMap.txt", "RightBpRecRatePerVariantSynonymousNoCpGPrintMap.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../../Figures/SuppFigure18_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
AbsDifference <- 0#
TotalMean <- mean(CurrentRecRate)#
#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
FirstDataBoxPlots <- BoxplotAbsDiff#
#
# boxplot(BoxplotAbsDiff)#
#
for (j in 3:4){#
    Table <- read.table(FileNames[j])#
    RecMap <- rep(0,250001)#
    ColumnToCheck <- Table$V2[1]#
    StartingPosition <- Table$V3[1]#
    EndingPosition <- Table$V4[1]#
    NumberOfVariants <- 0#
    CurrentPosition <- 0#
    BoxplotAbsDiff <- c()#
    CurrentRecRate <- rep(0,250001)#
#
    for (i in 1:nrow(Table)){#
        if (Table$V2[i] != ColumnToCheck ){#
            CurrentPosition <- 0#
            StartingPosition <- Table$V3[i]#
            EndingPosition <- Table$V4[i]#
            NumberOfVariants <- NumberOfVariants + 1#
            ColumnToCheck <- Table$V2[i]#
            CurSum <- c()#
            CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
            TotalMean <- mean(CurrentRecRate)#
            AbsDifference <- 0#
            for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
            }#
            AbsDifference <- AbsDifference / 5#
            if (AbsDifference == "NaN"){#
                AbsDifference <- 0#
            }#
#
            BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
            CurrentRecRate <- rep(0,250001)#
#
            #        break#
        }#
        if (i %% 1000 == 0){#
            print (i)#
        }#
        ToAdd <- Table$V3[i] - StartingPosition + 1#
        TheEnd <- Table$V4[i] - StartingPosition#
        #    print (ToAdd)#
        #    print (TheEnd)#
        #    break#
        RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
        CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
#
    }#
    if (j == 3){#
        jpeg(filename = "../../Figures/SuppFigure18_RecMapPlotsSyn_Sites.jpeg", width = 960, quality = 90)#
        plot(1:250000,RecMap[1:250000]/(15100), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
        axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "Syn Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(25001,1.65e-7,NumbersToPrint[1])#
        text(75001,1.65e-7,NumbersToPrint[2])#
        text(125001,1.65e-7,NumbersToPrint[3])#
        text(175001,1.65e-7,NumbersToPrint[4])#
        text(225001,1.65e-7,NumbersToPrint[5])#
#
    } else {#
        points(250001:500000,RecMap[1:250000]/(15100), pch = 19)#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(275001,1.65e-7,NumbersToPrint[1])#
        text(325001,1.65e-7,NumbersToPrint[2])#
        text(375001,1.65e-7,NumbersToPrint[3])#
        text(425001,1.65e-7,NumbersToPrint[4])#
        text(475001,1.65e-7,NumbersToPrint[5])#
    }#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
#
TotalMean <- mean(CurrentRecRate[1:250000])#
#
AbsDifference <- 0#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
pdf("../../Figures/SuppFigure18_BoxPlots.pdf")#
par(mar=c(5.1,6.1,4.1,2.1))#
boxplot(FirstDataBoxPlots/100, BoxplotAbsDiff/100, names = c("Non synonymous","Synonomous"), ylab = expression( plain("sd (") ~ R[s[j]] ~ plain(")") ))#
#
dev.off()
max(RecMap[1:250000]/(27300))
sort(RecMap[1:250000]/(27300))[1:10]
sort(RecMap[1:250000]/(27300))[249000:250000]
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10K.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (4594 * 22971 + 9109 * 1221 + 1171 * 352 + 1496 * 244 + 226252 * 46) * NumberOfNonCpGSites * MutationRate * (1/3) * 5 * 5#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure9_UK10KDFE_StandingNew.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
  	legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 1+0.01, 2+0.01, 3+0.01), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsFig9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentFig9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10K.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (4594 * 22971 + 9109 * 1221 + 1171 * 352 + 1496 * 244 + 226252 * 46) * NumberOfNonCpGSites * MutationRate * (1/3) * 5 * 5#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure9_UK10KDFE_StandingNew.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) - log10(0.001),0)#
logcounts[1,2] <- max(log10(sum(P_Allele_Is_2Ns_given_OnePercent[2:10])) - log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) - log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) - log10(0.001), 0)#
logcounts[2,2] <- max(log10(sum(Probs[2:10])) - log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[11]) - log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) - log10(0.001),0)#
logcounts[3,2] <- max(log10(sum(ProbsBoyko[2:10])) - log10(0.001) ,0)#
logcounts[3,3] <- max(log10(ProbsBoyko[11]) - log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) - log10(0.001) ,0)#
logcounts[4,2] <- max(log10(sum(ProbsKim[2:10])) - log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[11]) - log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table ### Caution the next plot is wrong in the intermediate bin. Need to correct.#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.1, 3.5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.3), yaxt="n")#
#
axis (2,at=c(0+0.1,1+0.1,2+0.1,3+0.1), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    SumLower <- SumLower + Quantiles[1]#
    SumUpper <- SumUpper + Quantiles[2]#
    }#
    points((i - 1)* 5 + 2.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        SumLower <- SumLower + Quantiles[1]#
        SumUpper <- SumUpper + Quantiles[2]#
    }#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    points((i - 1)* 5 + 1.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
#
    }else{#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    }#
}#
#
#####################################################################################
dev.off()#
######################################################################################################################################################## Natural scale #######################################
######################################################################################################################################################################################################### Sum#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*34783323629)#
#
#### The number of alleles comes from the population expansion model (22971 + 9109 / 4594 * 1221 + 1171 / 4594 * 352 + 1496 / 4594 * 244 + 226252 / 4594 * 46) * 1000 * 1250#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10K.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (4594 * 22971 + 9109 * 1221 + 1171 * 352 + 1496 * 244 + 226252 * 46) * NumberOfNonCpGSites * MutationRate * (1/3) * 5 * 5#
Prob_One_Percent <- 273 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/Figure9_UK10KDFE_StandingNew.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcounts[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcounts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcounts[2,1] <- Probs[1]#
logcounts[2,2] <- sum(Probs[2:10])#
logcounts[2,3] <- Probs[11]#
logcounts[3,1] <- ProbsBoyko[1]#
logcounts[3,2] <- sum(ProbsBoyko[2:10])#
logcounts[3,3] <- ProbsBoyko[11]#
logcounts[4,1] <- ProbsKim[1]#
logcounts[4,2] <- sum(ProbsKim[2:10])#
logcounts[4,3] <- ProbsKim[11]#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.01, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "center",cex=2), yaxt="n")#
#
# text(3, 1.1,"p-value = 0.1", cex = 2)#
# text(8, 1.1,"p-value = 0.54", cex = 2)#
# text(13, 1.1,"p-value < 0.01", cex = 2)#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixFinalProbs[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixFinalProbs[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
#
        points((i - 1)* 5 + 2.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        points((i - 1)* 5 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
    }else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 5 + 2.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 5 + 2.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
#####################################################################################
dev.off()#
#
#################################################################################### Density plots
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Results/RecMaps")#
#
FileNames <- c("LeftBpRecRatePerVariantNoCpGPrintMap.txt", "RightBpRecRatePerVariantNoCpGPrintMap.txt", "LeftBpRecRatePerVariantSynonymousNoCpGPrintMap.txt", "RightBpRecRatePerVariantSynonymousNoCpGPrintMap.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../../Figures/SuppFigure18_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
RecMapNS <- RecMap[1:250000]/(27300)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
RecMapNS <- c(RecMapNS,RecMap[1:250000]/(27300))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
AbsDifference <- 0#
TotalMean <- mean(CurrentRecRate)#
#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
FirstDataBoxPlots <- BoxplotAbsDiff#
#
# boxplot(BoxplotAbsDiff)#
#
for (j in 3:4){#
    Table <- read.table(FileNames[j])#
    RecMap <- rep(0,250001)#
    ColumnToCheck <- Table$V2[1]#
    StartingPosition <- Table$V3[1]#
    EndingPosition <- Table$V4[1]#
    NumberOfVariants <- 0#
    CurrentPosition <- 0#
    BoxplotAbsDiff <- c()#
    CurrentRecRate <- rep(0,250001)#
#
    for (i in 1:nrow(Table)){#
        if (Table$V2[i] != ColumnToCheck ){#
            CurrentPosition <- 0#
            StartingPosition <- Table$V3[i]#
            EndingPosition <- Table$V4[i]#
            NumberOfVariants <- NumberOfVariants + 1#
            ColumnToCheck <- Table$V2[i]#
            CurSum <- c()#
            CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
            TotalMean <- mean(CurrentRecRate)#
            AbsDifference <- 0#
            for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
            }#
            AbsDifference <- AbsDifference / 5#
            if (AbsDifference == "NaN"){#
                AbsDifference <- 0#
            }#
#
            BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
            CurrentRecRate <- rep(0,250001)#
#
            #        break#
        }#
        if (i %% 1000 == 0){#
            print (i)#
        }#
        ToAdd <- Table$V3[i] - StartingPosition + 1#
        TheEnd <- Table$V4[i] - StartingPosition#
        #    print (ToAdd)#
        #    print (TheEnd)#
        #    break#
        RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
        CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
#
    }#
    if (j == 3){#
        jpeg(filename = "../../Figures/SuppFigure18_RecMapPlotsSyn_Sites.jpeg", width = 960, quality = 90)#
        RecMapSyn <- RecMap[1:250000]/(27300)#
        plot(1:250000,RecMap[1:250000]/(15100), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
        axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "Syn Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(25001,1.65e-7,NumbersToPrint[1])#
        text(75001,1.65e-7,NumbersToPrint[2])#
        text(125001,1.65e-7,NumbersToPrint[3])#
        text(175001,1.65e-7,NumbersToPrint[4])#
        text(225001,1.65e-7,NumbersToPrint[5])#
#
    } else {#
        points(250001:500000,RecMap[1:250000]/(15100), pch = 19)#
        RecMapSyn <- c(RecMapSyn,RecMap[1:250000]/(27300))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(275001,1.65e-7,NumbersToPrint[1])#
        text(325001,1.65e-7,NumbersToPrint[2])#
        text(375001,1.65e-7,NumbersToPrint[3])#
        text(425001,1.65e-7,NumbersToPrint[4])#
        text(475001,1.65e-7,NumbersToPrint[5])#
    }#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
#
TotalMean <- mean(CurrentRecRate[1:250000])#
#
AbsDifference <- 0#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
pdf("../../Figures/SuppFigure18_BoxPlots.pdf")#
par(mar=c(5.1,6.1,4.1,2.1))#
boxplot(FirstDataBoxPlots/100, BoxplotAbsDiff/100, names = c("Non synonymous","Synonomous"), ylab = expression( plain("sd (") ~ R[s[j]] ~ plain(")") ))#
#
dev.off()
mean(recMapSyn)
mean(RecMapSyn)
mean(RecMapNS)
wilcox.test(RecMapNS, RecMapSyn)
