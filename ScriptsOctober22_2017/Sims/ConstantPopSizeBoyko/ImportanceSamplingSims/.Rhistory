Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
        }#
        if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
        if ((CurTree == 16) || (CurTree == 17)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
        }#
        if ((CurTree == 18)){#
            T2 <- T2MeanTimes[Paths]#
            T3 <- T3MeanTimes[Paths]#
            T4 <- ConvertT4MeanTimes[Paths]#
            Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
            Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
            Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
            Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
            Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
            Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
        }#
    }#
}#
ProbList <- rbind(ProbList,Probabilities)#
Value <- ProportionTestValue$V1*log(Probabilities[1]) + ProportionTestValue$V2*log(Probabilities[2]) + ProportionTestValue$V3*log(Probabilities[3]) + ProportionTestValue$V4*log(Probabilities[4]) + ProportionTestValue$V5*log(Probabilities[5]) + ProportionTestValue$V6*log(Probabilities[6]) + ProportionTestValue$V7*log(Probabilities[7])#
LL <- c(LL, Value)#
}#
#
pdf("LLMigRate.pdf")#
par(mar=c(4.1,5.1,4.1,2.1))#
plot(LL,type="o",xaxt='n',xlab="4Nm",cex=2,pch=19,cex.axis=2,cex.lab=2)#
arrows(3,LL[3]-10000,3,LL[3]-1000)#
axis(1,at=c(1,2,3,4,5,6,7,8),labels=c("0.5","1.5","5","10","15","50","100","150"),cex.axis=1.5)#
legend(1.2,LL[3]-8000,"True value",bty="n",cex=2)#
dev.off()#
#
############################# Population size change #################################
MigrationRate <- c(0.01,0.05,0.1,0.5,1,5,10,50)#
ProbList <- Matrix(,ncol=7,nrow=0)#
#
ProportionTestValue <- read.table("ProportionsSizeChange.txt")#
LL <- c()#
for (Mig in 1:8){#
    ### Construct Matrices#
    VeryRecentMatrix <- matrix(0,nrow=5,ncol=5)#
    Matrix <- matrix(0,nrow=14,ncol=14)#
    MiniMatrixTest <- matrix(0,nrow=4,ncol=4)#
    m1 <- 0#
    m2 <- 666.666667#
    AncM1 <- 0#
    AncM2 <- 0#
    Theta1 <- 0.005#
    Theta2 <- 0.005  * MigrationRate[Mig]#
    ThetaA <- 0.002#
    DivTime <- 0.3#
    AncTime <- 0.05#
    #################### Set mu ############################
    mu <- 1e-8#
    N_1 <- Theta1 / (4*mu)#
    N_2 <- Theta2 / (4*mu)#
    N_A <- ThetaA / (4*mu)#
    mig1 <- m1 * (mu)#
    mig2 <- m2 * (mu)#
    ancmig1 <- AncM1 * mu#
    ancmig2 <- AncM2 * mu#
    TwoN1mig1 <- 2*N_1* mig1#
    TwoN2mig2 <- 5#
    TwoN1Ancmig1 <- 2*N_1* ancmig1#
    TwoN2Ancmig2 <- 2*N_1* ancmig2#
    DivergenceTime <- DivTime/mu#
    AncestralSampleTime <- AncTime/mu#
    #DivergenceTimeInGens <- N_1*4*0.6#
    DivergenceTimeInGens <- N_1*4*10#
    #AncestralTimeInGens <- N_1*4*0.1#
    AncestralTimeInGens <- N_1*4*0.0#
    BinLimitDivTime <- DivergenceTimeInGens/2000#
    BinLimitAncTime <- AncestralTimeInGens/2000#
    DivTimeMs <- DivergenceTime / (4*N_1)#
    AncTimeMs <- AncestralSampleTime / (4*N_1)#
    ########################################################
    VeryRecentMatrix[1,1] <- - 2*TwoN1Ancmig1 - 1#
    VeryRecentMatrix[1,2] <- 2*TwoN1Ancmig1#
    VeryRecentMatrix[1,4] <- 1#
    VeryRecentMatrix[2,1] <- TwoN2Ancmig2#
    VeryRecentMatrix[2,2] <- - TwoN2Ancmig2 - TwoN1Ancmig1#
    VeryRecentMatrix[2,3] <- TwoN1Ancmig1#
    VeryRecentMatrix[3,2] <- 2*TwoN2Ancmig2#
    VeryRecentMatrix[3,3] <- - 2*TwoN2Ancmig2 - 1 * N_1 / N_2#
    VeryRecentMatrix[3,5] <- 1 * N_1 / N_2#
    VeryRecentMatrix[4,4] <- -TwoN1Ancmig1#
    VeryRecentMatrix[4,5] <- TwoN1Ancmig1#
    VeryRecentMatrix[5,4] <- TwoN2Ancmig2#
    VeryRecentMatrix[5,5] <- -TwoN2Ancmig2#
    ########################################################
    Matrix[1,1] <- -4*TwoN1mig1 - 6#
    Matrix[1,2] <- 4*TwoN1mig1#
    Matrix[1,6] <- 6#
    Matrix[2,1] <- TwoN2mig2#
    Matrix[2,2] <- -TwoN2mig2 -3*TwoN1mig1 - 3#
    Matrix[2,3] <- 3 * TwoN1mig1#
    Matrix[2,7] <- 3#
    Matrix[3,2] <- 2*TwoN2mig2#
    Matrix[3,3] <- -2*TwoN2mig2 - 2*TwoN1mig1 - 1 * N_1 / N_2 - 1#
    Matrix[3,4] <- 2*TwoN1mig1#
    Matrix[3,7] <- 1 * N_1 / N_2#
    Matrix[3,8] <- 1#
    Matrix[4,3] <- 3*TwoN2mig2#
    Matrix[4,4] <- -3*TwoN2mig2 - TwoN1mig1 - 3* N_1 / N_2#
    Matrix[4,5] <- TwoN1mig1#
    Matrix[4,8] <- 3* N_1 / N_2#
    Matrix[5,4] <- 4*TwoN2mig2#
    Matrix[5,5] <- -4*TwoN2mig2 - 6 * N_1 / N_2#
    Matrix[5,9] <- 6 * N_1 / N_2#
    Matrix[6,6] <- - 3*TwoN1mig1 - 3#
    Matrix[6,7] <- 3*TwoN1mig1#
    Matrix[6,10] <- 3#
    Matrix[7,6] <- TwoN2mig2#
    Matrix[7,7] <- -TwoN2mig2 - 2*TwoN1mig1 - 1#
    Matrix[7,8] <- 2*TwoN1mig1#
    Matrix[7,11] <- 1#
    Matrix[8,7] <- 2*TwoN2mig2#
    Matrix[8,8] <- -2*TwoN2mig2 - TwoN1mig1 - 1 * N_1 / N_2#
    Matrix[8,9] <- TwoN1mig1#
    Matrix[8,11] <- 1 * N_1 / N_2#
    Matrix[9,8] <- 3*TwoN2mig2#
    Matrix[9,9] <- -3*TwoN2mig2 - 3 * N_1 / N_2#
    Matrix[9,12] <- 3 * N_1 / N_2#
    Matrix[10,10] <- - 2*TwoN1mig1 - 1#
    Matrix[10,11] <- 2*TwoN1mig1#
    Matrix[10,13] <- 1#
    Matrix[11,10] <- TwoN2mig2#
    Matrix[11,11] <- - TwoN2mig2 - TwoN1mig1#
    Matrix[11,12] <- TwoN1mig1#
    Matrix[12,11] <- 2*TwoN2mig2#
    Matrix[12,12] <- - 2*TwoN2mig2 - 1 * N_1 / N_2#
    Matrix[12,14] <- 1 * N_1 / N_2#
    Matrix[13,13] <- -TwoN1mig1#
    Matrix[13,14] <- TwoN1mig1#
    Matrix[14,13] <- TwoN2mig2#
    Matrix[14,14] <- -TwoN2mig2#
    ########################################################
    MiniMatrixTest[1,1] <- -6/0.4#
    MiniMatrixTest[1,2] <- 6/0.4#
    MiniMatrixTest[2,2] <- -3/0.4#
    MiniMatrixTest[2,3] <- 3/0.4#
    MiniMatrixTest[3,3] <- -1/0.4#
    MiniMatrixTest[3,4] <- 1/0.4#
    #### Get PDFs#
    print ("PDFs")#
    # T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    # TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,1000000,0,1000000,500,10000)#
    T3Distribution <- DistributionOfT3(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    T4Distribution <- DistributionOfT4(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    TreeTypeOne <- DistributionOfTreeTypes(VeryRecentMatrix,Matrix,MiniMatrixTest,200000,0,200000,200,10000)#
    ##### Tree tests#
    print ("Tree tests")#
    SumPathFrequency <- c()#
    for (i in 1:11){#
        SumPathFrequency <- c(SumPathFrequency,sum(TreeTypeOne[,i]))#
    }#
    # Before June 28, 2017#
    # MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequency.txt")#
    MatrixPathTreeFrequency <- read.table("MatrixPathTreeFrequencyTreeOrder.txt")#
    TreeSum <- c()#
    TreeSum <- rbind(TreeSum,SumPathFrequency[1]*(MatrixPathTreeFrequency$V1))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[2]*(MatrixPathTreeFrequency$V2))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[3]*(MatrixPathTreeFrequency$V3))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[4]*(MatrixPathTreeFrequency$V4))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[5]*(MatrixPathTreeFrequency$V5))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[6]*(MatrixPathTreeFrequency$V6))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[7]*(MatrixPathTreeFrequency$V7))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[8]*(MatrixPathTreeFrequency$V8))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[9]*(MatrixPathTreeFrequency$V9))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[10]*(MatrixPathTreeFrequency$V10))#
    TreeSum <- rbind(TreeSum,SumPathFrequency[11]*(MatrixPathTreeFrequency$V11))#
    FinalSum <- c()#
    for (i in 1:18){#
        FinalSum <- c(FinalSum,sum(TreeSum[,i]))#
    }#
    print ("Tree Mean T2")#
    T2MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(TreeTypeOne)){#
            T2MeanTimes[i] <- T2MeanTimes[i] + TreeTypeOne[j,i]/sum(TreeTypeOne[,i])*j#
        }#
    }#
    print ("Tree Mean T3")#
    T3MeanTimes <- c(0,0,0,0,0,0,0,0,0,0,0)#
    for (i in 1:11){#
        for (j in 1:nrow(T3Distribution)){#
            T3MeanTimes[i] <- T3MeanTimes[i] + T3Distribution[j,i]/sum(T3Distribution[,i])*j#
        }#
    }#
    print ("Tree Mean T4")#
    T4MeanTimes <- c(0,0,0,0,0)#
    for (i in 1:5){#
        for (j in 3:nrow(T4Distribution)){#
            T4MeanTimes[i] <- T4MeanTimes[i] + T4Distribution[j,i]/sum(T4Distribution[,i])*(j-2)#
        }#
    }#
    ConvertT4MeanTimes <- c(T4MeanTimes[2],T4MeanTimes[5],T4MeanTimes[4],T4MeanTimes[4],T4MeanTimes[3],T4MeanTimes[3],T4MeanTimes[2],T4MeanTimes[2],T4MeanTimes[1],T4MeanTimes[1],T4MeanTimes[1])#
    print ("Probabilities")#
    Probabilities <- c(0,0,0,0,0,0,0)#
    TotalSum <- 0#
    for (Paths in 1:8){#
        for (CurTree in 1:18){#
            TotalSum <- TotalSum + TreeSum[Paths,CurTree]#
            #        print (Paths)#
            #        print (CurTree)#
            #        print(TreeSum[Paths,CurTree])#
            if ((CurTree == 1) || (CurTree == 2)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 3)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 4) || (CurTree == 7) || (CurTree == 10) || (CurTree == 13)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 5) || (CurTree == 8) || (CurTree == 11) || (CurTree == 14)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 6) || (CurTree == 9) || (CurTree == 12) || (CurTree == 15)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T4 + T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * ((T2 - T3) + (T2 - T4))/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
            if ((CurTree == 16) || (CurTree == 17)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + T3 + T2 + (T2 - T3) + (T3 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2 * T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T3 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (T3 + T2)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
            }#
            if ((CurTree == 18)){#
                T2 <- T2MeanTimes[Paths]#
                T3 <- T3MeanTimes[Paths]#
                T4 <- ConvertT4MeanTimes[Paths]#
                Denominator <- 2*T4 + 2* T3 + (T2 - T3) + (T2 - T4)#
                Probabilities[1] <- Probabilities[1] + TreeSum[Paths,CurTree] * (2*T4)/Denominator#
                Probabilities[2] <- Probabilities[2] + TreeSum[Paths,CurTree] * (T2 - T4)/Denominator#
                Probabilities[3] <- Probabilities[3] + TreeSum[Paths,CurTree] * (2*T3)/Denominator#
                Probabilities[4] <- Probabilities[4] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[7] <- Probabilities[7] + TreeSum[Paths,CurTree] * (0)/Denominator#
                Probabilities[6] <- Probabilities[6] + TreeSum[Paths,CurTree] * (T2 - T3)/Denominator#
                Probabilities[5] <- Probabilities[5] + TreeSum[Paths,CurTree] * (0)/Denominator#
            }#
        }#
    }#
    ProbList <- rbind(ProbList,Probabilities)#
    Value <- ProportionTestValue$V1*log(Probabilities[1]) + ProportionTestValue$V2*log(Probabilities[2]) + ProportionTestValue$V3*log(Probabilities[3]) + ProportionTestValue$V4*log(Probabilities[4]) + ProportionTestValue$V5*log(Probabilities[5]) + ProportionTestValue$V6*log(Probabilities[6]) + ProportionTestValue$V7*log(Probabilities[7])#
    LL <- c(LL, Value)#
}#
pdf("PopSizeChangeRate.pdf")#
par(mar=c(4.1,5.1,4.1,2.1))#
plot(LL,type="o",xaxt='n',xlab=expression(N[2]/N[1]),cex=2,pch=19,cex.axis=2,cex.lab=2)#
arrows(3,LL[3]-10000,3,LL[3]-1000)#
axis(1,at=c(1,2,3,4,5,6,7,8),labels=c("0.01","0.05","0.1","0.5","1","5","10","50"),cex.axis=1.5)#
legend(1.2,LL[3]-8000,"True value",bty="n",cex=2)#
dev.off()
611*2
factorial(72)
factorial(2)
factorial(72-2)
6.123446e+103/1.197857e+100
5112*611
factorial(72)/factorial(70)
6.123446e+103/(2*1.197857e+100)
250*48
1174/25
1264/25
3433000000/20
3433000000/17
255/60
#### run the main function by typing:#
# success_rate = test_venter(rounds, n)#
#
#n is the number of people in each group#
#rounds is the number of simulation rounds.#
#success_rate is the identifiability power of demographic iddentifiers#
#
# The function runs a simple procedure that matches the Venter et al.#
# definition of identifiability.#
# In each round, the function genreates sex, age, and self-reported ethnicity labels#
# for n people according to the distributions of the Venter paper. #
# It then takes the first person to be the person of interest#
# and compares whether this person is unique in the n people. #
# If the combination of labels for this person is unique, it says: "Success!"#
#
# Venter had a team of 30 researchers that developed fancy face morphology predictions, #
# voice signatures, and many other sophisticated algorithms. Using the same success creterion, #
# they had a success rate of 80%.#
#
# You are about to test a procedure that uses age, sex, and ethnic group which are not protected by #
#HIPAA and took me less than an hour to develop. #
# Try running test_venter(1000, 10)#
# and see the success rate.#
library(reshape)#
freq <- function(x){#
  return (x/sum(x))#
}#
#
inverse_cdf<-function(cdf) {#
  p = runif(1, 0, 1)#
#
  for (i in 1:length(cdf)) {#
    if (p < cdf[i]) {#
        return (i)#
    }#
  }#
  return (length(cdf))#
}#
simulate_a_group_of_people<-function(n, rounds) {#
  take_n_people = c()#
  #let's generate a group of n people from Venter's cohort#
  for (i in 1:n){#
    sex_ethnicity_label = inverse_cdf(people.cdf)#
    age_label =  inverse_cdf(age.cdf)#
    final_label = paste(sex_ethnicity_label, age_label, sep='_')#
    take_n_people = rbind(take_n_people, final_label)#
  }#
  colnames(take_n_people)[1] <- 'labels' #the name of the column#
  return(take_n_people)#
}#
test_venter<-function(rounds, n) {#
  #rounds: the number of times to run the procedure#
  #n: the group of individuals to re-identify the sample#
  #lading data#
  male = c(381,	126,	39,	39,	8,	39)#
  female = c(188, 147, 24, 24, 10, 36)#
  people = data.frame(male,female)#
  row.names(people) = c('African', 'European','Latino','East Asian','South Asian', 'Other')#
  age = c(295, 190, 130, 90, 95, 120, 100, 35, 5, 1)#
  #calculating pdfs#
  people.freq = freq(people)#
  age.freq = freq(age)#
  people.freq_v = melt(people.freq) #table to a long vector#
  people.cdf = cumsum(people.freq_v$value)#
  age.cdf = cumsum(age.freq)#
  success = 0#
  #start sampling#
  for (i in 1:rounds){#
    #let draw n people from the distribution#
    a_group_of_people = (simulate_a_group_of_people(n))#
    our_person = a_group_of_people[1] # we decided arbitrarly that the person of interest is always first#
    z = length(grep(our_person, a_group_of_people))#
    if (z == 1) {#
      success = success + 1#
    }#
  }#
  return(success/rounds)#
}
test_venter(100,2)
s = test_venter(100,2)
1100/24
1070/23
1060/22
205*25
1160/21
45+89+183+125
2017-44
200*25
130*30
370*30
41638/12
41638/11
3785.273*12
700/12
600/12
636/11
626/11
600/11
580/11
580/9
10^-5
.00001
.0001
7000*.0001
514+111
625+282
907/5
407/5
700000/40000000
12/44
24/44
44/2
12627/44993
44993/12627
44993/2000
7780
5500 + 3300
119(31)
119*31
.0005
.0005 * 10000
60+3+1+1+2+2
3350-900
7800-3300
1200/26
10+29.58+27.01
10+29.58+27.01+76+48.75
191.34/2
10+27.01+76+48.75
161.76/2
551894/110379
551894/110378
11.0959/2
11.0959/10.5408
1+401+401+201
1+401+201
11.0959/10000
0.00110959*551894
4594*0.01088376
22970* 0.01088376
22970* 0.01088376/5
0.01088376/5
1200/17
110379*5
10000/6
100000/6
13/254
4680+150
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/ScriptsOctober22_2017/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims")#
#
#### Another table of probabilities#
#
AlphaGrid <- 0.01*1:30#
BetaGrid <- 5*1:70#
#
TwoNsValues <- 0:300*.5 + .25#
#
Table <- matrix(ncol=303,nrow=0)#
#
for (j in AlphaGrid){#
    for (k in BetaGrid){#
		Probability <- 0#
		Row <- c(j,k)#
		for (i in TwoNsValues){#
			if ( i == 0.25){#
				Probability <- pgamma(0.25,j,1/k)#
				Row <- c(Row,Probability)#
			}else if (i==150.25){#
				Probability <- ( 1 - pgamma(i-0.5,j,1/k) )#
				Row <- c(Row,Probability)#
			}else{#
				Probability <-(pgamma(i,j,1/k) - pgamma(i-0.5,j,1/k))#
				Row <- c(Row,Probability)#
			}#
		}#
		Table <- rbind(Table,Row)#
#print (Probability)#
    }#
}#
#
write.table(Table,file="AnotherTableOfProbabilities.txt",row.names=FALSE,col.names=FALSE,sep="\t")#
#
for (k in 1:2100){#
    print(sum(Table[k,3:303]))#
}
4600-900
