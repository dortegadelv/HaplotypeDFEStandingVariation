200/6
200/60
120000*3/20
10000*20
0.03031/0.01767
0.04735/0.02700
24000*20
480000/12
4.98-2.45
2*6
12
2*7
6*7
33.87/3
19.05/3
1/.003
20 + 3 +1 + 11 + 2 + 5 + 2 + 8 + 6 + 1
20 + 3 +1 + 11 + 2 + 5 + 2 + 8 + 3 + 1 + 6 + 15
1 + 6 + 8 + 2 + 5 + 2 + 11 + 1 + 3 + 20 + 1 + 8 + 3 + 1 + 2 + 6 + 15
1 + 6 + 8 + 2 + 5 + 2 + 11 + 1 + 3 + 20 + 1 + 8 + 3 + 1 + 2 + 6 + 15 + 7
183 -141
0.0001088376*2*4594
200*0.0001088376*2*4594
4594*5
22970/2
10000/60
39440*2
100*10
235*20
360*20
18000*20
22200*20
factorial(40)
1560*300
17121342/46800000
factorial(40)/(factorial(38)*factorial(2))
780*2
1560*2*275
factorial(72)/(factorial(70)*factorial(2))
2556*2
5112*275
13414669/42174000
1200/8
2112*25
2112*25*8
5112*25*8
5112*25
5112*25*8
996650/3067200
328040/1022400
60*5
300/24
989969/3021192
1109778/4217400
1029030/3113400
1109778/4217400
factorial(69)/(factorial(69)*factorial(2))
factorial(69)/(factorial(67)*factorial(2))
2346*2*25
1109778/4217400
1029030/3113400
1403925/4280138
14049643/42771654
1600*8
4200*6
4200*6 + 12
34*8
factorial(72)/(factorial(70)*2) * 2 * 275
factorial(72)/(factorial(70)*2) * 2 * 275 * 100 * 21
2952180000-2952180000
1424204-1405800
factorial(72)/(factorial(70)*2) * 2 * 275 * 100
142442998 - 140580000
factorial(73)/(factorial(71)*2) * 2 * 275 * 100
142442998*21
142442998*41
142387544 - 140580000
142387544*5
1424204-1405800
5*9*5
43+38+34+31+33+34+36+26
1700*4
6800+3000
22970*8
4594*8
pwd
18169*5
18169*8
10000*150
0.0460
22970*8
390*25
390*26
factorial(72)/(factorial(70)*2) * 2 * 275
factorial(73)/(factorial(71)*2) * 2 * 275
factorial(73)/(factorial(71)*2) * 2 * 275 * 100 * 5
factorial(72)/(factorial(70)*2) * 2 * 275 * 500
712784358 - 702900000
712784358 - 722700000
9194/1977933
1993286+441
0.01/25
4/10000
(0.1959-0-0447)/0.01959
(0.1959-0-0447)/0.1959
(0.1959-0.0447)/0.1959
4*10000*1.2e-8
4*10000*1.2e-8 * 500000
4*50000*1.2e-8 * 500000
9*30
100000/270
73-39
7242
7242/2
53*4+58
0.006
0.006/(12060579-12060301)
0.001/(12060163-12060114)
2^32
setwd("~/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts/")
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- Val - 30#
    LastPos <- Val + 30#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.055), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,11,21,31,41,51,61), labels = c("J - 30","J - 20", "J - 10", "J", "J + 10", "J + 20", "J + 30") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
.00005*4*5000
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- Val - 100#
    LastPos <- Val + 100#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.055), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,51,101,151,201), labels = c("J - 100","J - 50", "J", "J + 50", "J + 100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- Val - 100#
    LastPos <- Val + 100#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.55), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,51,101,151,201), labels = c("J - 100","J - 50", "J", "J + 50", "J + 100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- Val - 100#
    LastPos <- Val + 100#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.15), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,51,101,151,201), labels = c("J - 100","J - 50", "J", "J + 50", "J + 100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.15), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("J - 100","J - 50", "J", "J + 50", "J + 100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.15), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("-200","-100", "0", "50", "100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.25), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("-200","-100", "0", "50", "100") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.25), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("-200","-100", "0", "100", "200") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(here)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
for (j in 1:3){#
	print(DemScenario[j])#
	MaxFreq <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxFreq <- max(MaxFreq,Data$V2)#
		print(MaxFreq)#
	}#
	ListMaxFreq <- c(ListMaxFreq,MaxFreq)#
	MaxAge <- 0#
	TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTest[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Max <- max(density(Data$V1*Ne[j]*2,from=0,to=quantile(Data$V1*Ne[j]*2,0.99))$x)#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTest[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxAge <- max(MaxAge,(density(Data$V1*Ne[j]*2,from=0,to=Max)$y))#
		print(MaxAge)#
	}#
	ListMaxAge <- c(ListMaxAge,MaxAge)#
	MaxT2 <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxT2 <- max(MaxT2,Data$V2)#
		print(MaxT2)#
	}#
	ListMaxT2 <- c(ListMaxT2,MaxT2)	#
}#
############################################################################ Only three figures #
for (j in 1:1){#
	Plot <- paste("../Figures/SuppFigure2_AgeT2SelInference.pdf",sep="")#
	pdf(Plot,width=12,height=12)#
	par(mfrow=c(2,2))#
	par(mar=c(5,5,4,2) + 0.1)   #
#
############### Population scenarios#
#
	if (j==1 || j==2){#
		plot(c(100000,100000-5000,100000-5200,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Ancient Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
#
	if (j==9 || j==10){#
		plot(c(100000,100000-100,100000-300,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Recent Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
	if (j==5 || j==6){#
		plot(c(100000,100000-2000,100000-2200,100000-10000),c(5000,1000,5000,5000),type="s",xlim=c(100000-6000,100000),ylim=c(0,5000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Moderately Ancient Bottleneck Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(5000,1000),labels = c("5000","1000"),cex.axis=2)#
	}	#
	if (j==7 || j==8){#
	plot(c(100000,100000-100,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Population Expansion Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
	axis(1,at=c(100000,100000-100,100000-200,100000-300),labels = c("Present","100","200","300"),cex.axis=2)#
	axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2)#
	}#
	if (j==3 || j==4 || j==11){#
		plot(c(100000,100000-100,100000-10000),c(10000,10000,10000),type="s",xlim=c(100000-6000,100000),ylim=c(0,10000),ylab="Effective Population Size",xlab="Generations before the present",main="A) Constant Population Size Model",xaxt='n',yaxt='n',cex.main=2,cex.lab=2,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2)#
		axis(2,at=c(10000,0),labels = c("10000","0"),cex.axis=2)#
	}#
############## Trajectories#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	ColorViridis <- viridis(5)#
	ColorViridisAlpha <- viridis(5,alpha=0.6)#
	Color <- col2rgb("black")#
	if (j==7 || j==8){#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Generations before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[j]*1.3),main="B) Average Frequency Trajectory",xaxt="n",cex.lab=2,cex.main=2,cex.axis=2,lwd=6,col=ColorViridis[3])#
	}else{#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Generations before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[j]),main="B) Average Frequency Trajectory",xaxt="n",cex.lab=2,cex.main=2,cex.axis=2,lwd=6,col=ColorViridis[3])#
	}#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	if (j==7 || j==8){#
	abline(v=5000-100,lty=3,cex=3,lwd=3)#
	}#
	if (j==1 || j==2){#
		abline(v=5000-5000,lty=3,lwd=3)#
		abline(v=5000-5200,lty=3,lwd=3)#
	}#
	if (j==5 || j==6){#
		abline(v=5000-2000,lty=3,lwd=3)#
		abline(v=5000-2200,lty=3,lwd=3)#
	}#
	if (j==9 || j==10){#
		abline(v=5000-100,lty=3,cex=3,lwd=3)#
		abline(v=5000-300,lty=3,cex=3,lwd=3)#
	}#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[2],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[3],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[4],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],Selection[5],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
	if (j == 1 || j == 2 ){#
	legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}else if( j == 5){#
	legend(5000-1500,0.0078,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}else if( j == 6){#
		legend(5000-1600,0.0035,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}else if( j == 9){#
		legend(5000-1500,0.017,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}else if( j == 10){#
		legend(5000-1500,0.0065,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}else if (j == 7 || j == 8 ){#
		legend("topleft",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")	#
	}else if (j == 3 ||j == 4 ||j == 11){#
		legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(5000,4000,3000,2000,1000,0),labels=c("Present","1000","2000","3000","4000","5000"),cex.lab=2,cex.axis=2)#
	par(mar=c(5,5,4,2) + 0.1)   #
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[1],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("black")#
	axis.break(1, max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.2*(XLimFigureTwo[j]), style = "gap")#
#
	plot(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],xlab=expression(bold(T[2])),ylab="Probability",type="l",main=expression(bold(paste("C) ",T[2],sep=""))),ylim=c(-0.2*ListMaxT2[j],1.05*ListMaxT2[j]),xaxt="n",yaxt="n",cex.lab=2,cex.main=2,cex.axis=1.5,lwd=6,col=ColorViridis[3])#
#,ylim=c(0,1.0)#
	if (j==7 || j==8){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
	}#
	if (j==1 || j==2){#
#		abline(v=Data$V1[XLimFigureThree[j]]-5000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-5200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5000,0,Data$V1[XLimFigureThree[j]]-5000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5200,0,Data$V1[XLimFigureThree[j]]-5200,300,lty=3,lwd=3)#
#
	}#
	if (j==5 || j==6){#
#		abline(v=Data$V1[XLimFigureThree[j]]-2000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-2200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2000,0,Data$V1[XLimFigureThree[j]]-2000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2200,0,Data$V1[XLimFigureThree[j]]-2200,300,lty=3,lwd=3)#
#
	}#
	if (j==9 || j==10){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-300,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-300,0,Data$V1[XLimFigureThree[j]]-100,300,lty=3,lwd=3)#
#
	}#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.12*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.12*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[3],lwd=6)#
#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.12*ListMaxT2[j],pch=20,col=ColorViridis[3],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[2],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[2],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.08*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.08*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[2],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.08*ListMaxT2[j],pch=20,col=ColorViridis[2],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[3],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[1],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.04*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.04*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[1],lwd=6)#
#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.04*ListMaxT2[j],pch=20,col=ColorViridis[1],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[4],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[4],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.16*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.16*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[4],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.16*ListMaxT2[j],pch=20,col=ColorViridis[4],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[5],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V3[1:XLimFigureThree[j]],col=ColorViridis[5],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V3) - sum(Data$V1*Data$V3)*sum(Data$V1*Data$V3))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V3)-SD,-0.2*ListMaxT2[j],min(XLimFigureThree[j]- sum(Data$V1*Data$V3)+SD,XLimFigureThree[j]),-0.2*ListMaxT2[j], length=0.05, angle=90, code=3,col=ColorViridis[5],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V3),-0.2*ListMaxT2[j],pch=20,col=ColorViridis[5],cex=3)#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(XLimFigureThree[j]-700,XLimFigureThree[j]-600,XLimFigureThree[j]-500,XLimFigureThree[j]-400,XLimFigureThree[j]-300,XLimFigureThree[j]-200,XLimFigureThree[j]-100,XLimFigureThree[j]),labels=c("700","600","500","400","300","200","100","Present"),cex.lab=2,cex.axis=2)	#
	axis(2,at=c(0,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04),labels=c("0","0.005","0.01","0.015","0.02","0.025","0.03","0.035","0.04"),cex.lab=2,cex.axis=2)	#
	if (j==3){#
		Distribution4Ns0 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable0_N10000.txt")#
		Distribution4Ns5 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-5_N10000.txt")#
		Distribution4Ns10 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-10_N10000.txt")#
		Distribution4Ns50 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-50_N10000.txt")#
		Distribution4Ns100 <- read.table("InferenceOfSelection/SelectionNoRec_NewTable-100_N10000.txt")#
#		boxplot(Distribution4Ns0$V1,Distribution4Ns5$V1,Distribution4Ns10$V1,Distribution4Ns50$V1,Distribution4Ns100$V1,names=c("0","5","10","50","100"), main="D) Inference of selection",xlab="Actual 4Ns values",ylab="Estimated 4Ns values",ylim=c(0,150),cex.lab=2,cex.axis=2)#
#		abline(a=0,b=0,lty=2)#
#		abline(a=5,b=0,lty=2)#
#		abline(a=10,b=0,lty=2)#
#		abline(a=50,b=0,lty=2)#
#		abline(a=100,b=0,lty=2)#
	}#
	if (j==7){#
		DataMinus50 <- read.table("InferenceOfSelection/Selection-50_N10000.txt")#
		Data0 <- read.table("InferenceOfSelection/Selection0_N10000.txt")#
		DataPlus50 <- read.table("InferenceOfSelection/Selection50_N10000.txt")#
#		boxplot(DataMinus50$V1-100,Data0$V1-100,DataPlus50$V1-100,names=c("-50","0","50"),ylab="Estimated 4Ns values",xlab="Real 4Ns values", main="D) Inference of selection",cex.lab=2,cex.names=2,cex.axis=2)#
# "10,000 haplotype lenghts per point (100 points in total per 4Ns value)"#
#		abline(h=-50,lty=2)#
#		abline(h=0,lty=2)#
#		abline(h=50,lty=2)#
#	dev.off()#
	}#
    Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck0_N10000.txt")#
    Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck50_N10000.txt")#
    Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck100_N10000.txt")#
    Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck-50_N10000.txt")#
    Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionAncientBottleneck-100_N10000.txt")#
    beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="D) Inference of Selection",cex.axis=1.3,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
    abline(h=0,lty=3)#
    abline(h=-50,lty=3)#
    abline(h=50,lty=3)#
    abline(h=100,lty=3)#
    abline(h=-100,lty=3)#
	par(mar=c(0,0,5,0) + 0.1)#
#par(oma=c(0,0,0,0) + 0.1)#
#	Image <- readJPEG("PotentialPaperFigures/HaplotypeLengths/Slide1.jpg")#
#	plot(0.5,0.5,xaxt="n",yaxt="n",xlim=c(0,1.333333),ylim=c(0,1),main="D) The effect of selection on pairwise\n haplotypic identity by state lengths (L)",cex.main=2)#
#	rasterImage(Image,0.0,0.0,1.333333,1,bty="n")#
	dev.off()#
}
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/FigureS1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.25), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("-200","-100", "0", "100", "200") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
ViridisColors <- viridis(5)#
#
pdf("../Figures/SuppFigure1_ComparisonLDistributions.pdf")#
par(mar=c(5,7,5,4)+0.1)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
DataTableOne <- read.table ("../Results/ConstantPopSize/ImportanceSamplingSims/TableToTest.txt")#
DataTableTwo <- read.table ("../Results/PopExpansion/ImportanceSamplingSims/TableToTest.txt")#
#
Differences <- c()#
Pchs <- c(3, 4, 8, 9, 19)#
#
InitialValue <- c(103, 153, 203, 253, 303)#
# InitialValue <- c(103)#
for (Num in 1:5){#
    Val <- InitialValue[Num]#
    FirstPos <- 3#
    LastPos <- 403#
    Differences <- c()#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableOne[i,j] - DataTableOne[Val,j])#
    }#
    Differences <- c(Differences, CurDifferences)#
}#
#
DifferencesTableTwo <- c()#
#
for (i in FirstPos:LastPos){#
    print(i)#
    CurDifferences <- 0#
    for (j in 2:7){#
        CurDifferences <- CurDifferences + abs(DataTableTwo[i,j] - DataTableTwo[Val,j])#
    }#
    DifferencesTableTwo <- c(DifferencesTableTwo, CurDifferences)#
}#
if (Val == 103){#
    plot(DifferencesTableTwo, col=ViridisColors[Num], type = "b", lty= "dotdash", ylim = c(0,0.25), pch = Pchs[Num], ylab = "Absolute difference between probability distributions of L\n using 4Ns = J vs 4Ns = K", xaxt = "n", xlab = "Compared 4Ns value \'K\'")#
}else{#
    lines(DifferencesTableTwo, col = ViridisColors[Num], type = "b", lty= "dotdash", pch = Pchs[Num])#
}#
}#
#
axis(1, at = c(1,101,201,301,401), labels = c("-200","-100", "0", "100", "200") )#
legend("top", c("-100","-50","0","50","100"), col = ViridisColors , pch = c(3, 4, 8, 9, 19), title = "Focal 4Ns value \'J\'")#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
###########
#
Plot <- paste("../Figures/SuppFigure3_PopExpansionDifferentTimesSelInference.pdf",sep="")#
PlotC <- paste("../Figures/SuppFigureSX2_PopExpansionDifferentTimesSelInferenceCompressed.pdf",sep="")#
#
pdf(Plot, width = 7*5, height = 7*4)#
par(mfrow=c(4,5), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100GensAgo0_N10000.txt")#
Selection4Ns_50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100GensAgo50_N10000.txt")#
Selection4Ns_100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100GensAgo100_N10000.txt")#
Selection4Ns_Minus50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100GensAgo-50_N10000.txt")#
Selection4Ns_Minus100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100GensAgo-100_N10000.txt")#
#
Selection4Ns_0_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion1000GensAgo0_N10000.txt")#
Selection4Ns_50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion1000GensAgo50_N10000.txt")#
Selection4Ns_100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion1000GensAgo100_N10000.txt")#
Selection4Ns_Minus50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion1000GensAgo-50_N10000.txt")#
Selection4Ns_Minus100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion1000GensAgo-100_N10000.txt")#
#
Selection4Ns_0_10000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10000GensAgo0_N10000.txt")#
Selection4Ns_50_10000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10000GensAgo50_N10000.txt")#
Selection4Ns_100_10000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10000GensAgo100_N10000.txt")#
Selection4Ns_Minus50_10000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10000GensAgo-50_N10000.txt")#
Selection4Ns_Minus100_10000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10000GensAgo-100_N10000.txt")#
#
Selection4Ns_0_100000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100000GensAgo0_N10000.txt")#
Selection4Ns_50_100000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100000GensAgo50_N10000.txt")#
Selection4Ns_100_100000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100000GensAgo100_N10000.txt")#
Selection4Ns_Minus50_100000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100000GensAgo-50_N10000.txt")#
Selection4Ns_Minus100_100000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100000GensAgo-100_N10000.txt")#
plot(c(100000,100000-150,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Time before the present",main="A) Population Expansion \nModel",xaxt='n',yaxt='n',cex.main=2.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(100000,100000-150),labels = c("Present","100"),cex.axis=2.5)#
axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
beanplot(Selection4Ns_0_100Gens$V1-200,Selection4Ns_50_100Gens$V1-200,Selection4Ns_Minus50_100Gens$V1-200,Selection4Ns_100_100Gens$V1-200,Selection4Ns_Minus100_100Gens$V1-200,names=c("0","10","-10","20","-20"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main=" Inference of Selection\n(Expansion time = 100 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
#
beanplot(abs(Selection4Ns_0_100Gens$V1-200),abs(Selection4Ns_50_100Gens$V1-200),abs(Selection4Ns_Minus50_100Gens$V1-200),abs(Selection4Ns_100_100Gens$V1-200),abs(Selection4Ns_Minus100_100Gens$V1-200),names=c("0","10","-10","20","-20"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="Inference of Selection in terms of |4Ns| values\n(Expansion time = 100 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
#
############## Trajectories#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100GensAgo4Ns0.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    ColorViridis <- viridis(5)#
    ColorViridisAlpha <- viridis(5,alpha=0.6)#
    Color <- col2rgb("black")#
    MaxFreq <- max(Data$V2)#
#
    plot(Data$V1[10000:1],Data$V2[1:10000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(8200,10000),ylim=c(0,0.012),main="Average Frequency Trajectory\n(Expansion time = 100 generations ago)",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    abline(v=9900, lty = "dashed")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100GensAgo4Ns-50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("purple")#
    lines(Data$V1[10000:1],Data$V2[1:10000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100GensAgo4Ns-100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("orange")#
    lines(Data$V1[10000:1],Data$V2[1:10000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100GensAgo4Ns50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[10000:1],Data$V2[1:10000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100GensAgo4Ns100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[10000:1],Data$V2[1:10000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
legend("topleft",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
    axis(1,at=c(10000,9500,9000,8500,8000,0),labels=c("Present","500","1000","1500","2000","10000"),cex.lab=2,cex.axis=2.5)#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL100GensAgo.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(Min,Max), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="Probability Distribution of L\n(Expansion time = 100 generations ago)", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[2],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[1],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[4],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[5],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
plot(c(100000,100000-150,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Time before the present",main="B) Population Expansion \nModel",xaxt='n',yaxt='n',cex.main=2.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(100000,100000-150),labels = c("Present","1000"),cex.axis=2.5)#
axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
beanplot(Selection4Ns_0_1000Gens$V1-200,Selection4Ns_50_1000Gens$V1-200,Selection4Ns_Minus50_1000Gens$V1-200,Selection4Ns_100_1000Gens$V1-200,Selection4Ns_Minus100_1000Gens$V1-200,names=c("0","10","-10","20","-20"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection\n(Expansion time = 1000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
#
beanplot(abs(Selection4Ns_0_1000Gens$V1-200),abs(Selection4Ns_50_1000Gens$V1-200),abs(Selection4Ns_Minus50_1000Gens$V1-200),abs(Selection4Ns_100_1000Gens$V1-200),abs(Selection4Ns_Minus100_1000Gens$V1-200),names=c("0","10","-10","20","-20"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="Inference of Selection in terms of |4Ns| values\n(Expansion time = 1000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
############## Trajectories#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion1000GensAgo4Ns0.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    ColorViridis <- viridis(5)#
    ColorViridisAlpha <- viridis(5,alpha=0.6)#
    Color <- col2rgb("black")#
    MaxFreq <- max(Data$V2)#
#
    plot(Data$V1[10000:1],Data$V2[1:10000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(0,10000),ylim=c(0,0.013),main="Average Frequency Trajectory\n(Expansion time = 1000 generations ago)",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
abline(v=9000, lty = "dashed")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion1000GensAgo4Ns-50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("purple")#
    lines(Data$V1[10000:1],Data$V2[1:10000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion1000GensAgo4Ns-100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("orange")#
    lines(Data$V1[10000:1],Data$V2[1:10000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion1000GensAgo4Ns50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[10000:1],Data$V2[1:10000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion1000GensAgo4Ns100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[10000:1],Data$V2[1:10000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
legend("topleft",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
    axis(1,at=c(10000,8000,6000,4000,2000,0),labels=c("Present","2000","4000","6000","8000","10000"),cex.lab=2,cex.axis=2.5)#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL1000GensAgo.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(Min,Max), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="Probability Distribution of L\n(Expansion time = 1000 generations ago)", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[2],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[1],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[4],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[5],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
plot(c(100000,100000-150,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Time before the present",main="C) Population Expansion \nModel",xaxt='n',yaxt='n',cex.main=2.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(100000,100000-150),labels = c("Present","10000"),cex.axis=2.5)#
axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
beanplot(Selection4Ns_0_10000Gens$V1-200,Selection4Ns_50_10000Gens$V1-200,Selection4Ns_Minus50_10000Gens$V1-200,Selection4Ns_100_10000Gens$V1-200,Selection4Ns_Minus100_10000Gens$V1-200,names=c("0","10","-10","20","-20"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection\n(Expansion time = 10000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
#
beanplot(abs(Selection4Ns_0_10000Gens$V1-200), abs(Selection4Ns_50_10000Gens$V1-200),abs(Selection4Ns_Minus50_10000Gens$V1-200),abs(Selection4Ns_100_10000Gens$V1-200),abs(Selection4Ns_Minus100_10000Gens$V1-200),names=c("0","10","-10","20","-20"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="Inference of Selection in terms of |4Ns| values\n(Expansion time = 10000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
############## Trajectories#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion10000GensAgo4Ns0.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    ColorViridis <- viridis(5)#
    ColorViridisAlpha <- viridis(5,alpha=0.6)#
    Color <- col2rgb("black")#
    MaxFreq <- max(Data$V2)#
#
    plot(Data$V1[20000:1],Data$V2[1:20000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(0,20000),ylim=c(0,0.011),main="Average Frequency Trajectory\n(Expansion time = 10000 generations ago)",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
abline(v=10000, lty = "dashed")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion10000GensAgo4Ns-50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("purple")#
    lines(Data$V1[20000:1],Data$V2[1:20000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion10000GensAgo4Ns-100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("orange")#
    lines(Data$V1[20000:1],Data$V2[1:20000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion10000GensAgo4Ns50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[20000:1],Data$V2[1:20000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion10000GensAgo4Ns100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[20000:1],Data$V2[1:20000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
legend("topleft",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
    axis(1,at=c(20000,16000,12000,8000,4000,0),labels=c("Present","4000","8000","12000","16000","20000"),cex.lab=2,cex.axis=2.5)#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL10000GensAgo.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(Min,Max), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="Probability Distribution of L\n(Expansion time = 10000 generations ago)", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[2],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[1],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[4],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[5],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
plot(c(100000,100000-150,100000-1000),c(50000,5000,5000),type="s",xlim=c(100000-300,100000),ylim=c(0,50000),ylab="Effective Population Size",xlab="Time before the present",main="D) Population Expansion \nModel",xaxt='n',yaxt='n',cex.main=2.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(100000,100000-150),labels = c("Present","100000"),cex.axis=2.5)#
axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
#
beanplot(Selection4Ns_0_100000Gens$V1-200,Selection4Ns_50_100000Gens$V1-200,Selection4Ns_Minus50_100000Gens$V1-200,Selection4Ns_100_100000Gens$V1-200,Selection4Ns_Minus100_100000Gens$V1-200,names=c("0","10","-10","20","-20"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection\n(Expansion time = 100000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
#
beanplot(abs(Selection4Ns_0_100000Gens$V1-200),abs(Selection4Ns_50_100000Gens$V1-200),abs(Selection4Ns_Minus50_100000Gens$V1-200),abs(Selection4Ns_100_100000Gens$V1-200),abs(Selection4Ns_Minus100_100000Gens$V1-200),names=c("0","10","-10","20","-20"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="Inference of Selection in terms of |4Ns| values\n(Expansion time = 100000 generations ago)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, -20, -10, 0, 10, 20, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=10,lty=3)#
abline(h=-10,lty=3)#
abline(h=20,lty=3)#
abline(h=-20,lty=3)#
############## Trajectories#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100000GensAgo4Ns0.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    ColorViridis <- viridis(5)#
    ColorViridisAlpha <- viridis(5,alpha=0.6)#
    Color <- col2rgb("black")#
    MaxFreq <- max(Data$V2)#
#
    plot(Data$V1[20000:1],Data$V2[1:20000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(0,20000),ylim=c(0,0.011),main="Average Frequency Trajectory\n(Expansion time = 100000 generations ago)",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100000GensAgo4Ns-50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("purple")#
    lines(Data$V1[20000:1],Data$V2[1:20000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100000GensAgo4Ns-100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    Color <- col2rgb("orange")#
    lines(Data$V1[20000:1],Data$V2[1:20000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100000GensAgo4Ns50.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[20000:1],Data$V2[1:20000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
    TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTrajPopExpansion100000GensAgo4Ns100.txt",sep="")#
    Data <- read.table(TrajectoryFile)#
    lines(Data$V1[20000:1],Data$V2[1:20000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
legend("topleft",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
    axis(1,at=c(20000,16000,12000,8000,4000,0),labels=c("Present","4000","8000","12000","16000","20000"),cex.lab=2,cex.axis=2.5)#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL100000GensAgo.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(Min,Max), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="Probability Distribution of L\n(Expansion time = 100000 generations ago)", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[2],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[1],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[4],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[5],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-20","-10","0","10","20"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
dev.off()#
#
# pdf_compress(Plot, output = PlotC, gs_quality = "printer")
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
###########
#
Plot <- paste("../Figures/SuppFigure4_PopExpansionTwoModels.pdf",sep="")#
#
pdf(Plot, width = 7*2, height = 7*2)#
par(mfrow=c(2,2), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI0_N10000.txt")#
Selection4Ns_50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI50_N10000.txt")#
Selection4Ns_100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI100_N10000.txt")#
Selection4Ns_Minus50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-50_N10000.txt")#
Selection4Ns_Minus100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-100_N10000.txt")#
#
Selection4Ns_0_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU0_N10000.txt")#
Selection4Ns_50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU50_N10000.txt")#
Selection4Ns_100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU100_N10000.txt")#
Selection4Ns_Minus50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-50_N10000.txt")#
Selection4Ns_Minus100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-100_N10000.txt")#
#
PopulationSizes <- c(33000, 99000, 33000, 330000, 330000)#
PopulationSizes <- PopulationSizes / 2#
Times <- c(264000,10000, 3133, 200 , 200 )#
Sums <- c()#
CurrentSum <- 0#
for (i in 1:length(Times)){#
    Sums <- c(Sums,CurrentSum)#
    CurrentSum <- CurrentSum + Times[i]#
}#
#
plot(Sums,PopulationSizes,type="s",xlim = c(CurrentSum-14000, CurrentSum),ylab="Effective Population Size",xlab="Time before the present",main="A) Demographic Model of Yoruba\nSchiffels and Durbin (2014) Nature Genetics model",xaxt= "n",cex.axis=2,cex.main=1.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(CurrentSum,CurrentSum-3533,CurrentSum-13533),labels = c("Present","3333","13333"),cex.axis=2.5)#
# axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
#
beanplot(Selection4Ns_0_100Gens$V1-200,Selection4Ns_50_100Gens$V1-200,Selection4Ns_Minus50_100Gens$V1-200,Selection4Ns_100_100Gens$V1-200,Selection4Ns_Minus100_100Gens$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main=" Inference of Selection\nSchiffels and Durbin (2014) Nature Genetics model",cex.axis=2.2,cex.lab=2.5,cex.main=1.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, 0, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, 0, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
PopulationSizes <- c(14620, 28948, 32326, 38110, 44932 , 52972 , 62452, 73630 , 86806 , 102342 , 120658 , 142250 , 167708, 197722, 233108 , 274826 , 324010 , 381998 , 450362 , 530962 , 625984, 738014, 834302, 834302)#
PopulationSizes <- PopulationSizes / 2#
Times <- c(116960, 5715, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5 )#
Sums <- c()#
CurrentSum <- 0#
for (i in 1:length(Times)){#
    Sums <- c(Sums,CurrentSum)#
    CurrentSum <- CurrentSum + Times[i]#
}#
#
plot(Sums,PopulationSizes,type="s",xlim = c(122875-250, 122875),ylab="Effective Population Size",xlab="Time before the present",main="B) Demographic Model in Africans\nTennessen et al (2012) Science model ",xaxt= "n",cex.main=1.5,cex.lab=2.5,cex.axis=2,col="red",lwd=6)#
axis(1,at=c(CurrentSum-5,CurrentSum-110,CurrentSum-210),labels = c("Present","105","205"),cex.axis=2.5)#
# axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
# abline(h=834302)#
#
beanplot(Selection4Ns_0_1000Gens$V1-200,Selection4Ns_50_1000Gens$V1-200,Selection4Ns_Minus50_1000Gens$V1-200,Selection4Ns_100_1000Gens$V1-200,Selection4Ns_Minus100_1000Gens$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection\nTennessen et al (2012) Science model",cex.axis=2.2,cex.lab=2.5,cex.main=1.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, 0, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, 0, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
dev.off()#
#
# pdf_compress(Plot, output = PlotC, gs_quality = "printer")
1668.604/(250000)
1668.604/(250000*330000*2)
1668.605/(250000*330000*2)
1320/(250000*330000*2)
1584/(250000*330000*2)
1584/(330000*2)
1584/(330000*2*1.2e-8)
200000
1584/(330000*2*200000)
1668.604/(834302*2*1.2e-8)
2002.3248/(834302*2*1e-8)
2002.3248/(834302*2*1.2e-8)
100000
1668.604/(2*834302*1.2e-8)
1668.604/(2*834302*1e-8)
10000
100000
1320/(2*330000*1e-8)
660/(2*330000*1e-8)
100000
1.2e-8*1.2e-8
0.001515152*2*33000
0.005*4*5000
0.0025*4*1000
0.0025*4*10000
0.005*4*5000
0.01088376*2*4594
0.005441881*2*4594
0.0027209*2*4594
0.0001088376*25
25-24.99963
0.0001088376*25
0.0001088376*50
0.00544188*2*4594
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
###########
#
Plot <- paste("../Figures/SuppFigure4_PopExpansionTwoModels.pdf",sep="")#
#
pdf(Plot, width = 7*2, height = 7*2)#
par(mfrow=c(2,2), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI0_N10000.txt")#
Selection4Ns_50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI50_N10000.txt")#
Selection4Ns_100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI100_N10000.txt")#
Selection4Ns_Minus50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-50_N10000.txt")#
Selection4Ns_Minus100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-100_N10000.txt")#
#
Selection4Ns_0_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU0_N10000.txt")#
Selection4Ns_50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU50_N10000.txt")#
Selection4Ns_100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU100_N10000.txt")#
Selection4Ns_Minus50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-50_N10000.txt")#
Selection4Ns_Minus100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-100_N10000.txt")#
#
PopulationSizes <- c(33000, 99000, 33000, 330000, 330000)#
PopulationSizes <- PopulationSizes / 2#
Times <- c(264000,10000, 3133, 200 , 200 )#
Sums <- c()#
CurrentSum <- 0#
for (i in 1:length(Times)){#
    Sums <- c(Sums,CurrentSum)#
    CurrentSum <- CurrentSum + Times[i]#
}#
#
plot(Sums,PopulationSizes,type="s",xlim = c(CurrentSum-14000, CurrentSum),ylab="Effective Population Size",xlab="Time before the present",main="A) Demographic Model of Yoruba\nSchiffels and Durbin (2014) Nature Genetics model",xaxt= "n",cex.axis=2,cex.main=1.5,cex.lab=2.5,col="red",lwd=6)#
axis(1,at=c(CurrentSum,CurrentSum-3533,CurrentSum-13533),labels = c("Present","3333","13333"),cex.axis=2.5)#
# axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
#
beanplot(Selection4Ns_0_100Gens$V1-200,Selection4Ns_50_100Gens$V1-200,Selection4Ns_Minus50_100Gens$V1-200,Selection4Ns_100_100Gens$V1-200,Selection4Ns_Minus100_100Gens$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main=" Inference of Selection\nSchiffels and Durbin (2014) Nature Genetics model",cex.axis=2.2,cex.lab=2.5,cex.main=1.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, 0, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, 0, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
PopulationSizes <- c(14620, 28948, 32326, 38110, 44932 , 52972 , 62452, 73630 , 86806 , 102342 , 120658 , 142250 , 167708, 197722, 233108 , 274826 , 324010 , 381998 , 450362 , 530962 , 625984, 738014, 834302, 834302)#
PopulationSizes <- PopulationSizes / 2#
Times <- c(116960, 5715, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5 )#
Sums <- c()#
CurrentSum <- 0#
for (i in 1:length(Times)){#
    Sums <- c(Sums,CurrentSum)#
    CurrentSum <- CurrentSum + Times[i]#
}#
#
plot(Sums,PopulationSizes,type="s",xlim = c(122875-250, 122875),ylab="Effective Population Size",xlab="Time before the present",main="B) Demographic Model in Africans\nTennessen et al (2012) Science model ",xaxt= "n",cex.main=1.5,cex.lab=2.5,cex.axis=2,col="red",lwd=6)#
axis(1,at=c(CurrentSum-5,CurrentSum-110,CurrentSum-210),labels = c("Present","105","205"),cex.axis=2.5)#
# axis(2,at=c(5000,50000),labels = c("5000","50000"),cex.axis=2.5)#
# abline(h=834302)#
#
beanplot(Selection4Ns_0_1000Gens$V1-200,Selection4Ns_50_1000Gens$V1-200,Selection4Ns_Minus50_1000Gens$V1-200,Selection4Ns_100_1000Gens$V1-200,Selection4Ns_Minus100_1000Gens$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection\nTennessen et al (2012) Science model",cex.axis=2.2,cex.lab=2.5,cex.main=1.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, yaxt='n')#
axis(2, at=c(-200, -150, -100, -50, 0, 50, 100, 150, 200), labels = c(-200, -150, -100, -50, 0, 50, 100, 150, 200), cex.axis = 2)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
dev.off()#
#
# pdf_compress(Plot, output = PlotC, gs_quality = "printer")
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")
DFEPars[1,]
DFEPars[1,203]
0.005*1000000
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")
nrow(SelectionCoefficientListBoyko)
319.8626 * 5
max(SelectionCoefficientListBoyko)
0.01254949*20000
200*2.5
319.8626 * 5 /20
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoykoWeak.txt")
nrow(SelectionCoefficientListBoyko)
library(here)#
library(viridis)#
#
################################################### Two plots on same place #############################
#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 5 /20#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*1000*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoykoWeak.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*1000*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse5000.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns/ (NumberOfAllelesAt2Ns*2)#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:36] / Probabilities_At_One_Percent_Given_2NsMouse[1:36]#
#
Labels <- c()#
for (i in 1:36){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","250",sep="")#
Labels <- c("0-5","50-55","100-150","150-155","200-205",Label)#
#
pdf("../Figures/SuppFigure5_DFEStandingToNewVariationWeakBoyko30.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1], xlim = c(0,51), ylim=c(0,0.7),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse5000.txt")#
#
TotalAlleleNumber <- ((80000 + (100000/10000)*100)*2500*1000)*2#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
LastAlleleNumber <- (1-pgamma(90,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)*2#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:36],sum(Counts_At_OnePercent_Given2Ns[37:200]))/ c((NumberOfAllelesAt2Ns[1:36]*2),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:36],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:36]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:37] / Probabilities_At_One_Percent_Given_2NsMouse[1:37]#
#
ProbsMouse <- ProbsMouse[1:37] / sum (ProbsMouse[1:37] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","250",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:30){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:30]), 1 - sum(FirstProbsMouse[1:30]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])))#
#
for ( i in 1:3){#
    for (j in 1:31){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-105",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5, 153.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((100000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoykoLongBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((100000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((100000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouseLongBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns/ (NumberOfAllelesAt2Ns)#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure6_DFEStandingToNewVariationBarPlotAltLongBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouseLongBurnIn.txt")#
#
TotalAlleleNumber <- ((100000 + (100000/10000)*100)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((100000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS3LongBurnIn.txt",row.names = FALSE)
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((120000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoykoLongerBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((120000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((120000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouseLongerBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns/ (NumberOfAllelesAt2Ns)#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure6_DFEStandingToNewVariationBarPlotAltLongerBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouseLongerBurnIn.txt")#
#
TotalAlleleNumber <- ((120000 + (100000/10000)*100)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.005#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((120000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS3LongerBurnIn.txt",row.names = FALSE)
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:200)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure6_DFEStandingToNewVariationBarPlotAltConstant.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TotalAlleleNumber <- ((160000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4Constant.txt",row.names = FALSE)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((180000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeBoykoLongBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((180000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((180000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:250)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure6_DFEStandingToNewVariationBarPlotAltConstantLongBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongBurnIn.txt")#
#
TotalAlleleNumber <- ((180000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:250),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((180000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:250]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4ConstantLongBurnIn.txt",row.names = FALSE)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((200000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeBoykoLongerBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((200000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((200000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongerBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:200)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure6_DFEStandingToNewVariationBarPlotAltConstantLongerBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongerBurnIn.txt")#
#
TotalAlleleNumber <- ((200000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((200000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4ConstantLongerBurnIn.txt",row.names = FALSE)
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:200)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure7_DFEStandingToNewVariationBarPlotAltConstant.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TotalAlleleNumber <- ((160000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4Constant.txt",row.names = FALSE)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((180000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeBoykoLongBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((180000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((180000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:250)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure7_DFEStandingToNewVariationBarPlotAltConstantLongBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongBurnIn.txt")#
#
TotalAlleleNumber <- ((180000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:250),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((180000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:250]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4ConstantLongBurnIn.txt",row.names = FALSE)
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
library(here)#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((200000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeBoykoLongerBurnIn.txt")#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((200000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((200000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
### P (allele is 2Ns = x | allele is at 1%)#
## This comes from running Results/#
#
Alpha = 0.190915110603425#
Beta = 29.1767603378041#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
for (i in 1:200){#
    UpperBound <- i*5#
    LowerBound <- (i-1)*5#
    CurrentSum <- (sum(FourNs < UpperBound) - sum(FourNs < LowerBound))/nrow(SelectionCoefficientListBoyko)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongerBurnIn.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(2.5*0:200)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
###### The whole stuff#
#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent * P_allele_at_OnePercent#
#
ProbsMouse <- ProbsMouse[1:20] / Probabilities_At_One_Percent_Given_2NsMouse[1:20]#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
#
pdf("../Figures/SuppFigure7_DFEStandingToNewVariationBarPlotAltConstantLongerBurnIn.pdf",width=10,height = 3.5)#
par(mar=c(4.1,5.1,0.6,2.1))#
par(mfrow = c(1,1))#
#
# plot(1:51,c(P_Allele_Is_2Ns[1:50], 1 - sum(P_Allele_Is_2Ns[1:50])),col=ColorViridis[1],ylim=c(0,0.67),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "",cex.main = 2,pch=19)#
# lines(1:51,c(ProbsMouse[1:50], 1 - sum(ProbsMouse[1:50])),col=ColorViridis[2],lwd=3)#
# lines(1:51,c(P_Allele_Is_2Ns_given_OnePercent[1:50],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:50])),col=ColorViridis[4],lwd=3)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=1)#
# axis(1, at=c(1:51), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31,41,51), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#dev.off()#
FirstProbsMouse <- ProbsMouse#
##################################### Another try on the mouse ######################################
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantPopSizeMouseLongerBurnIn.txt")#
#
TotalAlleleNumber <- ((200000)*2500*1000)#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Check <- hist(TwoNsValues,breaks=c(2.5*0:200),plot=FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
LastAlleleNumber <- (1-pgamma(50,Alpha,scale=Beta))* ((200000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:20],sum(Counts_At_OnePercent_Given2Ns[21:200]))/ c((NumberOfAllelesAt2Ns[1:20]),LastAlleleNumber )#
###### The whole stuff#
#
ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:20]))#
#ProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:20])#
#
ProbsMouse <- ProbsMouse[1:21] / Probabilities_At_One_Percent_Given_2NsMouse[1:21]#
#
ProbsMouse <- ProbsMouse[1:21] / sum (ProbsMouse[1:21] )#
#
Labels <- c()#
for (i in 1:37){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","100",sep="")#
Labels <- c(Labels,Label)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
for (i in 4:20){#
    counts <- cbind(counts,c(P_Allele_Is_2Ns[i], FirstProbsMouse[i], P_Allele_Is_2Ns_given_OnePercent[i]))#
}#
counts[1,1] <- P_Allele_Is_2Ns[1]#
counts[1,2] <- P_Allele_Is_2Ns[2]#
counts[1,3] <- P_Allele_Is_2Ns[3]#
counts[2,1] <- FirstProbsMouse[1]#
counts[2,2] <- FirstProbsMouse[2]#
counts[2,3] <- FirstProbsMouse[3]#
# counts[3,1] <- ProbsMouse[1]#
# counts[3,2] <- ProbsMouse[2]#
# counts[3,3] <- ProbsMouse[3]#
counts[3,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[3,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[3,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts <- cbind(counts,c(1-sum(P_Allele_Is_2Ns[1:20]), 1 - sum(FirstProbsMouse[1:20]), 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])))#
#
for ( i in 1:3){#
    for (j in 1:21){#
        if (counts[i,j] <= 1e-8){#
            counts[i,j] = 1e-5#
        }#
    }#
}#
#
# rownames(counts) <- c(expression("Real P("*bolditalic(s[j])*" | DFE, D)"), expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 4"),expression("Inferred P("*bolditalic(s[j])*" | DFE, D)  Equation 5"), expression("P("*bolditalic(s[j])*" | 1%, DFE, D)"))#
#
Label <- paste(">","100",sep="")#
Labels <- c("0-5","50-55",Label)#
barplot(log10(counts)-log10(0.00001), main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi]* "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
#
axis (2,at=c(0,1,2,3,4,5), labels = c(0,10^-4,10^-3,10^-2,10^-1,10^0), cex.axis = 0.8)#
#
axis(1, at=c(3.5, 53.5, 103.5), labels=Labels,cex.lab=1,cex=1,cex.axis=1,col.ticks="red")#
#pdf("DifferencesActualDistMouseNew.pdf",width=14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
#
#plot(1:21,c(P_Allele_Is_2Ns[1:20], 1 - sum(P_Allele_Is_2Ns[1:20])),col=ColorViridis[1],ylim=c(0,0.8),xaxt="n",ylab="Probability",xlab="4Ns",lwd=3,cex.lab=2,cex.axis=2,cex.lab=2, main = "B)",cex.main = 2,pch=19)#
#lines(1:51,c(ProbsMouse[1:50],1-sum(ProbsMouse[1:50])),col=ColorViridis[3],lwd=3, lty=2)#
#lines(1:21,c(P_Allele_Is_2Ns_given_OnePercent[1:20], 1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:20])) ,col=ColorViridis[3],lwd=3)#
Expression <- expression("Real " ~ 'P'[psi] ~ "(bolditalic(s[j]), | DFE, D)")#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression3 <- expression(paste("P(",bolditalic(s[j])," | 1%, DFE, D)"))#
#legend("top",c(Expression, Expression2, Expression3),pch=19,col=ColorViridis,cex=1)#
#axis(1, at=c(1:21), labels=Labels,cex.lab=1,cex=1,cex.axis=1)#
dev.off()#
#
ResultsConcatenated <- c(P_allele_at_OnePercent,Probabilities_At_One_Percent_Given_2NsMouse[1:21], P_allele_at_OnePercent /Probabilities_At_One_Percent_Given_2NsMouse[1:21] )#
#
write.table(ResultsConcatenated, file = "../Figures/FiguresTableS4ConstantLongerBurnIn.txt",row.names = FALSE)
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:40){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure8_DFEf_toDFEOn100Sims.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- PartOne#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(log10(counts) - log10(0.0000000001), main="A) Constant Size - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,12), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 2 ################################################################################################################## #
#
ColorViridis <- viridis(3)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
    counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- rbind(BoykoParams, PartOne)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
barplot(log10(counts) - log10(0.0000000001), main="B) Constant Size - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 3 ###################################################################################################################
ColorViridis <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
MLE <- read.table("../Results/MLEDFEs/PopExpansionBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
    counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- rbind(BoykoParams, PartOne)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(log10(counts) - log10(0.0000000001), main="C) Population expansion - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
###################################### Plot 4 ###################################################################################################################
#
ColorViridis <- viridis(4)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/PopExpansionMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
    counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- rbind(BoykoParams, PartOne)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
barplot(log10(counts) - log10(0.0000000001), main="D) Population expansion - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
dev.off()#
############################################################################### Full data  ##################################################################################
#
TotalDifferences <- matrix(nrow=100,ncol=21)#
for (i in 1:100){#
    for (j in 1:21){#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
    }#
}#
#
expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")")#
#
pdf("../Figures/SuppFigureSX6_BeanplotDifferences.pdf",width=10,height = 14)#
par(mar=c(5.1,6.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], TotalDifferences[,4], TotalDifferences[,5], TotalDifferences[,6], TotalDifferences[,7], TotalDifferences[,8],  TotalDifferences[,9], TotalDifferences[,10], TotalDifferences[,11], TotalDifferences[,12], TotalDifferences[,13], TotalDifferences[,14], TotalDifferences[,15], TotalDifferences[,16], TotalDifferences[,17], TotalDifferences[,18], TotalDifferences[,19], TotalDifferences[,20], TotalDifferences[,21], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
#
for (i in 101:200){#
    for (j in 1:21){#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i-100,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
    }#
}#
#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], TotalDifferences[,4], TotalDifferences[,5], TotalDifferences[,6], TotalDifferences[,7], TotalDifferences[,8],  TotalDifferences[,9], TotalDifferences[,10], TotalDifferences[,11], TotalDifferences[,12], TotalDifferences[,13], TotalDifferences[,14], TotalDifferences[,15], TotalDifferences[,16], TotalDifferences[,17], TotalDifferences[,18], TotalDifferences[,19], TotalDifferences[,20], TotalDifferences[,21], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
#
for (i in 201:300){#
    for (j in 1:21){#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i-200,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
    }#
}#
#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], TotalDifferences[,4], TotalDifferences[,5], TotalDifferences[,6], TotalDifferences[,7], TotalDifferences[,8],  TotalDifferences[,9], TotalDifferences[,10], TotalDifferences[,11], TotalDifferences[,12], TotalDifferences[,13], TotalDifferences[,14], TotalDifferences[,15], TotalDifferences[,16], TotalDifferences[,17], TotalDifferences[,18], TotalDifferences[,19], TotalDifferences[,20], TotalDifferences[,21], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
#
for (i in 301:400){#
    for (j in 1:21){#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i-300,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
    }#
}#
#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], TotalDifferences[,4], TotalDifferences[,5], TotalDifferences[,6], TotalDifferences[,7], TotalDifferences[,8],  TotalDifferences[,9], TotalDifferences[,10], TotalDifferences[,11], TotalDifferences[,12], TotalDifferences[,13], TotalDifferences[,14], TotalDifferences[,15], TotalDifferences[,16], TotalDifferences[,17], TotalDifferences[,18], TotalDifferences[,19], TotalDifferences[,20], TotalDifferences[,21], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
#
dev.off()
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(5)#
ViridisColors <- viridis(5)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:40){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure8_DFEf_toDFEOn100Simsdadi.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.4)#
#
barplot(log10(counts) - log10(0.0000000001), main="A) Constant Size - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"),  expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with fitdadi. Full SFS with between 300-500 1% frequency variants"),  expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with fitdadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with our method using data from 300 1% frequency variants"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *") with our method using data from 300 1% frequency variants")), beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,12), yaxt="n",cex = 0.5)#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, log10(UpQuantile[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(LowQuantile[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(Meandadi[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, log10(UpQuantile[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(LowQuantile[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(Meandadi[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, log10(UpQuantileSmall[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(LowQuantileSmall[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(MeandadiSmall[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, log10(UpQuantileSmall[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(LowQuantileSmall[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(MeandadiSmall[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 2 ################################################################################################################## #
#
ColorViridis <- viridis(3)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) dadi", "Inferred P(4Ns| 1%, DFE, D)")#
barplot(log10(counts) - log10(0.0000000001), main="B) Constant Size - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, log10(UpQuantile[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(LowQuantile[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(Meandadi[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, log10(UpQuantile[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(LowQuantile[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(Meandadi[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, log10(UpQuantileSmall[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(LowQuantileSmall[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(MeandadiSmall[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, log10(UpQuantileSmall[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(LowQuantileSmall[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(MeandadiSmall[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
###################################### Plot 3 ###################################################################################################################
ColorViridis <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
MLE <- read.table("../Results/MLEDFEs/PopExpansionBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(log10(counts) - log10(0.0000000001), main="C) Population expansion - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, log10(UpQuantile[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(LowQuantile[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(Meandadi[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, log10(UpQuantile[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(LowQuantile[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(Meandadi[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, log10(UpQuantileSmall[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(LowQuantileSmall[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(MeandadiSmall[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, log10(UpQuantileSmall[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(LowQuantileSmall[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(MeandadiSmall[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
###################################### Plot 4 ###################################################################################################################
#
ColorViridis <- viridis(4)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/PopExpansionMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(log10(counts) - log10(0.0000000001), main="D) Population expansion - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, log10(UpQuantile[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(LowQuantile[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, log10(Meandadi[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, log10(UpQuantile[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(LowQuantile[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, log10(Meandadi[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, log10(UpQuantileSmall[i]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(LowQuantileSmall[i]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, log10(MeandadiSmall[i]) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, log10(UpQuantileSmall[21]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(LowQuantileSmall[21]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, log10(MeandadiSmall[21]) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
dev.off()#
############################################################################### Full data
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(5)#
ViridisColors <- viridis(5)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeBoykoSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:40){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure8_DFEf_toDFEOn100SimsdadiNoLog.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.4)#
#
barplot(counts, main="E) Constant Size - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"),  expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with fitdadi. Full SFS with between 300-500 1% frequency variants"),  expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with fitdadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ") with our method using data from 300 1% frequency variants"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *") with our method using data from 300 1% frequency variants")), beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1),cex = 0.5)#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, (UpQuantile[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (LowQuantile[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (Meandadi[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, (UpQuantile[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (LowQuantile[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (Meandadi[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, (UpQuantileSmall[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (LowQuantileSmall[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (MeandadiSmall[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, (UpQuantileSmall[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (LowQuantileSmall[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (MeandadiSmall[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 2 ################################################################################################################## #
#
ColorViridis <- viridis(3)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/ConstantPopSizeMouseSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) dadi", "Inferred P(4Ns| 1%, DFE, D)")#
barplot(counts, main="F) Constant Size - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,1))#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, (UpQuantile[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (LowQuantile[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (Meandadi[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, (UpQuantile[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (LowQuantile[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (Meandadi[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, (UpQuantileSmall[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (LowQuantileSmall[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (MeandadiSmall[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, (UpQuantileSmall[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (LowQuantileSmall[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (MeandadiSmall[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
###################################### Plot 3 ###################################################################################################################
ColorViridis <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionBoykoSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
MLE <- read.table("../Results/MLEDFEs/PopExpansionBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="G) Population expansion - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,1))#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, (UpQuantile[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (LowQuantile[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (Meandadi[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, (UpQuantile[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (LowQuantile[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (Meandadi[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, (UpQuantileSmall[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (LowQuantileSmall[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (MeandadiSmall[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, (UpQuantileSmall[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (LowQuantileSmall[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (MeandadiSmall[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
###################################### Plot 4 ###################################################################################################################
#
ColorViridis <- viridis(4)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseBeta.txt")#
#
P_Allele_Is_2NsDadi <- matrix(nrow=100, ncol=200)#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadi[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadi[j,1:20])#
    P_Allele_Is_2NsDadi[j,21] <- Prob#
}#
#
Partdadi <- c()#
UpQuantile <- c()#
LowQuantile <- c()#
Meandadi <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadi[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadi[1:100,i], probs = c(0.05, 0.95))#
    Partdadi <- c(Partdadi, Prob)#
    UpQuantile <- c(UpQuantile, Quantile[1])#
    LowQuantile <- c(LowQuantile, Quantile[2])#
    Meandadi <- c(Meandadi, mean(P_Allele_Is_2NsDadi[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
# PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
BetaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseSmallAlpha.txt")#
AlphaListFile <- read.table("../Results/dadiInferences/PopExpansionMouseSmallBeta.txt")#
#
P_Allele_Is_2NsDadiSmall <- matrix(nrow=100, ncol=200)#
#NumberOfAllelesAt2Ns <- c()#
# RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (j in 1:100){#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j]) - pgamma((i-1)*2.5,AlphaListFile$V1[j],scale=BetaListFile$V1[j])#
    P_Allele_Is_2NsDadiSmall[j,i] <- Prob#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
    Prob <- 1 - sum(P_Allele_Is_2NsDadiSmall[j,1:20])#
    P_Allele_Is_2NsDadiSmall[j,21] <- Prob#
}#
#
Partdadismall <- c()#
UpQuantileSmall <- c()#
LowQuantileSmall <- c()#
MeandadiSmall <- c()#
for (i in 1:21){#
    # print (i)#
    Prob <- median(P_Allele_Is_2NsDadiSmall[1:100,i])#
    Quantile <- quantile(P_Allele_Is_2NsDadiSmall[1:100,i], probs = c(0.05, 0.95))#
    Partdadismall <- c(Partdadismall, Prob)#
    UpQuantileSmall <- c(UpQuantileSmall, Quantile[1])#
    LowQuantileSmall <- c(LowQuantileSmall, Quantile[2])#
    MeandadiSmall <- c(MeandadiSmall, mean(P_Allele_Is_2NsDadiSmall[1:100,i]))#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
###################################
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/PopExpansionMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],Partdadi[i],Partdadismall[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),Partdadi[21],Partdadismall[21],1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[4,1] <- PartTwo[1]#
counts[4,2] <- PartTwo[2]#
counts[4,3] <- PartTwo[3]#
counts[5,1] <- PartFour[1]#
counts[5,2] <- PartFour[2]#
counts[5,3] <- PartFour[3]#
counts[2,1] <- Partdadi[1]#
counts[2,2] <- Partdadi[2]#
counts[2,3] <- Partdadi[3]#
counts[3,1] <- Partdadismall[1]#
counts[3,2] <- Partdadismall[2]#
counts[3,3] <- Partdadismall[3]#
#
BoykoParams <- PartOne#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with between 300-500 1% frequency variants", "Inferred P(4Ns| DFE, D) with dadi. Full SFS with 300-500 SNPs after taking the segregating sites with variants at all frequencies.", "Inferred P(4Ns| 1%, DFE, D)")#
#
op <- par(cex = 0.5)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="H) Population expansion - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,1))#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 6 + 4.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 6 + 4.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*6 + 4.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 4.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 5.5, (Quantiles[1]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (Quantiles[2]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 5.5, (CurrentMean) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 5.5, (Quantiles[1]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (Quantiles[2]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 5.5, (CurrentMean) - (0.0), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 2.5, (UpQuantile[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (LowQuantile[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 2.5, (Meandadi[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 2.5, (UpQuantile[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (LowQuantile[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 2.5, (Meandadi[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 6 + 3.5, (UpQuantileSmall[i]) - (0.0),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (LowQuantileSmall[i]) - (0.0),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 6 + 3.5, (MeandadiSmall[i]) - (0.0),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*6 + 3.5, (UpQuantileSmall[21]) - (0.0), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (LowQuantileSmall[21]) - (0.0), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*6 + 3.5, (MeandadiSmall[21]) - (0.0), col="black", pch=8, bg = "black", cex=1)#
dev.off()#
############################################################################### Full data
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
FiveColors <- viridis(5)#
#
Data <- read.table("../Results/ABCResults/MedianResultsConstantPopSizes.txt")#
#
pdf("../Figures/SuppFigure9_ABCInferenceConstantPopSizes.pdf", height= 14)#
par(mfrow=c(2,1))#
boxplot(Data$V1, main = "N")#
abline(h=10000,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGConstantPopSize.txt")#
#
plot(density(PriorData$V1,from=1000,to=20000), col="black", xlab="N", ylab="", main="" ,lty=2,ylim = c(0,0.8e-3), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
PosteriorQuantile <- c()#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGConstantPopSize",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=1000,to=20000), col=FiveColors[i], cex=2, lwd=3)#
#
SortValues <- sort (Posterior100$V1)#
for (j in 1:100){#
    if (SortValues[j] > 10000 ){#
        PosteriorQuantile <- c(PosteriorQuantile, j)#
        break#
    }#
}#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n")#
#
dev.off()#
Data <- read.table("../Results/ABCResults/MedianResultsPopExpansion.txt")#
pdf("../Figures/SuppFigure10_ABCInferencePopExpansion.pdf",width=14, height= 14)#
par(mfrow=c(2,3))#
#
boxplot(Data$V1, main = "N in the present epoch", cex.axis = 2, cex.main = 2 )#
abline(h=50000,lty=2)#
boxplot(Data$V2, main =  "N in the past epoch", cex.axis = 2, cex.main = 2)#
abline(h=5000,lty=2)#
boxplot(Data$V3, main = "Time of population size change", cex.axis = 2, cex.main = 2)#
abline(h=100,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGPopExpansion.txt")#
#
plot(density(PriorData$V1,from=10000,to=100000), col="black", xlab="N in the past epoch", ylab="", main="" ,lty=2,ylim = c(0,0.3e-4), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=10000,to=100000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V2,from=1000,to=10000), col="black", xlab="N in the present epoch", ylab="", main="" ,lty=2,ylim = c(0,0.03e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V2,from=1000,to=10000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V3,from=0,to=500), col="black", xlab="Time of population size change", ylab="", main="" ,lty=2,ylim = c(0,2e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansion",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V3,from=0,to=500), col=FiveColors[i], cex=2, lwd=3)#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n",cex=1.5)#
dev.off()#
#
Data <- read.table("../Results/ABCResults/MedianResultsPopExpansionDifRecRate.txt")#
pdf("../Figures/SuppFigure11_ABCInferencePopExpansionDifRecRate.pdf",width=14, height= 14)#
par(mfrow=c(2,3))#
#
boxplot(Data$V1, main = "N in the present epoch", cex.axis = 2, cex.main = 2 )#
abline(h=50000,lty=2)#
boxplot(Data$V2, main =  "N in the past epoch", cex.axis = 2, cex.main = 2)#
abline(h=5000,lty=2)#
boxplot(Data$V3, main = "Time of population size change", cex.axis = 2, cex.main = 2)#
abline(h=100,lty=2)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpGPopExpansion.txt")#
#
plot(density(PriorData$V1,from=10000,to=100000), col="black", xlab="N in the past epoch", ylab="", main="" ,lty=2,ylim = c(0,0.3e-4), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansionDifRate",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V1,from=10000,to=100000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V2,from=1000,to=10000), col="black", xlab="N in the present epoch", ylab="", main="" ,lty=2,ylim = c(0,0.03e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansionDifRate",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V2,from=1000,to=10000), col=FiveColors[i], cex=2, lwd=3)#
#
}#
plot(density(PriorData$V3,from=0,to=500), col="black", xlab="Time of population size change", ylab="", main="" ,lty=2,ylim = c(0,2e-2), yaxt = "n", cex.lab=2, cex.axis=2, lwd=3)#
#
for (i in 1:5){#
    Title <- paste("../Results/ABCResults/Best100NotCpGPopExpansionDifRate",i,".txt",sep="")#
    Posterior100 <- read.table(Title)#
lines(density(Posterior100$V3,from=0,to=500), col=FiveColors[i], cex=2, lwd=3)#
#
}#
#
legend("topright",c("Dotted line - Prior distribution","Solid lines - 5 Posterior distributions"), bty="n",cex=1.5)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeAncestryMisspecified100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure12_AncStateMisspecification.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(abs(Selection4Ns_0$V1-200), abs(Selection4Ns_50$V1-200), abs(Selection4Ns_100$V1-200), names=c("0","50","100"), ylab="Estimated |4Ns| values", xlab="Real 4Ns values", main="Inference of selection with ancestral state\nmisspecification in a constant population size scenario", cex.axis=1.25, cex.lab=2, cex.main=1.45, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified0_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionAncestryMisspecified100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of selection with ancestral state\nmisspecification in a population expansion scenario",cex.axis=1.25,cex.lab=2,cex.main=1.45,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=100,lty=3)#
#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
Plot <- paste("../Figures/","SuppFigure13_ProbLInferenceNoSingletons.pdf",sep="")#
ColorViridis <- viridis(5)#
#
pdf(Plot,width=12,height=12/2)#
par(mfrow=c(1,2))#
par(mar=c(5,5,5,2) + 0.1)#
# Image <- readJPEG("PotentialPaperFigures/HaplotypeDivision/Slide1.jpg")#
#plot(0.5,0.5,xaxt="n",yaxt="n",xlim=c(0,1.333333),ylim=c(0,1),main="A) Windows of pairwise haplotypic\n identity by state lengths (L)",cex.main=2)#
#rasterImage(Image,0.0,0.0,1.333333,1,bty="n")#
#
#LLSurface <- read.table("ResultsSelectionInferred/ExampleLLSurface.txt")#
#plot(1:401,LLSurface[1,],type="l",lwd=6,ylab="Log-likelihood",xlab="4Ns",cex.lab=2,cex.axis=2,xaxt="n",main="C) Example Log-Likelihood plot",cex.main=2)#
#axis(1,at=c(1,101,201,301,401),labels=c(-200,-100,0,100,200),cex.lab=2,cex.axis=2)#
#arrows(201,-15761.78,201,-15666.78)#
#legend(131,-15755.78,c("MLE"),bty="n",cex=2)#
#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeNoSingleton-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="A) Inference of selection in terms of |4Ns| values\n in a constant population size scenario",cex.axis=1.7,cex.lab=2,cex.main=1.25,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionNoSingleton-100_N10000.txt")#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="B) Inference of selection in terms of 4Ns values\n in a population expansion scenario",cex.axis=1.7,cex.lab=2,cex.main=1.25,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("4Ns_0", "4Ns_50", "4Ns_100", "4Ns_-50", "4Ns_-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
Medians <- c()#
pdf ("../Figures/SuppFigure14_PhasingEffectOnL.pdf", height = 10)#
par(mfrow = c(5,2))#
par(mar = c(4, 7, 5, 2))#
for (j in 1:5){#
    for (i in 1:2){#
    File <- paste("../Results/PhaseLDistribution/LDistributionStatPhased",DemographicScenarios[i],"_",FourNs[j],".txt", sep = "")#
LDataFile <- read.table(File)#
Title <- paste (DemographicScenariosTitle[i]," ",FourNsTitle[j] , sep = "")#
Medians <- c(Medians,median((LDataFile$V7 - LDataFile$V1)/1560),median((LDataFile$V8 - LDataFile$V2)/1560), median((LDataFile$V9 - LDataFile$V3)/1560), median((LDataFile$V10 - LDataFile$V4)/1560), median((LDataFile$V11 - LDataFile$V5)/1560), median((LDataFile$V12 - LDataFile$V6)/1560))#
#
CurrentMedians <- c(median((LDataFile$V7 - LDataFile$V1)/1560),median((LDataFile$V8 - LDataFile$V2)/1560), median((LDataFile$V9 - LDataFile$V3)/1560), median((LDataFile$V10 - LDataFile$V4)/1560), median((LDataFile$V11 - LDataFile$V5)/1560), median((LDataFile$V12 - LDataFile$V6)/1560))#
#
boxplot((LDataFile$V7 - LDataFile$V1)/1560, (LDataFile$V8 - LDataFile$V2)/1560, (LDataFile$V9 - LDataFile$V3)/1560, (LDataFile$V10 - LDataFile$V4)/1560, (LDataFile$V11 - LDataFile$V5)/1560, (LDataFile$V12 - LDataFile$V6)/1560, xaxt = "n",ylab = expression(atop("Mean(P(Real " * L %in% w[i] * ") -", "P(Statistically Phased " * L %in% w[i] * ")")) , xlab = "L", cex.lab = 1.0, ylim = c(-0.1,0.12), main = Title)#
## expression("Mean(P(Real L " * %in% * "wi) - P(Statistically Phased L " * %in% * "wi")#
CurrentMedians <- round(CurrentMedians,3)#
text(1,0.1,labels=CurrentMedians[1])#
text(2,0.1,labels=CurrentMedians[2])#
text(3,0.1,labels=CurrentMedians[3])#
text(4,0.1,labels=CurrentMedians[4])#
text(5,0.1,labels=CurrentMedians[5])#
text(6,0.1,labels=CurrentMedians[6])#
#
abline(h=0.0, lty = 2)#
axis(1, at=c(1, 2, 3, 4, 5, 6), labels=c(expression(w[1]), expression(w[2]), expression(w[3]), expression(w[4]), expression(w[5]), expression(w[6])))#
}#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
DemographicScenariosTitle <- c("Constant Population Size","Population Expansion")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 50", "4Ns = 100", "4Ns = -50", "4Ns = -100")#
#
Medians <- c()#
#
pdf ("../Figures/SuppFigure15_MisinferenceWithStatisticalPhasing.pdf", width = 8)#
par(mfrow = c(1,2))#
par(mar = c(4, 5, 5, 2))#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[1],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( abs(BiasedEstimators[1:100] - 200) - abs(UnbiasedEstimators[1:100]- 200), abs(BiasedEstimators[101:200] - 200) - abs(UnbiasedEstimators[101:200] - 200) , abs(BiasedEstimators[201:300] - 200) - abs(UnbiasedEstimators[201:300] - 200), abs(BiasedEstimators[301:400] - 200) - abs(UnbiasedEstimators[301:400] - 200), abs(BiasedEstimators[401:500] - 200) - abs(UnbiasedEstimators[401:500] - 200) , ylim = c(-400,400), xlab = "4Ns", ylab = "| Estimated 4Ns on statistically phased data | - | Estimated 4Ns on haplotype data |", main = "Constant population size", names = c(0, 50, 100, -50, 100) )#
#
abline (h= 0 , lty=2)#
#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"LessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/Selection",DemographicScenarios[2],"Phasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( BiasedEstimators[1:100] - UnbiasedEstimators[1:100], BiasedEstimators[101:200] - UnbiasedEstimators[101:200] , BiasedEstimators[201:300] - UnbiasedEstimators[201:300] , BiasedEstimators[301:400] - UnbiasedEstimators[301:400] , BiasedEstimators[401:500] - UnbiasedEstimators[401:500] , ylim = c(-400,400), xlab = "4Ns", ylab = "Estimated 4Ns on statistically phased data - Estimated 4Ns on haplotype data", main = "Population expansion", names = c(0, 50, 100, -50, 100))#
#
abline (h= 0 , lty=2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, 50, 100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Constant Population Size 4Ns = 0","Constant Population Size 4Ns = 50","Constant Population Size 4Ns = 100","Constant Population Size 4Ns = -50","Constant Population Size 4Ns = -100")#
#
ViridisColors <- viridis(5)#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure16_MutRecMisinferenceConstantPopSize.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(abs(DataMatrix[,1] - 200) , abs(DataMatrix[,2] - 200 ), abs(DataMatrix[,3] - 200) , abs( DataMatrix[,4] - 200 ) , abs( DataMatrix[,5] - 200 ), ylab = "| 4Ns |", names = c("9e-9","1.14e-8","1.2e-8","1.26e-8","1.5e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base mutation rate " * mu * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
Magnitude <- c( "NotSoSmallRec", "FivePercentSmallRec", "FivePercentBigRec", "NotSoBigRec")#
Titles <- c("Constant Population Size 4Ns = 0","Constant Population Size 4Ns = 50","Constant Population Size 4Ns = 100","Constant Population Size 4Ns = -50","Constant Population Size 4Ns = -100")#
#
for (i in 1:1){#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot(abs(DataMatrix[,1] - 200) , abs(DataMatrix[,2] - 200 ), abs(DataMatrix[,3] - 200) , abs( DataMatrix[,4] - 200 ) , abs( DataMatrix[,5] - 200 ), ylab = "| 4Ns |", names = c("7.5e-9","9.5e-9","1.0e-8","1.05e-8","1.25e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base recombination rate " * rho * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
dev.off()#
#########################################################################################
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, -50, -100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Population expansion 4Ns = 0","Population expansion 4Ns = 50","Population expansion 4Ns = 100","Population expansion 4Ns = -50","Population expansion 4Ns = -100")#
#
ViridisColors <- viridis(5)#
#
for (i in 2:2){#
    pdf ("../Figures/SuppFigure17_MutRecMisinferencePopExpansion.pdf", width = 35/1.5, height=21/1.5)#
    par(mfrow = c(2,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot((DataMatrix[,1] - 200) , (DataMatrix[,2] - 200 ), (DataMatrix[,3] - 200) , ( DataMatrix[,4] - 200 ) , ( DataMatrix[,5] - 200 ), ylab = "4Ns", names = c("9e-9","1.14e-8","1.2e-8","1.26e-8","1.5e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base mutation rate " * mu * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
Magnitude <- c( "NotSoSmallRec", "FivePercentSmallRec", "FivePercentBigRec", "NotSoBigRec")#
Titles <- c("Population expansion 4Ns = 0","Population expansion 4Ns = 50","Population expansion 4Ns = 100","Population expansion 4Ns = -50","Population expansion 4Ns = -100")#
#
for (i in 2:2){#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
        for (k in 1:2){#
#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k] <- Data$V1[l]#
            }#
        }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], FourNs[j], "_N10000.txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
        for (k in 3:4){#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], Magnitude[k], FourNs[j], "_N10000.txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,k+1] <- Data$V1[l]#
            }#
        }#
        beanplot((DataMatrix[,1] - 200) , (DataMatrix[,2] - 200 ), (DataMatrix[,3] - 200) , ( DataMatrix[,4] - 200 ) , ( DataMatrix[,5] - 200 ), ylab = "4Ns", names = c("7.5e-9","9.5e-9","1.0e-8","1.05e-8","1.25e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), xlab = expression("Per base recombination rate " * rho * " used in simulations"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" , cex.lab = 1.5 , cex.axis = 1.25)#
        abline(h=FourNsLine[j], lty = 2, cex.axis = 2)#
}#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
#
###########
#
Plot <- paste("../Figures/SuppFigure18_DifferentWindowSizePart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_3Windows$V1 - 200), abs(Selection4Ns_50_3Windows$V1 - 200), abs(Selection4Ns_100_3Windows$V1 - 200), abs(Selection4Ns_Minus50_3Windows$V1 - 200), abs(Selection4Ns_Minus100_3Windows$V1 - 200), abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200), abs(Selection4Ns_0_50Windows$V1 - 200), abs(Selection4Ns_50_50Windows$V1 - 200), abs(Selection4Ns_100_50Windows$V1 - 200), abs(Selection4Ns_Minus50_50Windows$V1 - 200), abs(Selection4Ns_Minus100_50Windows$V1 - 200), abs(Selection4Ns_0_100Windows$V1 - 200), abs(Selection4Ns_50_100Windows$V1 - 200), abs(Selection4Ns_100_100Windows$V1 - 200), abs(Selection4Ns_Minus50_100Windows$V1 - 200), abs(Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Constant Population Size Model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum(((abs(Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum(((abs(Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum(((abs(Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum(((abs(Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum(((abs(Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum(((abs(Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum(((abs(Selection4Ns_Minus50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum(((abs(Selection4Ns_Minus50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum(((abs(Selection4Ns_Minus50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum(((abs(Selection4Ns_Minus100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum(((abs(Selection4Ns_Minus100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum(((abs(Selection4Ns_Minus100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_3Windows$V1-200)),median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200)),median(abs(Selection4Ns_0_50Windows$V1-200)),median(abs(Selection4Ns_0_100Windows$V1-200))),ylim= c(-5,15), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median |4Ns| estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_3Windows$V1-200)-50), median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50), median(abs(Selection4Ns_50_50Windows$V1-200)-50), median(abs(Selection4Ns_50_100Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_3Windows$V1-200)-100),median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100),median(abs(Selection4Ns_100_50Windows$V1-200)-100),median(abs(Selection4Ns_100_100Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_3Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_50Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_100Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_3Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_50Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_100Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(10,40), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigureSX3_DifferentWindowSizePart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-100_N10000.txt")#
#
note <- c((Selection4Ns_0_3Windows$V1 - 200), (Selection4Ns_50_3Windows$V1 - 200), (Selection4Ns_100_3Windows$V1 - 200), (Selection4Ns_Minus50_3Windows$V1 - 200), (Selection4Ns_Minus100_3Windows$V1 - 200), (Selection4Ns_0_5Windows$V1 - 200), (Selection4Ns_50_5Windows$V1 - 200), (Selection4Ns_100_5Windows$V1 - 200), (Selection4Ns_Minus50_5Windows$V1 - 200), (Selection4Ns_Minus100_5Windows$V1 - 200), (Selection4Ns_0_10Windows$V1 - 200), (Selection4Ns_50_10Windows$V1 - 200), (Selection4Ns_100_10Windows$V1 - 200), (Selection4Ns_Minus50_10Windows$V1 - 200), (Selection4Ns_Minus100_10Windows$V1 - 200), (Selection4Ns_0_50Windows$V1 - 200), (Selection4Ns_50_50Windows$V1 - 200), (Selection4Ns_100_50Windows$V1 - 200), (Selection4Ns_Minus50_50Windows$V1 - 200), (Selection4Ns_Minus100_50Windows$V1 - 200), (Selection4Ns_0_100Windows$V1 - 200), (Selection4Ns_50_100Windows$V1 - 200), (Selection4Ns_100_100Windows$V1 - 200), (Selection4Ns_Minus50_100Windows$V1 - 200), (Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Population Expansion Model")#
print(p,vp = vp1)#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum((((Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum((((Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum((((Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum((((Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum((((Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum((((Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum((((Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum((((Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum((((Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum((((Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum((((Selection4Ns_Minus50_3Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum((((Selection4Ns_Minus50_5Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum((((Selection4Ns_Minus50_10Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum((((Selection4Ns_Minus50_50Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum((((Selection4Ns_Minus50_100Windows$V1-200) + 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum((((Selection4Ns_Minus100_3Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum((((Selection4Ns_Minus100_5Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum((((Selection4Ns_Minus100_10Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum((((Selection4Ns_Minus100_50Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum((((Selection4Ns_Minus100_100Windows$V1-200) + 100))^2)/100)^(1/2)#
#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(Selection4Ns_0_3Windows$V1-200),median(Selection4Ns_0_5Windows$V1-200),median(Selection4Ns_0_10Windows$V1-200),median(Selection4Ns_0_50Windows$V1-200),median(Selection4Ns_0_100Windows$V1-200)),ylim= c(-25,25), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median 4Ns estimate - Real 4Ns value", main = "Population Expansion Model", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
lines(c(median(Selection4Ns_50_3Windows$V1-200)-50,median(Selection4Ns_50_5Windows$V1-200)-50,median(Selection4Ns_50_10Windows$V1-200)-50,median(Selection4Ns_50_50Windows$V1-200)-50,median(Selection4Ns_50_100Windows$V1-200)-50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(Selection4Ns_100_3Windows$V1-200)-100,median(Selection4Ns_100_5Windows$V1-200)-100,median(Selection4Ns_100_10Windows$V1-200)-100,median(Selection4Ns_100_50Windows$V1-200)-100,median(Selection4Ns_100_100Windows$V1-200)-100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(Selection4Ns_Minus50_3Windows$V1-200)+50,median(Selection4Ns_Minus50_5Windows$V1-200)+50,median(Selection4Ns_Minus50_10Windows$V1-200)+50,median(Selection4Ns_Minus50_50Windows$V1-200)+50,median(Selection4Ns_Minus50_100Windows$V1-200)+50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(Selection4Ns_Minus100_3Windows$V1-200)+100,median(Selection4Ns_Minus100_5Windows$V1-200)+100,median(Selection4Ns_Minus100_10Windows$V1-200)+100,median(Selection4Ns_Minus100_50Windows$V1-200)+100,median(Selection4Ns_Minus100_100Windows$V1-200)+100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(0,100), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Population Expansion Model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
#
###########
#
Plot <- paste("../Figures/SuppFigure19_BothSidesPart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,3) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200), abs(Selection4Ns_0_50Windows$V1 - 200), abs(Selection4Ns_50_50Windows$V1 - 200), abs(Selection4Ns_100_50Windows$V1 - 200), abs(Selection4Ns_Minus50_50Windows$V1 - 200), abs(Selection4Ns_Minus100_50Windows$V1 - 200))#
#
treatment <- c(rep("One side",500), rep("Double sims",500), rep("Both sides",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One side','Double sims','Both sides'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Adjacent regions taken") + ggtitle("Estimates of selection in a Constant Population Size model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum(((abs(Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum(((abs(Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum(((abs(Selection4Ns_Minus50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum(((abs(Selection4Ns_Minus100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200)),median(abs(Selection4Ns_0_50Windows$V1-200))), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "Median |4Ns| estimate - Real |4Ns| value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-5,20), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50), median(abs(Selection4Ns_50_50Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100),median(abs(Selection4Ns_100_50Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_50Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_50Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(10,50), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigureS19_BothSidesPart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,3) + 0.1)#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides-100_N10000.txt")#
#
note <- c((Selection4Ns_0_5Windows$V1 - 200), (Selection4Ns_50_5Windows$V1 - 200), (Selection4Ns_100_5Windows$V1 - 200), (Selection4Ns_Minus50_5Windows$V1 - 200), (Selection4Ns_Minus100_5Windows$V1 - 200), (Selection4Ns_0_10Windows$V1 - 200), (Selection4Ns_50_10Windows$V1 - 200), (Selection4Ns_100_10Windows$V1 - 200), (Selection4Ns_Minus50_10Windows$V1 - 200), (Selection4Ns_Minus100_10Windows$V1 - 200), (Selection4Ns_0_50Windows$V1 - 200), (Selection4Ns_50_50Windows$V1 - 200), (Selection4Ns_100_50Windows$V1 - 200), (Selection4Ns_Minus50_50Windows$V1 - 200), (Selection4Ns_Minus100_50Windows$V1 - 200))#
#
treatment <- c(rep("One side",500), rep("Double sims",500), rep("Both sides",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One side','Double sims','Both sides'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Adjacent regions taken") + ggtitle("Estimates of selection in a Population Expansion model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum((((Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum((((Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum((((Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum((((Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum((((Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum((((Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum((((Selection4Ns_Minus50_5Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum((((Selection4Ns_Minus50_10Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum((((Selection4Ns_Minus50_50Windows$V1-200) + 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum((((Selection4Ns_Minus100_5Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum((((Selection4Ns_Minus100_10Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum((((Selection4Ns_Minus100_50Windows$V1-200) + 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median((Selection4Ns_0_5Windows$V1-200)),median((Selection4Ns_0_10Windows$V1-200)),median((Selection4Ns_0_50Windows$V1-200))), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "Median 4Ns estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-15,15), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median((Selection4Ns_50_5Windows$V1-200)-50), median((Selection4Ns_50_10Windows$V1-200)-50), median((Selection4Ns_50_50Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median((Selection4Ns_100_5Windows$V1-200)-100),median((Selection4Ns_100_10Windows$V1-200)-100),median((Selection4Ns_100_50Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median((Selection4Ns_Minus50_5Windows$V1-200)+50),median((Selection4Ns_Minus50_10Windows$V1-200)+50),median((Selection4Ns_Minus50_50Windows$V1-200)+50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median((Selection4Ns_Minus100_5Windows$V1-200)+100),median((Selection4Ns_Minus100_10Windows$V1-200)+100),median((Selection4Ns_Minus100_50Windows$V1-200)+100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(0,120), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
#
###########
#
Plot <- paste("../Figures/SuppFigure18_DifferentWindowSizePart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_3Windows$V1 - 200), abs(Selection4Ns_50_3Windows$V1 - 200), abs(Selection4Ns_100_3Windows$V1 - 200), abs(Selection4Ns_Minus50_3Windows$V1 - 200), abs(Selection4Ns_Minus100_3Windows$V1 - 200), abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200), abs(Selection4Ns_0_50Windows$V1 - 200), abs(Selection4Ns_50_50Windows$V1 - 200), abs(Selection4Ns_100_50Windows$V1 - 200), abs(Selection4Ns_Minus50_50Windows$V1 - 200), abs(Selection4Ns_Minus100_50Windows$V1 - 200), abs(Selection4Ns_0_100Windows$V1 - 200), abs(Selection4Ns_50_100Windows$V1 - 200), abs(Selection4Ns_100_100Windows$V1 - 200), abs(Selection4Ns_Minus50_100Windows$V1 - 200), abs(Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Constant Population Size Model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum(((abs(Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum(((abs(Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum(((abs(Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum(((abs(Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum(((abs(Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum(((abs(Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum(((abs(Selection4Ns_Minus50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum(((abs(Selection4Ns_Minus50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum(((abs(Selection4Ns_Minus50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum(((abs(Selection4Ns_Minus100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum(((abs(Selection4Ns_Minus100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum(((abs(Selection4Ns_Minus100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_3Windows$V1-200)),median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200)),median(abs(Selection4Ns_0_50Windows$V1-200)),median(abs(Selection4Ns_0_100Windows$V1-200))),ylim= c(-5,15), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median |4Ns| estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_3Windows$V1-200)-50), median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50), median(abs(Selection4Ns_50_50Windows$V1-200)-50), median(abs(Selection4Ns_50_100Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_3Windows$V1-200)-100),median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100),median(abs(Selection4Ns_100_50Windows$V1-200)-100),median(abs(Selection4Ns_100_100Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_3Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_50Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_100Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_3Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_50Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_100Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(10,40), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigure18_DifferentWindowSizePart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-100_N10000.txt")#
#
note <- c((Selection4Ns_0_3Windows$V1 - 200), (Selection4Ns_50_3Windows$V1 - 200), (Selection4Ns_100_3Windows$V1 - 200), (Selection4Ns_Minus50_3Windows$V1 - 200), (Selection4Ns_Minus100_3Windows$V1 - 200), (Selection4Ns_0_5Windows$V1 - 200), (Selection4Ns_50_5Windows$V1 - 200), (Selection4Ns_100_5Windows$V1 - 200), (Selection4Ns_Minus50_5Windows$V1 - 200), (Selection4Ns_Minus100_5Windows$V1 - 200), (Selection4Ns_0_10Windows$V1 - 200), (Selection4Ns_50_10Windows$V1 - 200), (Selection4Ns_100_10Windows$V1 - 200), (Selection4Ns_Minus50_10Windows$V1 - 200), (Selection4Ns_Minus100_10Windows$V1 - 200), (Selection4Ns_0_50Windows$V1 - 200), (Selection4Ns_50_50Windows$V1 - 200), (Selection4Ns_100_50Windows$V1 - 200), (Selection4Ns_Minus50_50Windows$V1 - 200), (Selection4Ns_Minus100_50Windows$V1 - 200), (Selection4Ns_0_100Windows$V1 - 200), (Selection4Ns_50_100Windows$V1 - 200), (Selection4Ns_100_100Windows$V1 - 200), (Selection4Ns_Minus50_100Windows$V1 - 200), (Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Population Expansion Model")#
print(p,vp = vp1)#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum((((Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum((((Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum((((Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum((((Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum((((Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum((((Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum((((Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum((((Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum((((Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum((((Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum((((Selection4Ns_Minus50_3Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum((((Selection4Ns_Minus50_5Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum((((Selection4Ns_Minus50_10Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum((((Selection4Ns_Minus50_50Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum((((Selection4Ns_Minus50_100Windows$V1-200) + 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum((((Selection4Ns_Minus100_3Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum((((Selection4Ns_Minus100_5Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum((((Selection4Ns_Minus100_10Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum((((Selection4Ns_Minus100_50Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum((((Selection4Ns_Minus100_100Windows$V1-200) + 100))^2)/100)^(1/2)#
#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(Selection4Ns_0_3Windows$V1-200),median(Selection4Ns_0_5Windows$V1-200),median(Selection4Ns_0_10Windows$V1-200),median(Selection4Ns_0_50Windows$V1-200),median(Selection4Ns_0_100Windows$V1-200)),ylim= c(-25,25), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median 4Ns estimate - Real 4Ns value", main = "Population Expansion Model", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
lines(c(median(Selection4Ns_50_3Windows$V1-200)-50,median(Selection4Ns_50_5Windows$V1-200)-50,median(Selection4Ns_50_10Windows$V1-200)-50,median(Selection4Ns_50_50Windows$V1-200)-50,median(Selection4Ns_50_100Windows$V1-200)-50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(Selection4Ns_100_3Windows$V1-200)-100,median(Selection4Ns_100_5Windows$V1-200)-100,median(Selection4Ns_100_10Windows$V1-200)-100,median(Selection4Ns_100_50Windows$V1-200)-100,median(Selection4Ns_100_100Windows$V1-200)-100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(Selection4Ns_Minus50_3Windows$V1-200)+50,median(Selection4Ns_Minus50_5Windows$V1-200)+50,median(Selection4Ns_Minus50_10Windows$V1-200)+50,median(Selection4Ns_Minus50_50Windows$V1-200)+50,median(Selection4Ns_Minus50_100Windows$V1-200)+50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(Selection4Ns_Minus100_3Windows$V1-200)+100,median(Selection4Ns_Minus100_5Windows$V1-200)+100,median(Selection4Ns_Minus100_10Windows$V1-200)+100,median(Selection4Ns_Minus100_50Windows$V1-200)+100,median(Selection4Ns_Minus100_100Windows$V1-200)+100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(0,100), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Population Expansion Model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
#
###########
#
Plot <- paste("../Figures/SuppFigure18_DifferentWindowSizePart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100Windows-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_3Windows$V1 - 200), abs(Selection4Ns_50_3Windows$V1 - 200), abs(Selection4Ns_100_3Windows$V1 - 200), abs(Selection4Ns_Minus50_3Windows$V1 - 200), abs(Selection4Ns_Minus100_3Windows$V1 - 200), abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200), abs(Selection4Ns_0_50Windows$V1 - 200), abs(Selection4Ns_50_50Windows$V1 - 200), abs(Selection4Ns_100_50Windows$V1 - 200), abs(Selection4Ns_Minus50_50Windows$V1 - 200), abs(Selection4Ns_Minus100_50Windows$V1 - 200), abs(Selection4Ns_0_100Windows$V1 - 200), abs(Selection4Ns_50_100Windows$V1 - 200), abs(Selection4Ns_100_100Windows$V1 - 200), abs(Selection4Ns_Minus50_100Windows$V1 - 200), abs(Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Constant Population Size Model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum(((abs(Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum(((abs(Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum(((abs(Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum(((abs(Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum(((abs(Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum(((abs(Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum(((abs(Selection4Ns_Minus50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum(((abs(Selection4Ns_Minus50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum(((abs(Selection4Ns_Minus50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum(((abs(Selection4Ns_Minus100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum(((abs(Selection4Ns_Minus100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum(((abs(Selection4Ns_Minus100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_3Windows$V1-200)),median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200)),median(abs(Selection4Ns_0_50Windows$V1-200)),median(abs(Selection4Ns_0_100Windows$V1-200))),ylim= c(-5,15), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median |4Ns| estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_3Windows$V1-200)-50), median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50), median(abs(Selection4Ns_50_50Windows$V1-200)-50), median(abs(Selection4Ns_50_100Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_3Windows$V1-200)-100),median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100),median(abs(Selection4Ns_100_50Windows$V1-200)-100),median(abs(Selection4Ns_100_100Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_3Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_50Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_100Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_3Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_50Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_100Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(10,40), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Constant Population Size model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigure18_DifferentWindowSizePart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,2) + 0.1)#
#
Selection4Ns_0_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows0_N10000.txt")#
Selection4Ns_50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows50_N10000.txt")#
Selection4Ns_100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows100_N10000.txt")#
Selection4Ns_Minus50_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-50_N10000.txt")#
Selection4Ns_Minus100_3Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion3Windows-100_N10000.txt")#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion10Windows-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50Windows-100_N10000.txt")#
#
Selection4Ns_0_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows0_N10000.txt")#
Selection4Ns_50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows50_N10000.txt")#
Selection4Ns_100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows100_N10000.txt")#
Selection4Ns_Minus50_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-50_N10000.txt")#
Selection4Ns_Minus100_100Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100Windows-100_N10000.txt")#
#
note <- c((Selection4Ns_0_3Windows$V1 - 200), (Selection4Ns_50_3Windows$V1 - 200), (Selection4Ns_100_3Windows$V1 - 200), (Selection4Ns_Minus50_3Windows$V1 - 200), (Selection4Ns_Minus100_3Windows$V1 - 200), (Selection4Ns_0_5Windows$V1 - 200), (Selection4Ns_50_5Windows$V1 - 200), (Selection4Ns_100_5Windows$V1 - 200), (Selection4Ns_Minus50_5Windows$V1 - 200), (Selection4Ns_Minus100_5Windows$V1 - 200), (Selection4Ns_0_10Windows$V1 - 200), (Selection4Ns_50_10Windows$V1 - 200), (Selection4Ns_100_10Windows$V1 - 200), (Selection4Ns_Minus50_10Windows$V1 - 200), (Selection4Ns_Minus100_10Windows$V1 - 200), (Selection4Ns_0_50Windows$V1 - 200), (Selection4Ns_50_50Windows$V1 - 200), (Selection4Ns_100_50Windows$V1 - 200), (Selection4Ns_Minus50_50Windows$V1 - 200), (Selection4Ns_Minus100_50Windows$V1 - 200), (Selection4Ns_0_100Windows$V1 - 200), (Selection4Ns_50_100Windows$V1 - 200), (Selection4Ns_100_100Windows$V1 - 200), (Selection4Ns_Minus50_100Windows$V1 - 200), (Selection4Ns_Minus100_100Windows$V1 - 200))#
#
treatment <- c(rep("3 (+1)",500), rep("5 (+1)",500), rep("10 (+1)",500), rep("50 (+1)",500), rep("100 (+1)",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c("3 (+1)","5 (+1)","10 (+1)","50 (+1)","100 (+1)"),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Number of windows") + ggtitle("Estimates of selection in a Population Expansion Model")#
print(p,vp = vp1)#
RMSE_4Ns0_3 <- (sum(((Selection4Ns_0_3Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_100 <- (sum(((Selection4Ns_0_100Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_3 <- (sum((((Selection4Ns_50_3Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_5 <- (sum((((Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum((((Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum((((Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_100 <- (sum((((Selection4Ns_50_100Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_3 <- (sum((((Selection4Ns_100_3Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_5 <- (sum((((Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum((((Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum((((Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_100 <- (sum((((Selection4Ns_100_100Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_3 <- (sum((((Selection4Ns_Minus50_3Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_5 <- (sum((((Selection4Ns_Minus50_5Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum((((Selection4Ns_Minus50_10Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum((((Selection4Ns_Minus50_50Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_100 <- (sum((((Selection4Ns_Minus50_100Windows$V1-200) + 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_3 <- (sum((((Selection4Ns_Minus100_3Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_5 <- (sum((((Selection4Ns_Minus100_5Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum((((Selection4Ns_Minus100_10Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum((((Selection4Ns_Minus100_50Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_100 <- (sum((((Selection4Ns_Minus100_100Windows$V1-200) + 100))^2)/100)^(1/2)#
#
qRMSE_4Ns0_3 <- c()#
qRMSE_4Ns0_5 <- c()#
qRMSE_4Ns0_10 <- c()#
qRMSE_4Ns0_50 <- c()#
qRMSE_4Ns0_100 <- c()#
#
qRMSE_4Ns50_3 <- c()#
qRMSE_4Ns50_5 <- c()#
qRMSE_4Ns50_10 <- c()#
qRMSE_4Ns50_50 <- c()#
qRMSE_4Ns50_100 <- c()#
#
qRMSE_4Ns100_3 <- c()#
qRMSE_4Ns100_5 <- c()#
qRMSE_4Ns100_10 <- c()#
qRMSE_4Ns100_50 <- c()#
qRMSE_4Ns100_100 <-  c()#
#
qRMSE_4NsMinus50_3 <- c()#
qRMSE_4NsMinus50_5 <-  c()#
qRMSE_4NsMinus50_10 <- c()#
qRMSE_4NsMinus50_50 <- c()#
qRMSE_4NsMinus50_100 <- c()#
#
qRMSE_4NsMinus100_3 <- c()#
qRMSE_4NsMinus100_5 <- c()#
qRMSE_4NsMinus100_10 <- c()#
qRMSE_4NsMinus100_50 <- c()#
qRMSE_4NsMinus100_100 <- c()#
#
medqRMSE_4Ns0_3 <- c()#
medqRMSE_4Ns0_5 <- c()#
medqRMSE_4Ns0_10 <- c()#
medqRMSE_4Ns0_50 <- c()#
medqRMSE_4Ns0_100 <- c()#
#
medqRMSE_4Ns50_3 <- c()#
medqRMSE_4Ns50_5 <- c()#
medqRMSE_4Ns50_10 <- c()#
medqRMSE_4Ns50_50 <- c()#
medqRMSE_4Ns50_100 <- c()#
#
medqRMSE_4Ns100_3 <- c()#
medqRMSE_4Ns100_5 <- c()#
medqRMSE_4Ns100_10 <- c()#
medqRMSE_4Ns100_50 <- c()#
medqRMSE_4Ns100_100 <-  c()#
#
medqRMSE_4NsMinus50_3 <- c()#
medqRMSE_4NsMinus50_5 <-  c()#
medqRMSE_4NsMinus50_10 <- c()#
medqRMSE_4NsMinus50_50 <- c()#
medqRMSE_4NsMinus50_100 <- c()#
#
medqRMSE_4NsMinus100_3 <- c()#
medqRMSE_4NsMinus100_5 <- c()#
medqRMSE_4NsMinus100_10 <- c()#
medqRMSE_4NsMinus100_50 <- c()#
medqRMSE_4NsMinus100_100 <- c()#
#
for (i in 1:100){#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_3 <- c(qRMSE_4Ns0_3, (sum(((Selection4Ns_0_3Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_3 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_3Windows$V1[RandomSample]) - 200 )#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_5 <- c(qRMSE_4Ns0_5, (sum(((Selection4Ns_0_5Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_5 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_10 <- c(qRMSE_4Ns0_10, (sum(((Selection4Ns_0_10Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_10 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_50 <- c(qRMSE_4Ns0_50, (sum(((Selection4Ns_0_50Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_50 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns0_100 <- c(qRMSE_4Ns0_100, (sum(((Selection4Ns_0_100Windows$V1[RandomSample]-200)^2)/100))^(1/2))#
medqRMSE_4Ns0_100 <- c(medqRMSE_4Ns0_3, median(Selection4Ns_0_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_3 <- c(qRMSE_4Ns50_3, (sum((((Selection4Ns_50_3Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_3 <- c(medqRMSE_4Ns50_3, median(Selection4Ns_50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_5 <- c(qRMSE_4Ns50_5, (sum(((abs(Selection4Ns_50_5Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_5 <- c(medqRMSE_4Ns50_5, median(Selection4Ns_50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_10 <- c(qRMSE_4Ns50_10, (sum(((abs(Selection4Ns_50_10Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_10 <- c(medqRMSE_4Ns50_10, median(Selection4Ns_50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_50 <- c(qRMSE_4Ns50_50, (sum(((abs(Selection4Ns_50_50Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_50 <- c(medqRMSE_4Ns50_50, median(Selection4Ns_50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns50_100 <- c(qRMSE_4Ns50_100, (sum(((abs(Selection4Ns_50_100Windows$V1[RandomSample]-200) - 50))^2)/100)^(1/2))#
medqRMSE_4Ns50_100 <- c(medqRMSE_4Ns50_100, median(Selection4Ns_50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_3 <- c(qRMSE_4Ns100_3, (sum((((Selection4Ns_100_3Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_3 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_5 <- c(qRMSE_4Ns100_5, (sum((((Selection4Ns_100_5Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_5 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_10 <- c(qRMSE_4Ns100_10, (sum((((Selection4Ns_100_10Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_10 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_50 <- c(qRMSE_4Ns100_50, (sum((((Selection4Ns_100_50Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_50 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4Ns100_100 <- c(qRMSE_4Ns100_100, (sum((((Selection4Ns_100_100Windows$V1[RandomSample]-200) - 100))^2)/100)^(1/2))#
medqRMSE_4Ns100_100 <- c(medqRMSE_4Ns100_3, median(Selection4Ns_100_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_3 <- c(qRMSE_4NsMinus50_3, (sum((((Selection4Ns_Minus50_3Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_3 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_5 <- c(qRMSE_4NsMinus50_5, (sum((((Selection4Ns_Minus50_5Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_5 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_10 <- c(qRMSE_4NsMinus50_10, (sum((((Selection4Ns_Minus50_10Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_10 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_50 <- c(qRMSE_4NsMinus50_50, (sum((((Selection4Ns_Minus50_50Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_50 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus50_100 <- c(qRMSE_4NsMinus50_100, (sum((((Selection4Ns_Minus50_100Windows$V1[RandomSample]-200) + 50))^2)/100)^(1/2))#
medqRMSE_4NsMinus50_100 <- c(medqRMSE_4NsMinus50_3, median(Selection4Ns_Minus50_100Windows$V1[RandomSample]) - 200)#
#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_3 <- c(qRMSE_4NsMinus100_3, (sum((((Selection4Ns_Minus100_3Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_3 <- c(medqRMSE_4NsMinus100_3, median(Selection4Ns_Minus100_3Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_5 <- c(qRMSE_4NsMinus100_5, (sum((((Selection4Ns_Minus100_5Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_5 <- c(medqRMSE_4NsMinus100_5, median(Selection4Ns_Minus100_5Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_10 <- c(qRMSE_4NsMinus100_10, (sum((((Selection4Ns_Minus100_10Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_10 <- c(medqRMSE_4NsMinus100_10, median(Selection4Ns_Minus100_10Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_50 <- c(qRMSE_4NsMinus100_50, (sum((((Selection4Ns_Minus100_50Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_50 <- c(medqRMSE_4NsMinus100_50, median(Selection4Ns_Minus100_50Windows$V1[RandomSample]) - 200)#
RandomSample <- sample.int(100, 100, replace = TRUE)#
qRMSE_4NsMinus100_100 <- c(qRMSE_4NsMinus100_100, (sum((((Selection4Ns_Minus100_100Windows$V1[RandomSample]-200) + 100))^2)/100)^(1/2))#
medqRMSE_4NsMinus100_100 <- c(medqRMSE_4NsMinus100_100, median(Selection4Ns_Minus100_100Windows$V1[RandomSample]) - 200)#
}#
#
ViridisColors <- viridis(5)#
plot(c(median(Selection4Ns_0_3Windows$V1-200),median(Selection4Ns_0_5Windows$V1-200),median(Selection4Ns_0_10Windows$V1-200),median(Selection4Ns_0_50Windows$V1-200),median(Selection4Ns_0_100Windows$V1-200)),ylim= c(-25,25), col = ViridisColors[1], xlab = "Number of windows", ylab = "Median 4Ns estimate - Real 4Ns value", main = "Population Expansion Model", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
lines(c(median(Selection4Ns_50_3Windows$V1-200)-50,median(Selection4Ns_50_5Windows$V1-200)-50,median(Selection4Ns_50_10Windows$V1-200)-50,median(Selection4Ns_50_50Windows$V1-200)-50,median(Selection4Ns_50_100Windows$V1-200)-50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(Selection4Ns_100_3Windows$V1-200)-100,median(Selection4Ns_100_5Windows$V1-200)-100,median(Selection4Ns_100_10Windows$V1-200)-100,median(Selection4Ns_100_50Windows$V1-200)-100,median(Selection4Ns_100_100Windows$V1-200)-100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(Selection4Ns_Minus50_3Windows$V1-200)+50,median(Selection4Ns_Minus50_5Windows$V1-200)+50,median(Selection4Ns_Minus50_10Windows$V1-200)+50,median(Selection4Ns_Minus50_50Windows$V1-200)+50,median(Selection4Ns_Minus50_100Windows$V1-200)+50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(Selection4Ns_Minus100_3Windows$V1-200)+100,median(Selection4Ns_Minus100_5Windows$V1-200)+100,median(Selection4Ns_Minus100_10Windows$V1-200)+100,median(Selection4Ns_Minus100_50Windows$V1-200)+100,median(Selection4Ns_Minus100_100Windows$V1-200)+100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_3,RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50,RMSE_4Ns0_100),ylim= c(0,100), col = ViridisColors[1], xlab = "Number of windows", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, main = "Population Expansion Model", type = "b", pch = 19, cex = 3)#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_3,RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50,RMSE_4Ns50_100), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_3,RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50,RMSE_4Ns100_100), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_3,RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50,RMSE_4NsMinus50_100), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_3,RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50,RMSE_4NsMinus100_100), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("3 (+1)", "5 (+1)", "10 (+1)", "50 (+1)", "100 (+1)"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
#
###########
#
Plot <- paste("../Figures/SuppFigure19_BothSidesPart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,3) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeMoreSims-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeBothSides-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200), abs(Selection4Ns_0_50Windows$V1 - 200), abs(Selection4Ns_50_50Windows$V1 - 200), abs(Selection4Ns_100_50Windows$V1 - 200), abs(Selection4Ns_Minus50_50Windows$V1 - 200), abs(Selection4Ns_Minus100_50Windows$V1 - 200))#
#
treatment <- c(rep("One side",500), rep("Double sims",500), rep("Both sides",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One side','Double sims','Both sides'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Adjacent regions taken") + ggtitle("Estimates of selection in a Constant Population Size model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum(((abs(Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum(((abs(Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum(((abs(Selection4Ns_Minus50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum(((abs(Selection4Ns_Minus100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200)),median(abs(Selection4Ns_0_50Windows$V1-200))), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "Median |4Ns| estimate - Real |4Ns| value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-5,20), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50), median(abs(Selection4Ns_50_50Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100),median(abs(Selection4Ns_100_50Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_50Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_50Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(10,50), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigure19_BothSidesPart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,5,5,3) + 0.1)#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionMoreSims-100_N10000.txt")#
#
Selection4Ns_0_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides0_N10000.txt")#
Selection4Ns_50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides50_N10000.txt")#
Selection4Ns_100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides100_N10000.txt")#
Selection4Ns_Minus50_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides-50_N10000.txt")#
Selection4Ns_Minus100_50Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBothSides-100_N10000.txt")#
#
note <- c((Selection4Ns_0_5Windows$V1 - 200), (Selection4Ns_50_5Windows$V1 - 200), (Selection4Ns_100_5Windows$V1 - 200), (Selection4Ns_Minus50_5Windows$V1 - 200), (Selection4Ns_Minus100_5Windows$V1 - 200), (Selection4Ns_0_10Windows$V1 - 200), (Selection4Ns_50_10Windows$V1 - 200), (Selection4Ns_100_10Windows$V1 - 200), (Selection4Ns_Minus50_10Windows$V1 - 200), (Selection4Ns_Minus100_10Windows$V1 - 200), (Selection4Ns_0_50Windows$V1 - 200), (Selection4Ns_50_50Windows$V1 - 200), (Selection4Ns_100_50Windows$V1 - 200), (Selection4Ns_Minus50_50Windows$V1 - 200), (Selection4Ns_Minus100_50Windows$V1 - 200))#
#
treatment <- c(rep("One side",500), rep("Double sims",500), rep("Both sides",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One side','Double sims','Both sides'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Adjacent regions taken") + ggtitle("Estimates of selection in a Population Expansion model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_50 <- (sum(((Selection4Ns_0_50Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum((((Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum((((Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_50 <- (sum((((Selection4Ns_50_50Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum((((Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum((((Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_50 <- (sum((((Selection4Ns_100_50Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum((((Selection4Ns_Minus50_5Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum((((Selection4Ns_Minus50_10Windows$V1-200) + 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_50 <- (sum((((Selection4Ns_Minus50_50Windows$V1-200) + 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum((((Selection4Ns_Minus100_5Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum((((Selection4Ns_Minus100_10Windows$V1-200) + 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_50 <- (sum((((Selection4Ns_Minus100_50Windows$V1-200) + 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median((Selection4Ns_0_5Windows$V1-200)),median((Selection4Ns_0_10Windows$V1-200)),median((Selection4Ns_0_50Windows$V1-200))), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "Median 4Ns estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-15,15), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median((Selection4Ns_50_5Windows$V1-200)-50), median((Selection4Ns_50_10Windows$V1-200)-50), median((Selection4Ns_50_50Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median((Selection4Ns_100_5Windows$V1-200)-100),median((Selection4Ns_100_10Windows$V1-200)-100),median((Selection4Ns_100_50Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median((Selection4Ns_Minus50_5Windows$V1-200)+50),median((Selection4Ns_Minus50_10Windows$V1-200)+50),median((Selection4Ns_Minus50_50Windows$V1-200)+50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median((Selection4Ns_Minus100_5Windows$V1-200)+100),median((Selection4Ns_Minus100_10Windows$V1-200)+100),median((Selection4Ns_Minus100_50Windows$V1-200)+100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10,RMSE_4Ns0_50), col = ViridisColors[1], xlab = "Adjacent regions taken", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(0,120), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10,RMSE_4Ns50_50), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10,RMSE_4Ns100_50), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10,RMSE_4NsMinus50_50), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10,RMSE_4NsMinus100_50), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2, 3), labels = c("One side", "Double sims", "Both sides"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(reshape2)#
library(gridBase)#
library(grid)#
library(ggplot2)#
###########
#
Plot <- paste("../Figures/SuppFigure20_FullHapPart1.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,7,5,7) + 0.1)#
#
### Figure 3#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeFullHap0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeFullHap50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeFullHap100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeFullHap-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSizeFullHap-100_N10000.txt")#
#
note <- c(abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200))#
#
treatment <- c(rep("One haplotype end",500), rep("Both haplotype ends",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One haplotype end','Both haplotype ends'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Regions taken for the calculation of L") + ggtitle("Estimates of selection in a Constant Population Size model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200))), col = ViridisColors[1], xlab = "Regions taken for the calculation of L", ylab = "Median |4Ns| estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-5,15), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2), labels = c("One haplotype end", "Both haplotype ends"), cex.axis=2.2, cex.lab=2.5)#
#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10), col = ViridisColors[1], xlab = "Regions taken for the calculation of L", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(10,45), type = "b", pch = 19, cex = 3, main = "Constant Population Size model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2), labels = c("One haplotype end", "Both haplotype ends"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()#
## 4Ns = 0#
#
###################################### Pop Expansion ########################################
#
Plot <- paste("../Figures/SuppFigure20_FullHapPart2.pdf",sep="")#
#
pdf(Plot, width = 7*3, height = 7*1)#
par(mfrow=c(1,3), mar=c(5,7,5,7) + 0.1)#
#
Selection4Ns_0_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100_5Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
Selection4Ns_0_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionFullHap0_N10000.txt")#
Selection4Ns_50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionFullHap50_N10000.txt")#
Selection4Ns_100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionFullHap100_N10000.txt")#
Selection4Ns_Minus50_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionFullHap-50_N10000.txt")#
Selection4Ns_Minus100_10Windows <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionFullHap-100_N10000.txt")#
note <- c(abs(Selection4Ns_0_5Windows$V1 - 200), abs(Selection4Ns_50_5Windows$V1 - 200), abs(Selection4Ns_100_5Windows$V1 - 200), abs(Selection4Ns_Minus50_5Windows$V1 - 200), abs(Selection4Ns_Minus100_5Windows$V1 - 200), abs(Selection4Ns_0_10Windows$V1 - 200), abs(Selection4Ns_50_10Windows$V1 - 200), abs(Selection4Ns_100_10Windows$V1 - 200), abs(Selection4Ns_Minus50_10Windows$V1 - 200), abs(Selection4Ns_Minus100_10Windows$V1 - 200))#
#
treatment <- c(rep("One haplotype end",500), rep("Both haplotype ends",500))#
FourNs <- c(rep("0",100), rep("50",100), rep("100",100), rep("-50",100), rep("-100",100))#
variety <- c(FourNs, FourNs)#
#
data=data.frame(variety, treatment ,  note)#
#
data$variety <- factor(data$variety, levels = c('0','-50','50','-100','100'),ordered = TRUE)#
data$treatment <- factor(data$treatment, levels = c('One haplotype end','Both haplotype ends'),ordered = TRUE)#
#
plot.new()              ## suggested by @Josh#
vps <- baseViewports()#
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot#
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values#
#
p <- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + xlab("Real 4Ns values") + ylab("Estimated |4Ns| values") + scale_fill_discrete(name = "Regions taken for the calculation of L") + ggtitle("Estimates of selection in a Population Expansion model")#
print(p,vp = vp1)#
#
RMSE_4Ns0_5 <- (sum(((Selection4Ns_0_5Windows$V1-200)^2)/100))^(1/2)#
RMSE_4Ns0_10 <- (sum(((Selection4Ns_0_10Windows$V1-200)^2)/100))^(1/2)#
#
RMSE_4Ns50_5 <- (sum(((abs(Selection4Ns_50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4Ns50_10 <- (sum(((abs(Selection4Ns_50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4Ns100_5 <- (sum(((abs(Selection4Ns_100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4Ns100_10 <- (sum(((abs(Selection4Ns_100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
#
RMSE_4NsMinus50_5 <- (sum(((abs(Selection4Ns_Minus50_5Windows$V1-200) - 50))^2)/100)^(1/2)#
RMSE_4NsMinus50_10 <- (sum(((abs(Selection4Ns_Minus50_10Windows$V1-200) - 50))^2)/100)^(1/2)#
#
RMSE_4NsMinus100_5 <- (sum(((abs(Selection4Ns_Minus100_5Windows$V1-200) - 100))^2)/100)^(1/2)#
RMSE_4NsMinus100_10 <- (sum(((abs(Selection4Ns_Minus100_10Windows$V1-200) - 100))^2)/100)^(1/2)#
#
ViridisColors <- viridis(5)#
plot(c(median(abs(Selection4Ns_0_5Windows$V1-200)),median(abs(Selection4Ns_0_10Windows$V1-200))), col = ViridisColors[1], xlab = "Regions taken for the calculation of L", ylab = "Median |4Ns| estimate - Real 4Ns value", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(-15,25), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns0_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns0_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns0_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns0_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns0_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
lines(c(median(abs(Selection4Ns_50_5Windows$V1-200)-50), median(abs(Selection4Ns_50_10Windows$V1-200)-50)), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns50_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns50_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns50_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns50_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns50_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
lines(c(median(abs(Selection4Ns_100_5Windows$V1-200)-100),median(abs(Selection4Ns_100_10Windows$V1-200)-100)), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4Ns100_3,0.05), x1=1, y1=quantile(medqRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(medqRMSE_4Ns100_5,0.05), x1=2, y1=quantile(medqRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(medqRMSE_4Ns100_10,0.05), x1=3, y1=quantile(medqRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(medqRMSE_4Ns100_50,0.05), x1=4, y1=quantile(medqRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(medqRMSE_4Ns100_100,0.05), x1=5, y1=quantile(medqRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
lines(c(median(abs(Selection4Ns_Minus50_5Windows$V1-200)-50),median(abs(Selection4Ns_Minus50_10Windows$V1-200)-50)), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
lines(c(median(abs(Selection4Ns_Minus100_5Windows$V1-200)-100),median(abs(Selection4Ns_Minus100_10Windows$V1-200)-100)), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(medqRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(medqRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=2, y0=quantile(medqRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(medqRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(medqRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(medqRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=4, y0=quantile(medqRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(medqRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(medqRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(medqRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2), labels = c("One haplotype end", "Both haplotype ends"), cex.axis=2.2, cex.lab=2.5)#
ViridisColors <- viridis(5)#
plot(c(RMSE_4Ns0_5,RMSE_4Ns0_10), col = ViridisColors[1], xlab = "Regions taken for the calculation of L", ylab = "RMSE", cex.axis=2.2, cex.lab=2.5, cex.main=2.5, xaxt= "n", lwd = 6, ylim = c(0,100), type = "b", pch = 19, cex = 3, main = "Population Expansion model")#
legend("top",legend = c(0, 50, 100, -50, -100),col=ViridisColors, pch=19, cex = 2, title = "4Ns", bty = "n")#
#
# arrows(x0=1, y0=quantile(qRMSE_4Ns0_3,0.05), x1=1, y1=quantile(qRMSE_4Ns0_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns0_5,0.05), x1=2, y1=quantile(qRMSE_4Ns0_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns0_10,0.05), x1=3, y1=quantile(qRMSE_4Ns0_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns0_50,0.05), x1=4, y1=quantile(qRMSE_4Ns0_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns0_100,0.05), x1=5, y1=quantile(qRMSE_4Ns0_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[1], lwd=6)#
#
# lines(c(median(Selection4Ns_50_3Windows$V1-200),median(Selection4Ns_50_5Windows$V1-200),median(Selection4Ns_50_10Windows$V1-200),median(Selection4Ns_50_50Windows$V1-200),median(Selection4Ns_50_100Windows$V1-200)), col = ViridisColors[2])#
lines(c(RMSE_4Ns50_5,RMSE_4Ns50_10), col = ViridisColors[2], lwd = 5, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns50_3,0.05), x1=1, y1=quantile(qRMSE_4Ns50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns50_5,0.05), x1=2, y1=quantile(qRMSE_4Ns50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns50_10,0.05), x1=3, y1=quantile(qRMSE_4Ns50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns50_50,0.05), x1=4, y1=quantile(qRMSE_4Ns50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns50_100,0.05), x1=5, y1=quantile(qRMSE_4Ns50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[2], lwd=5)#
#
# lines(c(median(Selection4Ns_100_3Windows$V1-200),median(Selection4Ns_100_5Windows$V1-200),median(Selection4Ns_100_10Windows$V1-200),median(Selection4Ns_100_50Windows$V1-200),median(Selection4Ns_100_100Windows$V1-200), col = ViridisColors[3])#
lines(c(RMSE_4Ns100_5,RMSE_4Ns100_10), col = ViridisColors[3], lwd = 4, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4Ns100_3,0.05), x1=1, y1=quantile(qRMSE_4Ns100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=2, y0=quantile(qRMSE_4Ns100_5,0.05), x1=2, y1=quantile(qRMSE_4Ns100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=3, y0=quantile(qRMSE_4Ns100_10,0.05), x1=3, y1=quantile(qRMSE_4Ns100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=4, y0=quantile(qRMSE_4Ns100_50,0.05), x1=4, y1=quantile(qRMSE_4Ns100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
# arrows(x0=5, y0=quantile(qRMSE_4Ns100_100,0.05), x1=5, y1=quantile(qRMSE_4Ns100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[3], lwd=4)#
#
# lines(c(median(Selection4NsMinus50_3Windows$V1-200),median(Selection4NsMinus50_5Windows$V1-200),median(Selection4NsMinus50_10Windows$V1-200),median(Selection4NsMinus50_50Windows$V1-200),median(Selection4NsMinus50_100Windows$V1-200), col = ViridisColors[4])#
lines(c(RMSE_4NsMinus50_5,RMSE_4NsMinus50_10), col = ViridisColors[4], lwd = 3, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus50_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus50_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=2, y0=quantile(qRMSE_4NsMinus50_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus50_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus50_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus50_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus50_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus50_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus50_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus50_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[4], lwd=3)#
#
# lines(c(median(Selection4NsMinus100_3Windows$V1-200),median(Selection4NsMinus100_5Windows$V1-200),median(Selection4NsMinus100_10Windows$V1-200),median(Selection4NsMinus100_50Windows$V1-200),median(Selection4NsMinus100_100Windows$V1-200), col = ViridisColors[5])#
lines(c(RMSE_4NsMinus100_5,RMSE_4NsMinus100_10), col = ViridisColors[5], lwd = 2, type = "b", pch = 19, cex = 3)#
# arrows(x0=1, y0=quantile(qRMSE_4NsMinus100_3,0.05), x1=1, y1=quantile(qRMSE_4NsMinus100_3,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#arrows(x0=2, y0=quantile(qRMSE_4NsMinus100_5,0.05), x1=2, y1=quantile(qRMSE_4NsMinus100_5,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=3, y0=quantile(qRMSE_4NsMinus100_10,0.05), x1=3, y1=quantile(qRMSE_4NsMinus100_10,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5],  lwd=2)#
# arrows(x0=4, y0=quantile(qRMSE_4NsMinus100_50,0.05), x1=4, y1=quantile(qRMSE_4NsMinus100_50,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
# arrows(x0=5, y0=quantile(qRMSE_4NsMinus100_100,0.05), x1=5, y1=quantile(qRMSE_4NsMinus100_100,0.95), code=3, angle=90, length=0.5, col=ViridisColors[5], lwd=2)#
#
axis(1, at=c(1, 2), labels = c("One haplotype end", "Both haplotype ends"), cex.axis=2.2, cex.lab=2.5)#
# axis(2, at=c(1, 2, 3, 4, 5), labels = c(3, 5, 10, 50, 100))#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionTwoRecRates0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionTwoRecRates50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionTwoRecRates100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionTwoRecRates-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionTwoRecRates-100_N10000.txt")#
#
Plot <- paste("../Figures/SuppFigure21_PopExpansionTwoRecRatesSelInference.pdf",sep="")#
pdf(Plot)#
par(mar=c(5,5,5,2) + 0.1)#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection in a\nPopulation Expansion Model",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionDifRecRate4Ns_0.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionDifRecRate4Ns_50.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionDifRecRate4Ns_100.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionDifRecRate4Ns_-50.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionDifRecRate4Ns_-100.txt")#
#
Plot <- paste("../Figures/SuppFigure22_PopExpansionDifRecRatesSelInference.pdf",sep="")#
pdf(Plot)#
par(mar=c(5,5,5,2) + 0.1)#
beanplot(Selection4Ns_0$V1,Selection4Ns_50$V1,Selection4Ns_Minus50$V1,Selection4Ns_100$V1,Selection4Ns_Minus100$V1,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection in a\nPopulation Expansion Model",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
dev.off()
library(here)#
library(viridis)#
### Calculation of means#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesConstantBoyko.txt")#
MeanConstantBoyko <- mean(Data$V2[1:50000]*40000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesConstantMouse.txt")#
MeanConstantMouse <- mean(Data$V2[1:50000]*40000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesPopExpansionBoyko.txt")#
MeanPopExpansionBoyko <- mean(Data$V2[1:50000]*20000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesPopExpansionMouse.txt")#
MeanPopExpansionMouse <- mean(Data$V2[1:50000]*20000)#
#
### Reading DFE parameters and 4Ns values from the truncated gamma distributions used#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i] <- 0#
#
for (j in 3:203){#
FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[i,j]#
}#
}#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
# FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i+nrow(DFEPars)] <- 0#
#
for (j in 3:203){#
FourNsMeans[i+nrow(DFEPars)] <- FourNsMeans[i+nrow(DFEPars)] + (j-3)* DFEPars[i,j]#
}#
}#
#
pdf("../Figures/SuppFigure23_MLEDFEHumanPopExpansion.pdf",width=7*2,height=7*4/4)#
par(mfrow = c(1,2),mar=c(5,5,5,3))#
#
MLE <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBoykoDifRecRate.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="A) Population expansion\nHuman DFE",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis = 1.5)#
#points(50.454203927295,0.184753036884482,col="red",pch=19,lwd=3)#
lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
# legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
legend("topright",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanConstantBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(here)#
#
### Calculation of means#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesConstantBoyko.txt")#
MeanConstantBoyko <- mean(Data$V2[1:50000]*40000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesConstantMouse.txt")#
MeanConstantMouse <- mean(Data$V2[1:50000]*40000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesPopExpansionBoyko.txt")#
MeanPopExpansionBoyko <- mean(Data$V2[1:50000]*20000)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesPopExpansionMouse.txt")#
MeanPopExpansionMouse <- mean(Data$V2[1:50000]*20000)#
#
### Reading DFE parameters and 4Ns values from the truncated gamma distributions used#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
# pdf("../Figures/SuppFigure2_MeanDFEMouseHuman2DemScenarios.pdf")#
# par(mfrow = c(2,2))#
# par(mar=c(2.1,5.1,4.1,1.1))#
MLE <- read.table("../Results/MLEDFEs/ConstantBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
FourNsMeans <- c()#
for (i in 1:100){#
    DFEParameterNumber <- MLE$V1[i]#
    FourNsMeans[i] <- 0#
for (j in 3:203){#
    FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[MLE$V1[i]+1,j]#
}#
}#
#
MLE <- read.table("../Results/MLEDFEs/ConstantMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
FourNsMeans <- c()#
for (i in 1:100){#
    DFEParameterNumber <-  MLE$V1[i]#
    FourNsMeans[i] <- 0#
    for (j in 3:203){#
        FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[MLE$V1[i]+1,j]#
    }#
}#
#
MLE <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBoykoDifRecRate.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
FourNsMeans <- c()#
for (i in 1:100){#
    DFEParameterNumber <-  MLE$V1[i]#
    FourNsMeans[i] <- 0#
    for (j in 3:203){#
        FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[MLE$V1[i]+1,j]#
    }#
}#
#
beanplot(-FourNsMeans,main="B) Population expansion\nHuman DFE",ylab="Mean 4Ns value",cex.lab=2,cex.main=2.5,cex.axis=2,ylim=c(-200,10), col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
points(1,-MeanPopExpansionBoyko,col="red",pch=19)#
#
MLE <- read.table("../Results/MLEDFEs/PopExpansionMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
FourNsMeans <- c()#
for (i in 1:100){#
    DFEParameterNumber <-  MLE$V1[i]#
    FourNsMeans[i] <- 0#
    for (j in 3:203){#
        FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[MLE$V1[i]+1,j]#
    }#
}#
#
dev.off()#
# dev.off()
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantBoykoMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:40){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure23_DFEf_toDFEOn100SimsPopExpansionDifRate.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- PartOne#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
# barplot(log10(counts) - log10(0.0000000001), main="A) Constant Size - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,12), yaxt="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 2 ################################################################################################################## #
#
ColorViridis <- viridis(3)#
#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantMouse.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((160000)*2500*1000) # Original#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesConstantBoyko.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*20000#
#
Breaks <- c(0,2.5*0:300 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/ConstantMouseMLE.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 40000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((160000)*2500*1000)#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
    counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- rbind(BoykoParams, PartOne)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#barplot(log10(counts) - log10(0.0000000001), main="B) Constant Size - Mouse DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,10), yaxt="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
CurrentMean <- mean(TotalDifference)#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
# dev.off()#
###################################### Plot 3 ###################################################################################################################
ColorViridis <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionBoyko.txt")#
#
### P (allele is at 1%)#
#
P_allele_at_OnePercent = nrow(SelectionCoefficientListBoyko)/((80000 + (100000/10000)*100)*2500*1000) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((80000 + (100000/10000)*100)*2500*1000)) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesPopExpansionMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*10000#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
MLE <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionBoykoDifRecRate.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 * 20000#
#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
}#
#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((80000 + (100000/10000)*100)*2500*1000)#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:40){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigure11_DFEf_toDFEOn100Sims.pdf",width=7,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
for (i in 4:20){#
    counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
}#
#
counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
#
counts[1,1] <- PartOne[1]#
counts[1,2] <- PartOne[2]#
counts[1,3] <- PartOne[3]#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- PartTwo[3]#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- PartFour[3]#
#
BoykoParams <- rbind(BoykoParams, PartOne)#
#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50","50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(log10(counts) - log10(0.0000000001), main="C) Population expansion - Human DFE", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), legend = c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5), cex.main = 2, ylim = c(0,15), yaxt="n")#
#
axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
points(Divisions*4 + 2.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 2.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:Divisions){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001),col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001),col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, log10(CurrentMean) - log10(0.0000000001),col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(TotalDifference,c(0.05,0.95))#
#
points(Divisions*4 + 3.5, log10(Quantiles[1]) - log10(0.0000000001), col="black", pch=24, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(Quantiles[2]) - log10(0.0000000001), col="black", pch=25, bg = "black", cex=1)#
points(Divisions*4 + 3.5, log10(CurrentMean) - log10(0.0000000001), col="black", pch=8, bg = "black", cex=1)#
dev.off()#
############################################################################### Full data
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate_10.txt")#
Plot <- paste("../Figures/SuppFigure24_PopExpansionSelInference.pdf",sep="")#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates", main= "4Ns = 0", cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median,lty=3, col = "red")#
### Figure 3#
#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns50_10.txt")#
#
Plot <- paste("../Figures/SuppFigure15_PopExpansionSelInference4Ns50.pdf",sep="")#
#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates", main="4Ns = -50",cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median,lty=3, col = "red")#
Selection1 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_1.txt")#
Selection2 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_2.txt")#
Selection3 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_3.txt")#
Selection4 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_4.txt")#
Selection5 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_5.txt")#
Selection6 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_6.txt")#
Selection7 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_7.txt")#
Selection8 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_8.txt")#
Selection9 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_9.txt")#
Selection10 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionSLiMPopExpansionChangedRecRate4Ns100_10.txt")#
Plot <- paste("../Figures/SuppFigure15_PopExpansionSelInference4Ns100.pdf",sep="")#
Median <- median(c(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200))#
#
beanplot(Selection1$V1-200, Selection2$V1-200, Selection3$V1-200, Selection4$V1-200, Selection5$V1-200, Selection6$V1-200, Selection7$V1-200, Selection8$V1-200, Selection9$V1-200, Selection10$V1-200,names=c("1","2","3","4","5","6","7","8","9","10"),ylab="Estimated 4Ns values",xlab="Replicates",main="4Ns = -100",cex.axis=1.5,cex.lab=2,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), cutmin = -200, cutmax = 0, border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=Median,lty=3)#
# abline(h=Median, pch = 4, col = "red")#
#
dev.off()
library(here)#
library(viridis)#
### Calculation of means#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
MeanConstantBoyko <- mean(Data$V2[1:50000]*926*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
MeanConstantMouse <- mean(Data$V2[1:50000]*1034*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
MeanPopExpansionBoyko <- mean(Data$V2[1:50000]*1146*2)#
#
Data <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
MeanPopExpansionMouse <- mean(Data$V2[1:50000]*20000)#
#
### Reading DFE parameters and 4Ns values from the truncated gamma distributions used#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i] <- 0#
#
for (j in 3:203){#
FourNsMeans[i] <- FourNsMeans[i] + (j-3)* DFEPars[i,j]#
}#
}#
#
DFEPars <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
# FourNsMeans <- c()#
#
for (i in 1:nrow(DFEPars)){#
FourNsMeans[i+nrow(DFEPars)] <- 0#
#
for (j in 3:203){#
FourNsMeans[i+nrow(DFEPars)] <- FourNsMeans[i+nrow(DFEPars)] + (j-3)* DFEPars[i,j]#
}#
}#
#
pdf("../Figures/SuppFigure25_MLEDFEHumanMouse2DemScenarios.pdf",width=7*2,height=7*2/4)#
par(mfrow = c(1,4),mar=c(5,5,5,5))#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="A) Simulation Replicate 1",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis = 1.5)#
#points(50.454203927295,0.184753036884482,col="red",pch=19,lwd=3)#
# lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
# legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
legend("topright",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanConstantBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="B) Simulation Replicate 2",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
#points(50.8608219789938,0.109621224838877,col="red",pch=19,lwd=3)#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
# lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("topright",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanConstantMouse/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="C) Simulation Replicate 3",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
#points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
#lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
#lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- c()#
Column <- c()#
#
for (i in 1:nrow(MLE)){#
    if (MLE$V1[i] < 2100 ){#
CurRow <- ( MLE$V1[i] ) %% 70 + 1#
CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }else{#
CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
Row <- c(Row, CurRow)#
Column <- c(Column, CurColumn)#
    }#
}#
BestFit <- c()#
Differences <- c()#
for (i in 1:70){#
BestFit[i] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i] <- j#
    }#
}#
}#
#
for (i in 1:70){#
BestFit[i+70] <- 1#
for (j in 1:30){#
    DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
    DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
    Differences <- c(Differences,DifferenceOne)#
    if (DifferenceOne < DifferenceTwo){#
        BestFit[i+70] <- j#
    }#
}#
}#
Test <- as.data.frame(table(MLE))#
UniqueNumbers <- sort(unique(Test$Freq))#
ColorViridis <- viridis(length(UniqueNumbers))#
#
ColorsToPrint <- c()#
for (i in 1:nrow(MLE)){#
    CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
    Index <- match(CurrentColor,UniqueNumbers)#
    ColorsToPrint <- c(ColorsToPrint, Index)#
}#
plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"),main="D) Simulation Replicate 4",col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
#points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
#lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
#lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
abline(v=350, lty= 3)#
#lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
dev.off()#
#
pdf("../Figures/SuppFigure25_MLEDFEHumanMouse2DemScenarios_10Sims.pdf",width=7*2,height=14*2/4)#
par(mfrow = c(2,4),mar=c(5,5,5,5))#
#
Vector <- c("A)", "B)", "C)", "D)", "E)", "F)", "G)", "H)", "I)", "J)")#
for (k in 5:10){#
    File = paste ("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep = "")#
    MLE <- read.table(File)#
#
    Row <- c()#
    Column <- c()#
#
    for (i in 1:nrow(MLE)){#
        if (MLE$V1[i] < 2100 ){#
    CurRow <- ( MLE$V1[i] ) %% 70 + 1#
    CurColumn <- floor(( MLE$V1[i] ) / 70) + 1#
    Row <- c(Row, CurRow)#
    Column <- c(Column, CurColumn)#
        }else{#
    CurRow <- (( MLE$V1[i] ) %% 70) + 1 + 70#
    CurColumn <- floor(( MLE$V1[i] - 2100 ) / 70) + 1#
    Row <- c(Row, CurRow)#
    Column <- c(Column, CurColumn)#
        }#
    }#
    BestFit <- c()#
    Differences <- c()#
    for (i in 1:70){#
    BestFit[i] <- 1#
    for (j in 1:30){#
        DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i] - MeanConstantBoyko)#
        DifferenceTwo <- abs(FourNsMeans[(BestFit[i]-1) * 70 + i] - MeanConstantBoyko)#
        Differences <- c(Differences,DifferenceOne)#
        if (DifferenceOne < DifferenceTwo){#
            BestFit[i] <- j#
        }#
    }#
    }#
#
    for (i in 1:70){#
    BestFit[i+70] <- 1#
    for (j in 1:30){#
        DifferenceOne <- abs(FourNsMeans[(j-1) * 70 + i + 2100] - MeanConstantBoyko)#
        DifferenceTwo <- abs(FourNsMeans[(BestFit[i+70]-1) * 70 + i + 2100] - MeanConstantBoyko)#
        Differences <- c(Differences,DifferenceOne)#
        if (DifferenceOne < DifferenceTwo){#
            BestFit[i+70] <- j#
        }#
    }#
    }#
    Test <- as.data.frame(table(MLE))#
    UniqueNumbers <- sort(unique(Test$Freq))#
    ColorViridis <- viridis(length(UniqueNumbers))#
#
    ColorsToPrint <- c()#
    for (i in 1:nrow(MLE)){#
        CurrentColor <- Test[Test$MLE==MLE$V1[i],]$Freq#
        Index <- match(CurrentColor,UniqueNumbers)#
        ColorsToPrint <- c(ColorsToPrint, Index)#
    }#
#
    TitleVector <- paste (Vector[k], " Simulation Replicate ", k ,  sep="")#
    FileName <- paste("D) Simulation Replicate 4", sep = "")#
    plot(Row*5,Column*.03,xlim=c(0,700),ylim=c(0,0.9),xlab=expression("Shape (" ~ alpha ~ ")"),ylab=expression("Scale (" ~ beta ~ ")"), main=TitleVector, col=ColorViridis[ColorsToPrint],cex.lab=2,cex.main=2.5,cex.axis=2,pch=19, xaxt = 'n')#
    axis(1,at = c(0,175,350,525,700), labels = c("3", "110", "240", "1245", "2310"), cex.axis  = 1.5)#
    #points(29.1767603378041,0.190915110603425,col="red",pch=19,lwd=3)#
    #lines(1:350,MeanPopExpansionBoyko/1:350,lty="dashed",lwd=2,col="green")#
    #lines(1:140*5,BestFit*0.03,lty="dashed",lwd=2,col="red")#
    legend("center",format(UniqueNumbers), pch=19, col=ColorViridis,cex=1,title="Number of simulations",bty="n")#
    abline(v=350, lty= 3)#
    #lines(1:350,(MeanPopExpansionBoyko/2)/1:350,lty="dashed",lwd=2,col="green")#
}#
#
dev.off()
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2.31 / 3.31 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.6978852 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(196.1504 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure26_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="B) Simulation Replicate 2", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((196.1504 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="C) Simulation Replicate 3", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="D) Simulation Replicate 4", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()#
#
AncPopSize <- c(784,784,784,784,1443,1166,1110,760,959,739)#
SumValuesOne <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(1443 * 7215 + 20341 * 24),(1116 * 5830 + 23992 * 27),(1110 * 5550 + 22775 * 24),(760 * 3800 + 28031 * 26),(959 * 4795 + 23563 * 27),(739 * 3695 + 27679 * 27))#
MutNumber <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(10000 * 7215 + 10000 * 24 * 20341/1443),(10000 * 5830 + 10000 * 27 * 23992/1166),(10000 * 5550 + 10000 * 24 * 22775 / 1110),(10000 * 3800 + 10000 * 26 * 28031/760),(10000 * 4795 + 10000 * 27 * 23563/959),(10000 * 3695 + 10000 * 27 * 27679/739))#
#
PlotTitle <- c("E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "F) Simulation Replicate 6", "G) Simulation Replicate 7", "H) Simulation Replicate 8", "I) Simulation Replicate 9", "J) Simulation Replicate 10")#
#
pdf("../Figures/SuppFigure26_DFEf_toDFESLiMThreeBins_10Sims.pdf",width=10,height = 14 + 14 * 2/6)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(6,1))#
for (k in 5:10){#
#
    ColorViridis <- viridis(3)#
    ViridisColors <- viridis(3)#
#
    Alpha = 0.184#
    Beta = 319.8626 * 10 * (AncPopSize[k]/2)/10000 * 5#
#
    P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
        P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
        # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
    File <- paste("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_",k,".txt", sep ="")#
    SelectionCoefficientListBoyko <- read.table(File)#
#
    ### P (allele is at 1%)#
    ## Ns sites = 3350065#
    ## Reps = 160#
    ## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
    P_allele_at_OnePercent = 5328/(196.1504 * SumValuesOne[k]) # Original#
    Alpha = 0.11#
    Beta = 8636364 * 0.01 * (AncPopSize[k]/2)/10000 * 5#
#
    # P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
        #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * MutNumber[k])) # Original Test#
        #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
#
    SelectionCoefficientList <- read.table(File)#
#
    TwoNsValues <- SelectionCoefficientList$V2*AncPopSize[k]#
#
    Breaks <- c(0,2.5*0:200 + 2.25)#
#
    Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
    Counts_At_OnePercent_Given2Ns <- Check$counts#
#
    Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
    DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
    DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
    DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
    File <- paste("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep ="")#
    MLE <- read.table(File)#
#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
#
    DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    # MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
    FourNs <- SelectionCoefficientListBoyko$V2 * AncPopSize[k] * 2#
#
    for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- MLE$V1[j] + 1#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }else {#
        ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
        ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
         MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
         DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
    }#
    GammaLimit <- Divisions * 2.5#
    LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * MutNumber[k]))#
#
    Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
    for (j in 1:100){#
        Row <- ( MLE$V1 ) %% 70 + 1#
        Column <- floor(( MLE$V1 ) / 70) + 1#
        DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
        P_Allele_Is_2Ns_given_OnePercent <- c()#
        for (i in 1:Divisions){#
            UpperBound <- i*5 + 2#
            LowerBound <- (i-1)*5 + 3#
            CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
            P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
        }#
        OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
        OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
        OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
        if (j==1){#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
            OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        }else{#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
            OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
        }#
    }#
#
    Labels <- c()#
    for (i in 1:20){#
        Label <- paste((i-1)*5,"-",i*5,sep="")#
        Labels <- c(Labels,Label)#
    }#
    Label <- paste(">","150",sep="")#
    Labels <- c("0-5","50-55","100-150",Label)#
#
    # pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
    # par(mar=c(4.1,5.1,2.6,2.1))#
    # par(mfrow = c(4,1))#
    PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
    # plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
        #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSums <- c()#
    for (i in 1:100){#
        CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
    }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartTwo <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
    # lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
        #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    # CurrentSums <- c()#
    # for (i in 1:100){#
    #     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
    # }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartThree <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
        #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSumsOnePercent <- c()#
    SumP_2Ns_OnePercent <- c()#
    for (i in 1:100){#
        CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
        SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
    }#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    # segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartFour <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
    # for (i in 1:30){#
    #    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
    # }#
    # segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
    counts <- table(mtcars$vs, mtcars$gear)#
    counts <- rbind(counts,c(1,2,3))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # for (i in 4:20){#
    # counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
    # }#
#
    # counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
    AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
    counts[1,1] <- PartOne[1]#
    counts[1,2] <- sum(PartOne[2:20])#
    counts[1,3] <- 1-sum(PartOne[1:20])#
    counts[2,1] <- PartTwo[1]#
    counts[2,2] <- PartTwo[2]#
    counts[2,3] <- 1-sum(PartTwo[1:2])#
    counts[3,1] <- PartFour[1]#
    counts[3,2] <- PartFour[2]#
    counts[3,3] <- 1-sum(PartFour[1:2])#
    BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
    colnames(counts) <- c("0-5", "5-100", ">100")#
    rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
    barplot(counts, main=PlotTitle[k], ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
    legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
    # axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
    Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
    Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
    Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
    Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
    # legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
            points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
    points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSums)#
#
    points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
    FinalMedian <- c()#
    TotalDifference <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
    }#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
    points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSumsOnePercent)#
#
    points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
}#
#
dev.off()#
#
############################################################################### Full data  ##################################################################################
#
TotalDifferences <- matrix(nrow=1000,ncol=21)#
for (i in 1:1000){#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
        j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,2] <- sum(DifferenceMatrix[i,2:20]) - sum(BoykoParams[Integer,2])#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,3] <- DifferenceMatrix[i,21] - BoykoParams[Integer,3]#
}#
#
expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")")#
#
pdf("../Figures/SuppFigure29_BeanplotDifferencesThreeBins.pdf",width=10,height = 14)#
par(mar=c(5.1,6.1,2.6,2.1))#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
dev.off()#
#
Vector <- seq(from = 1, to = 100, by = 1)#
#
for (i in 1:1000){#
    Vector[i] <- sum(TotalDifferences[i,2:20])#
}
library(here)#
library(viridis)#
library(beanplot)#
#
Divisions <- 20#
DivisionsPlusOne <- Divisions + 1#
#
AllPartTwo <- c()#
DifferencesMatrix <- matrix(nrow=21,ncol=400)#
################################################### Two plots on same place #############################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (926/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
### P (allele is at 1%)#
## Ns sites = 29277495#
## Reps = 160#
## Mut rate two thirds = 2.31 / 3.31 * 0.000000012*5#
## Individuals time epochs = 1000 * 10000 + 10000 * 20#
## Per individual = ( 29277495 * 160 * 0.6978852 * 0.00000006 )#
###
#
P_allele_at_OnePercent = 5328/(196.1504 * (926 * 4630 + 23166 * 28)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (926/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_1.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*926#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_1.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *926 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix (ProbsMouse,nrow=1)#
    DifferenceMatrix <- ProbsMouse#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 4630 + 10000 * 28 * 23166/926 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    DifferencesMatrix[1:DivisionsPlusOne,i] <- OtherProbsMouse[i]#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
pdf("../Figures/SuppFigure26_DFEf_toDFESLiMThreeBins.pdf",width=10,height = 14)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(4,1))#
#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
#
BoykoParams <- c()#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="A) Simulation Replicate 1", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# axis(1, at=c(1:DivisionsPlusOne), labels=FALSE,cex.lab=1,cex=1,cex.axis=1)#
# axis(1, at=c(1,11,21,31), labels=Labels,cex.lab=2,cex=2,cex.axis=2,col.ticks="red")#
#
############################################# Plot 2#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1034/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (1034 * 5170 + 24463 * 25)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1034/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_2.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1034#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_2.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1034 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5170 + 10000 * 25 * 24463/1034 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="B) Simulation Replicate 2", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
# dev.off()#
################################################################### Figure 3 ####################################################################
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (1146/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/((196.1504 * (1146 * 5730 + 26374 * 24))) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (1146/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_3.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*1146#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_3.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *1146 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 5730 + 10000 * 24 * 26374/1146 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="C) Simulation Replicate 3", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
################################################################### Figure 4 ####################################################################
#
ColorViridis <- viridis(3)#
ViridisColors <- viridis(3)#
#
Alpha = 0.184#
Beta = 319.8626 * 10 * (784/2)/10000 * 5#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
    # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientListBoyko <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
### P (allele is at 1%)#
## Ns sites = 3350065#
## Reps = 160#
## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
P_allele_at_OnePercent = 5328/(196.1504 * (784 * 3920 + 26571 * 26)) # Original#
Alpha = 0.11#
Beta = 8636364 * 0.01 * (784/2)/10000 * 5#
#
# P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:200){#
    # print (i)#
    Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
    #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 ))) # Original Test#
    #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
}#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_4.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*784#
#
Breaks <- c(0,2.5*0:200 + 2.25)#
#
Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
#
MLE <- read.table("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_4.txt")#
#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
#
DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
P_Allele_Is_2Ns_given_OnePercent <- c()#
# MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
FourNs <- SelectionCoefficientListBoyko$V2 *784 * 2#
#
for (j in 1:100){#
Row <- ( MLE$V1 ) %% 70 + 1#
Column <- floor(( MLE$V1 ) / 70) + 1#
DFEParameterNumber <- MLE$V1[j] + 1#
P_Allele_Is_2Ns_given_OnePercent <- c()#
for (i in 1:Divisions){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}else {#
    ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
}#
if (j==1){#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
    DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}else{#
    #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
     MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
     DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
}#
}#
GammaLimit <- Divisions * 2.5#
LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * (10000.0 * 3920 + 10000 * 26 * 26571/784 )))#
#
Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
    OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
    OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
        OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
Labels <- c()#
for (i in 1:20){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
Label <- paste(">","150",sep="")#
Labels <- c("0-5","50-55","100-150",Label)#
#
# pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
# par(mar=c(4.1,5.1,2.6,2.1))#
# par(mfrow = c(4,1))#
PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
# plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSums <- c()#
for (i in 1:100){#
    CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
}#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartTwo <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
# lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
# CurrentSums <- c()#
# for (i in 1:100){#
#     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
# }#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSums,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
#segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartThree <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
CurrentSumsOnePercent <- c()#
SumP_2Ns_OnePercent <- c()#
for (i in 1:100){#
    CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
    SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
}#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
#segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
#    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
#    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
# segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
#points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
#points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
FinalMedian <- c(FinalMedian,Quantiles[1])#
PartFour <- FinalMedian#
# lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
# for (i in 1:30){#
#    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
# }#
# segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# for (i in 4:20){#
# counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
# }#
#
# counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
counts[1,1] <- PartOne[1]#
counts[1,2] <- sum(PartOne[2:20])#
counts[1,3] <- 1-sum(PartOne[1:20])#
counts[2,1] <- PartTwo[1]#
counts[2,2] <- PartTwo[2]#
counts[2,3] <- 1-sum(PartTwo[1:2])#
counts[3,1] <- PartFour[1]#
counts[3,2] <- PartFour[2]#
counts[3,3] <- 1-sum(PartFour[1:2])#
BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
colnames(counts) <- c("0-5", "5-100", ">100")#
rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
barplot(counts, main="D) Simulation Replicate 4", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
# axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
# legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
FinalMedian <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
}#
#
Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
CurrentMean <- mean(CurrentSums)#
#
points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
FinalMedian <- c()#
TotalDifference <- c()#
for (i in 1:1){#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
}#
#
Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
CurrentMean <- mean(CurrentSumsOnePercent)#
#
points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
dev.off()#
#
AncPopSize <- c(784,784,784,784,1443,1166,1110,760,959,739)#
SumValuesOne <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(1443 * 7215 + 20341 * 24),(1116 * 5830 + 23992 * 27),(1110 * 5550 + 22775 * 24),(760 * 3800 + 28031 * 26),(959 * 4795 + 23563 * 27),(739 * 3695 + 27679 * 27))#
MutNumber <- c((784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(784 * 3920 + 26571 * 26),(10000 * 7215 + 10000 * 24 * 20341/1443),(10000 * 5830 + 10000 * 27 * 23992/1166),(10000 * 5550 + 10000 * 24 * 22775 / 1110),(10000 * 3800 + 10000 * 26 * 28031/760),(10000 * 4795 + 10000 * 27 * 23563/959),(10000 * 3695 + 10000 * 27 * 27679/739))#
#
PlotTitle <- c("E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "E) Simulation Replicate 5", "F) Simulation Replicate 6", "G) Simulation Replicate 7", "H) Simulation Replicate 8", "I) Simulation Replicate 9", "J) Simulation Replicate 10")#
#
pdf("../Figures/SuppFigure26_DFEf_toDFESLiMThreeBins_10Sims.pdf",width=10,height = 14 + 14 * 2/6)#
par(mar=c(4.1,5.1,2.6,2.1))#
par(mfrow = c(6,1))#
for (k in 5:10){#
#
    ColorViridis <- viridis(3)#
    ViridisColors <- viridis(3)#
#
    Alpha = 0.184#
    Beta = 319.8626 * 10 * (AncPopSize[k]/2)/10000 * 5#
#
    P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
        P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*((160000)*2500*1000)) # Original Test#
        # NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
    File <- paste("../Results/ExitSValues/ExitOnePercentSValuesTestBoyko_",k,".txt", sep ="")#
    SelectionCoefficientListBoyko <- read.table(File)#
#
    ### P (allele is at 1%)#
    ## Ns sites = 3350065#
    ## Reps = 160#
    ## Total = 3350065 * 160 * 2 / 3 = 1.491016e-05#
#
    P_allele_at_OnePercent = 5328/(196.1504 * SumValuesOne[k]) # Original#
    Alpha = 0.11#
    Beta = 8636364 * 0.01 * (AncPopSize[k]/2)/10000 * 5#
#
    # P_Allele_Is_2Ns <- c()#
    NumberOfAllelesAt2Ns <- c()#
    RealProbs <- c()#
    # P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
    for (i in 1:200){#
        # print (i)#
        Prob <- pgamma(i*2.5 - 0.25,Alpha,scale=Beta) - pgamma(max((i-1)*2.5 - 0.25,0),Alpha,scale=Beta)#
        #   P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
        NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(400 * MutNumber[k])) # Original Test#
        #    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*(1))#
    }#
#
    SelectionCoefficientList <- read.table(File)#
#
    TwoNsValues <- SelectionCoefficientList$V2*AncPopSize[k]#
#
    Breaks <- c(0,2.5*0:200 + 2.25)#
#
    Check <- hist(TwoNsValues, breaks= Breaks, plot = FALSE)#
    Counts_At_OnePercent_Given2Ns <- Check$counts#
#
    Probabilities_At_One_Percent_Given_2NsMouse= Counts_At_OnePercent_Given2Ns[1:50]/ (NumberOfAllelesAt2Ns[1:50])#
    DFEParsOne <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilities.txt")#
#
    DFEParsTwo <- read.table ("../Scripts/Sims/ConstantPopSizeBoyko/ImportanceSamplingSims/AnotherExtraTableOfProbabilitiesSmall.txt")#
#
    DFEPars <- rbind(DFEParsOne, DFEParsTwo)#
    File <- paste("../Results/MLEDFEs/SelectionPopExpansionSLiMPopExpansionChangedRecRateBoykoDFE_",k,".txt", sep ="")#
    MLE <- read.table(File)#
#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
#
    DFEParameterNumber <- (Column[1]-1)*70 + Row[1]#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    # MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(nrow=1,ncol=50)#
#
    FourNs <- SelectionCoefficientListBoyko$V2 * AncPopSize[k] * 2#
#
    for (j in 1:100){#
    Row <- ( MLE$V1 ) %% 70 + 1#
    Column <- floor(( MLE$V1 ) / 70) + 1#
    DFEParameterNumber <- MLE$V1[j] + 1#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    for (i in 1:Divisions){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    ProbsMouse <- P_Allele_Is_2Ns_given_OnePercent[1:Divisions] * P_allele_at_OnePercent#
    ProbsMouse <- ProbsMouse[1:Divisions] / Probabilities_At_One_Percent_Given_2NsMouse[1:Divisions]#
    if (sum (ProbsMouse[1:Divisions]) < 1.0 ){#
    ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }else {#
        ProbsMouse <- ProbsMouse[1:Divisions] / sum(ProbsMouse[1:Divisions])#
        ProbsMouse[DivisionsPlusOne] <- 1 - sum (ProbsMouse[1:Divisions])#
    }#
    if (j==1){#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        MatrixFinalProbs <- matrix(ProbsMouse,nrow=1)#
        DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }else{#
        #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
         MatrixFinalProbs <- rbind ( MatrixFinalProbs,ProbsMouse)#
         DifferenceMatrix <- rbind (DifferenceMatrix,ProbsMouse)#
    }#
    }#
    GammaLimit <- Divisions * 2.5#
    LastAlleleNumber <- (1-pgamma(GammaLimit,Alpha,scale=Beta))* ((400 * MutNumber[k]))#
#
    Probabilities_At_One_Percent_Given_2NsMouse= c(Counts_At_OnePercent_Given2Ns[1:Divisions],sum(Counts_At_OnePercent_Given2Ns[DivisionsPlusOne:200]))/ c((NumberOfAllelesAt2Ns[1:Divisions]),LastAlleleNumber )#
    for (j in 1:100){#
        Row <- ( MLE$V1 ) %% 70 + 1#
        Column <- floor(( MLE$V1 ) / 70) + 1#
        DFEParameterNumber <- (Column[j]-1)*70 + Row[j]#
        P_Allele_Is_2Ns_given_OnePercent <- c()#
        for (i in 1:Divisions){#
            UpperBound <- i*5 + 2#
            LowerBound <- (i-1)*5 + 3#
            CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
            P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
        }#
        OtherProbsMouse <- c(P_Allele_Is_2Ns_given_OnePercent[1:Divisions],1-sum(P_Allele_Is_2Ns_given_OnePercent[1:Divisions]))#
        OtherProbsMouse <-  OtherProbsMouse[1:DivisionsPlusOne] / Probabilities_At_One_Percent_Given_2NsMouse[1:DivisionsPlusOne]#
        OtherProbsMouse <- OtherProbsMouse[1:DivisionsPlusOne] / sum (OtherProbsMouse[1:DivisionsPlusOne] )#
        if (j==1){#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
            OtherMatrixFinalProbs <- matrix(OtherProbsMouse,nrow=1)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
        }else{#
            #    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
            OtherMatrixFinalProbs <- rbind ( OtherMatrixFinalProbs,OtherProbsMouse)#
            MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent, P_Allele_Is_2Ns_given_OnePercent)#
        }#
    }#
#
    Labels <- c()#
    for (i in 1:20){#
        Label <- paste((i-1)*5,"-",i*5,sep="")#
        Labels <- c(Labels,Label)#
    }#
    Label <- paste(">","150",sep="")#
    Labels <- c("0-5","50-55","100-150",Label)#
#
    # pdf("../Figures/SuppFigureSX12_DFEf_toDFESLiM.pdf",width=10,height = 14)#
    # par(mar=c(4.1,5.1,2.6,2.1))#
    # par(mfrow = c(4,1))#
    PartOne <- c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions]))#
#
    # plot(1:DivisionsPlusOne,c(P_Allele_Is_2Ns[1:Divisions], 1 - sum(P_Allele_Is_2Ns[1:Divisions])), col=ColorViridis[1], ylim=c(0,1.0), xaxt="n", ylab="Probability", xlab="4Ns",lwd=5,cex.lab=2,cex.axis=2,cex.lab=2, main = "A) Constant size - Human DFE",cex.main = 2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.05,0.95))#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
        #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
        Quantiles <- quantile(MatrixFinalProbs[,1],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSums <- c()#
    for (i in 1:100){#
        CurrentSums <- c(CurrentSums, sum(MatrixFinalProbs[i,2:20]))#
    }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartTwo <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[2],lwd=4)#
    # lines(1:31,c(P_Allele_Is_2Ns_given_OnePercent[1:30],  1 - sum(P_Allele_Is_2Ns_given_OnePercent[1:30])),col=ColorViridis[4],lwd=3)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
        #    points(i,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
        Quantiles <- quantile(OtherMatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    # CurrentSums <- c()#
    # for (i in 1:100){#
    #     CurrentSums <- c(CurrentSums, sum(OtherMatrixFinalProbs[i,2:20]))#
    # }#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSums,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    #segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[3], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[3],pch=25, bg = ColorViridis[3],cex=1.5)#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[3],pch=24, bg = ColorViridis[3],cex=1.5)#
    Quantiles <- quantile(OtherMatrixFinalProbs[,DivisionsPlusOne],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartThree <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[3],lwd=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        #    segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
        #    points(i,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
        #    points(i,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    CurrentSumsOnePercent <- c()#
    SumP_2Ns_OnePercent <- c()#
    for (i in 1:100){#
        CurrentSumsOnePercent <- c(CurrentSumsOnePercent, sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,2:20]))#
        SumP_2Ns_OnePercent <- c(SumP_2Ns_OnePercent, 1 - sum (MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20] ))#
    }#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points(i,Quantiles[1],col=ColorViridis[2],pch=25, bg = ColorViridis[2],cex=2)#
    #    points(i,Quantiles[2],col=ColorViridis[2],pch=24, bg = ColorViridis[2],cex=2)#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    # segments (31, Quantiles[1],x1=31,y1=Quantiles[2],col=ColorViridis[4], lwd = 3, lty=2)#
    #points(DivisionsPlusOne,Quantiles[1],col=ColorViridis[4],pch=25, bg = ColorViridis[4])#
    #points(DivisionsPlusOne,Quantiles[2],col=ColorViridis[4],pch=24, bg = ColorViridis[4])#
    Quantiles <- quantile(SumP_2Ns_OnePercent, c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    PartFour <- FinalMedian#
    # lines(1:DivisionsPlusOne,FinalMedian,col=ColorViridis[4],lwd=2)#
    # for (i in 1:30){#
    #    segments (i,OtherUpSDProbsMouse[i],x1=i,y1=max(OtherDownSDProbsMouse[i],0),col=ColorViridis[3], lwd = 3, lty = 2)#
    # }#
    # segments (31, 1 - sum(OtherUpSDProbsMouse[1:30]),x1=31,y1=max( 1 - sum(OtherDownSDProbsMouse[1:30])),col=ColorViridis[3], lwd = 3, lty = 2)#
    counts <- table(mtcars$vs, mtcars$gear)#
    counts <- rbind(counts,c(1,2,3))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # counts <- rbind(counts,c(1,2,3))#
    # counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
    # for (i in 4:20){#
    # counts <- cbind(counts,c(PartOne[i],PartTwo[i],PartFour[i]))#
    # }#
#
    # counts <- cbind(counts,c(1-sum(PartOne[1:20]),1-sum(PartTwo[1:20]),1-sum(PartFour[1:20])))#
    AllPartTwo <- c(AllPartTwo,PartTwo[1:20],1-sum(PartTwo[1:20]))#
    counts[1,1] <- PartOne[1]#
    counts[1,2] <- sum(PartOne[2:20])#
    counts[1,3] <- 1-sum(PartOne[1:20])#
    counts[2,1] <- PartTwo[1]#
    counts[2,2] <- PartTwo[2]#
    counts[2,3] <- 1-sum(PartTwo[1:2])#
    counts[3,1] <- PartFour[1]#
    counts[3,2] <- PartFour[2]#
    counts[3,3] <- 1-sum(PartFour[1:2])#
    BoykoParams <- rbind(BoykoParams,counts[1,1:3])#
#
    colnames(counts) <- c("0-5", "5-100", ">100")#
    rownames(counts) <- c("Real P(4Ns | DFE, D)", "Inferred P(4Ns| DFE, D)", "Inferred P(4Ns| 1%, DFE, D)")#
#
    barplot(counts, main=PlotTitle[k], ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors, beside=TRUE, cex.lab=2, cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.5, bty = "n"), cex.main = 2, ylim = c(0,1.1))#
#
    legend("topleft", c(expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression('P'[psi] * "(" * bolditalic(s[j]) * " | "* italic(f) * ", "* italic(D) *")")), col=ViridisColors, pch=19,bty="n")#
    # axis (2,at=c(0,2,4,6,8,10), labels = c(0,10^-8,10^-6,10^-4,10^-2,10^0), cex.axis = 1.5, cex.lab = 1.5)#
    Expression <- expression(paste("Real P(",bolditalic(s[j])," | DFE, D)"))#
    Expression2 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 4"))#
    Expression3 <- expression(paste("Inferred P(",bolditalic(s[j])," | DFE, D)  Equation 5"))#
    Expression4 <- expression(paste("Inferred P(",bolditalic(s[j])," | 1%, DFE, D)"))#
    # legend("top",c(Expression, Expression2, Expression3, Expression4),pch=19,col=ColorViridis,cex=2)#
#
    FinalMedian <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
            points((i - 1)* 4 + 2.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
            points((i - 1)* 4 + 2.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
    }#
#
    Quantiles <- quantile(MatrixFinalProbs[,DivisionsPlusOne],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,DivisionsPlusOne])#
#
    points(2*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSums,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSums)#
#
    points(1*4 + 2.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 2.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 2.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
    FinalMedian <- c()#
    TotalDifference <- c()#
    for (i in 1:1){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 3.5, Quantiles[1],col="black",pch=24, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, Quantiles[2],col="black", pch=25, bg = "black", cex=1)#
        points((i - 1)* 4 + 3.5, CurrentMean,col="black", pch=8, bg = "black", cex=1)#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        TotalDifference <- c(TotalDifference, 1 - sum(MatrixP_Allele_Is_2Ns_given_OnePercent[i,1:20]))#
    }#
#
    Quantiles <- quantile(SumP_2Ns_OnePercent,c(0.05,0.95))#
    CurrentMean <- mean(SumP_2Ns_OnePercent)#
#
    points(2*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(2*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(2*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
#
    Quantiles <- quantile(CurrentSumsOnePercent,c(0.05,0.95))#
    CurrentMean <- mean(CurrentSumsOnePercent)#
#
    points(1*4 + 3.5, Quantiles[1], col="black", pch=24, bg = "black", cex=1)#
    points(1*4 + 3.5, Quantiles[2], col="black", pch=25, bg = "black", cex=1)#
    points(1*4 + 3.5, CurrentMean, col="black", pch=8, bg = "black", cex=1)#
}#
#
dev.off()#
#
############################################################################### Full data  ##################################################################################
#
TotalDifferences <- matrix(nrow=1000,ncol=21)#
for (i in 1:1000){#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,j] <- DifferenceMatrix[i,j] - BoykoParams[Integer,j]#
        j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,2] <- sum(DifferenceMatrix[i,2:20]) - sum(BoykoParams[Integer,2])#
    j=1#
        Integer <- floor ( (i - 1 ) / 100) + 1#
        TotalDifferences[i,3] <- DifferenceMatrix[i,21] - BoykoParams[Integer,3]#
}#
#
expression("Real" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Inferred"  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")")#
#
pdf("../Figures/SuppFigure27_BeanplotDifferencesThreeBins.pdf",width=10,height = 14)#
par(mar=c(5.1,6.1,2.6,2.1))#
beanplot(TotalDifferences[,1], TotalDifferences[,2], TotalDifferences[,3], ylab= expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")" * " - Real "  ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ,xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=colnames(counts),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
abline(h=0, lty = 2)#
dev.off()#
#
Vector <- seq(from = 1, to = 100, by = 1)#
#
for (i in 1:1000){#
    Vector[i] <- sum(TotalDifferences[i,2:20])#
}
### One Percenters#
#
library(here)#
PriorData <- read.table("../Results/ABCResults/ParametersAndStatisticsNotCpG50000.txt")#
#
Posterior100 <- read.table("../Results/ABCResults/BestNotCpGOrdered100Sims.txt")#
#
pdf("../Figures/SuppFigure28_DemModelInference.pdf",height=35/6,width=7*2.2/4)#
#
par(mfrow=c(5,2),mar=c(2.1,1.1,1.1,2.1),mgp=c(3,0,0))#
#
plot(density(Posterior100$V4,from=0,to=1449),col="blue",xlab="",ylab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V4,from=0,to=1449))#
legend("topright",c(expression(T[1]),"median = 243"),bty="n")#
title(xlab="Prior ~ unif (0, 1449)", line=0)#
#axis(1,"Prior ~ unif(0, 1449)")#
plot(density(Posterior100$V2,from=1000,to=1000000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V2,from=1000,to=1000000))#
legend("bottom",c(expression(N[1]),"median = 411155"),bty="n")#
title(xlab="Prior ~ unif (1000, 1000000)", line=0)#
plot(density(Posterior100$V3,from=500,to=20000),col="blue",ylab="",xlab="",main="",xaxt="n",yaxt="n")#
lines(density(PriorData$V3,from=500,to=20000))#
legend("topright",c(expression(N[2]),"median = 3184.5"),bty="n")#
title(xlab="Prior ~ unif (500, 20000)", line=0)#
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10), axes=FALSE)#
legend("center",c("Prior","Posterior"),pch=19,col=c("black","blue"),bty="n")#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(lawstat)#
#
MissenseVariants <- read.table("../Results/FunctionalContent_BValues/ProportionMis.txt")#
SynonymousVariants <- read.table("../Results/FunctionalContent_BValues/ProportionSyn.txt")#
MissenseVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticMis.txt")#
SynonymousVariantsB <- read.table("../Results/FunctionalContent_BValues/B_StatisticSyn.txt")#
pdf("../Figures/SuppFigure29_PropMisSyn.pdf",width=18,height=12/2)#
par(mfrow=c(1,3))#
par(mar=c(5.1,5.1,4.1,1.1))#
#
beanplot(MissenseVariants$V1/500000, SynonymousVariants$V1/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of exonic positions",xlab="Type of variants",main="A) Percentage of exonic positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariants$V2/500000, SynonymousVariants$V2/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of PhastCons positions",xlab="Type of variants",main="B) Percentage of PhastCons positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
beanplot(MissenseVariantsB$V3/1000, SynonymousVariantsB$V3/1000 ,names=c("Syn","Mis"),ylab="Average B values",xlab="Type of variants",main="C) Average B values in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5)#
#
dev.off()#
#
mean(MissenseVariants$V1/500000)#
mean(MissenseVariants$V2/500000)#
mean(MissenseVariantsB$V3/1000)#
#
mean(SynonymousVariants$V1/500000)#
mean(SynonymousVariants$V2/500000)#
mean(SynonymousVariantsB$V3/1000)#
#
median(MissenseVariants$V1/500000)#
median(MissenseVariants$V2/500000)#
median(MissenseVariantsB$V3/1000)#
#
median(SynonymousVariants$V1/500000)#
median(SynonymousVariants$V2/500000)#
median(SynonymousVariantsB$V3/1000)#
#
var(MissenseVariants$V1/500000)#
var(MissenseVariants$V2/500000)#
var(MissenseVariantsB$V3/1000)#
#
var(SynonymousVariants$V1/500000)#
var(SynonymousVariants$V2/500000)#
var(SynonymousVariantsB$V3/1000)#
#
wilcox.test(MissenseVariants$V1,SynonymousVariants$V1)#
wilcox.test(MissenseVariants$V2,SynonymousVariants$V2)#
wilcox.test(MissenseVariantsB$V3/1000,SynonymousVariantsB$V3/1000)#
y <- c(MissenseVariants$V1,SynonymousVariants$V1)#
group <- as.factor(c(rep(1, length(MissenseVariants$V1)), rep(2, length(SynonymousVariants$V1))))#
levene.test(y,group)#
y <- c(MissenseVariants$V2,SynonymousVariants$V2)#
group <- as.factor(c(rep(1, length(MissenseVariants$V1)), rep(2, length(SynonymousVariants$V1))))#
levene.test(y,group)#
y <- c(MissenseVariantsB$V3/1000,SynonymousVariantsB$V3/1000)#
group <- as.factor(c(rep(1, length(MissenseVariantsB$V3)), rep(2, length(SynonymousVariantsB$V3))))#
levene.test(y,group)#
#
#################################################### Non CpG Sites#
MissenseVariants <- read.table("../Data/UCSCGenes_BStatistic/ProportionMis.txt")#
SynonymousVariants <- read.table("../Data/UCSCGenes_BStatistic/ProportionSyn.txt")#
MissenseVariantsB <- read.table("../Data/UCSCGenes_BStatistic/B_StatisticMis.txt")#
SynonymousVariantsB <- read.table("../Data/UCSCGenes_BStatistic/B_StatisticSyn.txt")#
#
ArrayNS <- read.table("../Data/Plink/CpGMisOnePercentNumberPositionsVar.txt")#
ArraySyn <- read.table("../Data/Plink/CpGSynOnePercentNumberPositionsVar.txt")#
pdf("../Figures/SuppFigure29_PropMisSynNotCpG.pdf",width=18,height=12/2)#
par(mfrow=c(1,3))#
par(mar=c(5.1,5.1,4.1,1.1))#
#
beanplot(SynonymousVariants$V1[ArraySyn$V1+1]/500000, MissenseVariants$V1[ArrayNS$V1+1]/500000 ,names=c("Synonymous","Nonsynonymous"), ylab="Percentage of exonic positions",xlab="Type of variants",main="A) Percentage of exonic positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
beanplot( SynonymousVariants$V2[ArraySyn$V1+1]/500000 ,MissenseVariants$V2[ArrayNS$V1+1]/500000, names=c("Synonymous","Nonsynonymous"), ylab="Percentage of PhastCons positions",xlab="Type of variants",main="B) Percentage of PhastCons positions in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
beanplot( SynonymousVariantsB$V3[ArraySyn$V1+1]/1000  , MissenseVariantsB$V3[ArrayNS$V1+1]/1000, names=c("Synonymous","Nonsynonymous"),ylab="Average B values",xlab="Type of variants",main="C) Average B values in a 250kb\nregion around the 1% frequency variants",cex.axis=1.7,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,log="",overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#
dev.off()#
#
mean(MissenseVariants$V1[ArrayNS$V1+1]/500000)#
mean(MissenseVariants$V2[ArrayNS$V1+1]/500000)#
mean(MissenseVariantsB$V3[ArrayNS$V1+1]/1000)#
#
mean(SynonymousVariants$V1[ArraySyn$V1+1]/500000)#
mean(SynonymousVariants$V2[ArraySyn$V1+1]/500000)#
mean(SynonymousVariantsB$V3[ArraySyn$V1+1]/1000)#
#
median(MissenseVariants$V1[ArrayNS$V1+1]/500000)#
median(MissenseVariants$V2[ArrayNS$V1+1]/500000)#
median(MissenseVariantsB$V3[ArrayNS$V1+1]/1000)#
#
median(SynonymousVariants$V1[ArraySyn$V1+1]/500000)#
median(SynonymousVariants$V2[ArraySyn$V1+1]/500000)#
median(SynonymousVariantsB$V3[ArraySyn$V1+1]/1000)#
#
var(MissenseVariants$V1[ArrayNS$V1+1]/500000)#
var(MissenseVariants$V2[ArrayNS$V1+1]/500000)#
var(MissenseVariantsB$V3[ArrayNS$V1+1]/1000)#
#
var(SynonymousVariants$V1[ArraySyn$V1+1]/500000)#
var(SynonymousVariants$V2[ArraySyn$V1+1]/500000)#
var(SynonymousVariantsB$V3[ArraySyn$V1+1]/1000)#
#
wilcox.test(MissenseVariants$V1[ArrayNS$V1+1],SynonymousVariants$V1[ArraySyn$V1+1])#
wilcox.test(MissenseVariants$V2[ArrayNS$V1+1],SynonymousVariants$V2[ArraySyn$V1+1])#
wilcox.test(MissenseVariantsB$V3[ArrayNS$V1+1]/1000,SynonymousVariantsB$V3[ArraySyn$V1+1]/1000)#
y <- c(MissenseVariants$V1[ArrayNS$V1+1],SynonymousVariants$V1[ArraySyn$V1+1])#
group <- as.factor(c(rep(1, length(MissenseVariants$V1[ArrayNS$V1+1])), rep(2, length(SynonymousVariants$V1[ArraySyn$V1+1]))))#
levene.test(y,group)#
y <- c(MissenseVariants$V2[ArrayNS$V1+1],SynonymousVariants$V2[ArraySyn$V1+1])#
group <- as.factor(c(rep(1, length(MissenseVariants$V1[ArrayNS$V1+1])), rep(2, length(SynonymousVariants$V1[ArraySyn$V1+1]))))#
levene.test(y,group)#
y <- c(MissenseVariantsB$V3[ArrayNS$V1+1]/1000,SynonymousVariantsB$V3[ArraySyn$V1+1]/1000)#
group <- as.factor(c(rep(1, length(MissenseVariantsB$V3[ArrayNS$V1+1])), rep(2, length(SynonymousVariantsB$V3[ArraySyn$V1+1]))))#
levene.test(y,group)
library(here)#
#
FileNames <- c("../Results/RecMaps/LeftBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/RightBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/LeftBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt", "../Results/RecMaps/RightBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
# Table <- as.numeric(Table)#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../Figures/SuppFigure21_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
RecMapNS <- RecMap[1:250000]/(27300)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
RecMapNS <- c(RecMapNS,RecMap[1:250000]/(27300))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
AbsDifference <- 0#
TotalMean <- mean(CurrentRecRate)#
#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
FirstDataBoxPlots <- BoxplotAbsDiff#
#
# boxplot(BoxplotAbsDiff)#
#
for (j in 3:4){#
    Table <- read.table(FileNames[j])#
    RecMap <- rep(0,250001)#
    ColumnToCheck <- Table$V2[1]#
    StartingPosition <- Table$V3[1]#
    EndingPosition <- Table$V4[1]#
    NumberOfVariants <- 0#
    CurrentPosition <- 0#
    BoxplotAbsDiff <- c()#
    CurrentRecRate <- rep(0,250001)#
#
    for (i in 1:nrow(Table)){#
        if (Table$V2[i] != ColumnToCheck ){#
            CurrentPosition <- 0#
            StartingPosition <- Table$V3[i]#
            EndingPosition <- Table$V4[i]#
            NumberOfVariants <- NumberOfVariants + 1#
            ColumnToCheck <- Table$V2[i]#
            CurSum <- c()#
            CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
            TotalMean <- mean(CurrentRecRate)#
            AbsDifference <- 0#
            for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
            }#
            AbsDifference <- AbsDifference / 5#
            if (AbsDifference == "NaN"){#
                AbsDifference <- 0#
            }#
#
            BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
            CurrentRecRate <- rep(0,250001)#
#
            #        break#
        }#
        if (i %% 1000 == 0){#
            print (i)#
        }#
        ToAdd <- Table$V3[i] - StartingPosition + 1#
        TheEnd <- Table$V4[i] - StartingPosition#
        #    print (ToAdd)#
        #    print (TheEnd)#
        #    break#
        RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
        CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
#
    }#
    if (j == 3){#
        jpeg(filename = "../Figures/SuppFigure21_RecMapPlotsSyn_Sites.jpeg", width = 960, quality = 90)#
        RecMapSyn <- RecMap[1:250000]/(27300)#
        plot(1:250000,RecMap[1:250000]/(15100), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
        axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "Syn Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(25001,1.65e-7,NumbersToPrint[1])#
        text(75001,1.65e-7,NumbersToPrint[2])#
        text(125001,1.65e-7,NumbersToPrint[3])#
        text(175001,1.65e-7,NumbersToPrint[4])#
        text(225001,1.65e-7,NumbersToPrint[5])#
#
    } else {#
        points(250001:500000,RecMap[1:250000]/(15100), pch = 19)#
        RecMapSyn <- c(RecMapSyn,RecMap[1:250000]/(27300))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(275001,1.65e-7,NumbersToPrint[1])#
        text(325001,1.65e-7,NumbersToPrint[2])#
        text(375001,1.65e-7,NumbersToPrint[3])#
        text(425001,1.65e-7,NumbersToPrint[4])#
        text(475001,1.65e-7,NumbersToPrint[5])#
    }#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
#
TotalMean <- mean(CurrentRecRate[1:250000])#
#
AbsDifference <- 0#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
pdf("../Figures/SuppFigure30_BoxPlots.pdf")#
par(mar=c(5.1,6.1,4.1,2.1))#
boxplot(FirstDataBoxPlots/100, BoxplotAbsDiff/100, names = c("Non synonymous","Synonomous"), ylab = expression( plain("sd (") ~ R[s[j]] ~ plain(")") ))#
#
dev.off()#
#
DataLeftSyn <- read.table("../Data/LeftBpRecRatePerVariantSynonymous.txt")#
DataRightSyn <- read.table("../Data/RightBpRecRatePerVariantSynonymous.txt")#
#
DataSyn <- rbind(DataLeftSyn,DataRightSyn)#
#
DataLeft <- read.table("../Data/LeftBpRecRatePerVariant.txt")#
DataRight <- read.table("../Data/RightBpRecRatePerVariant.txt")#
#
Data <- rbind(DataLeft,DataRight)#
#
mean(DataSyn$V1)#
mean(Data$V1)#
#
wilcox.test(DataSyn$V1,Data$V1)#
DataLeftSyn <- read.table("../Data/LeftBpRecRatePerVariantNoCpGSynonymous.txt")#
DataRightSyn <- read.table("../Data/RightBpRecRatePerVariantNoCpGSynonymous.txt")#
#
DataSyn <- rbind(DataLeftSyn,DataRightSyn)#
#
DataLeft <- read.table("../Data/LeftBpRecRatePerVariantNoCpG.txt")#
DataRight <- read.table("../Data/RightBpRecRatePerVariantNoCpG.txt")#
#
Data <- rbind(DataLeft,DataRight)#
#
mean(DataSyn$V1)#
mean(Data$V1)#
#
wilcox.test(DataSyn$V1,Data$V1)
library(here)#
#
FileNames <- c("../Results/RecMaps/LeftBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/RightBpRecRatePerVariantNoCpGPrintMap269.txt", "../Results/RecMaps/LeftBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt", "../Results/RecMaps/RightBpRecRatePerVariantSynonymousNoCpGPrintMap143.txt")#
#
for (j in 1:2){#
#
Table <- read.table(FileNames[j])#
#
# Table <- as.numeric(Table)#
#
RecMap <- rep(0,250001)#
#
ColumnToCheck <- Table$V2[1]#
StartingPosition <- Table$V3[1]#
EndingPosition <- Table$V4[1]#
#
NumberOfVariants <- 0#
CurrentPosition <- 0#
#
BoxplotAbsDiff <- c()#
#
CurrentRecRate <- rep(0,250001)#
#
for (i in 1:nrow(Table)){#
    if (Table$V2[i] != ColumnToCheck ){#
        CurrentPosition <- 0#
        StartingPosition <- Table$V3[i]#
        EndingPosition <- Table$V4[i]#
        NumberOfVariants <- NumberOfVariants + 1#
        ColumnToCheck <- Table$V2[i]#
        #        break#
        CurSum <- c()#
        CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
        CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
        TotalMean <- mean(CurrentRecRate)#
        AbsDifference <- 0#
        for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
        }#
         AbsDifference <- AbsDifference / 5#
         if (AbsDifference == "NaN"){#
         AbsDifference <- 0#
         }#
        BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
        CurrentRecRate <- rep(0,250001)#
    }#
    if (i %% 1000 == 0){#
    print (i)#
    }#
    ToAdd <- Table$V3[i] - StartingPosition + 1#
    TheEnd <- Table$V4[i] - StartingPosition#
    #    print (ToAdd)#
    #    print (TheEnd)#
    #    break#
    RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
    CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
}#
#
if (j == 1){#
jpeg(filename = "../Figures/SuppFigure30_RecMapPlotsNS_Sites.jpeg", width = 960, quality = 90)#
RecMapNS <- RecMap[1:250000]/(27300)#
plot(1:250000,RecMap[1:250000]/(27300), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "NS Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(25001,1.65e-7,NumbersToPrint[1])#
text(75001,1.65e-7,NumbersToPrint[2])#
text(125001,1.65e-7,NumbersToPrint[3])#
text(175001,1.65e-7,NumbersToPrint[4])#
text(225001,1.65e-7,NumbersToPrint[5])#
#
} else {#
points(250001:500000,RecMap[1:250000]/(27300), pch = 19)#
RecMapNS <- c(RecMapNS,RecMap[1:250000]/(27300))#
Sums <- c()#
Sums <- c(Sums, sum(RecMap[1:50000]))#
Sums <- c(Sums, sum(RecMap[50001:100000]))#
Sums <- c(Sums, sum(RecMap[100001:150000]))#
Sums <- c(Sums, sum(RecMap[150001:200000]))#
Sums <- c(Sums, sum(RecMap[200001:250000]))#
#
NumbersToPrint <- formatC( Sums/(50000*27300),format = "e", digits = 2)#
text(275001,1.65e-7,NumbersToPrint[1])#
text(325001,1.65e-7,NumbersToPrint[2])#
text(375001,1.65e-7,NumbersToPrint[3])#
text(425001,1.65e-7,NumbersToPrint[4])#
text(475001,1.65e-7,NumbersToPrint[5])#
#
}#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
AbsDifference <- 0#
TotalMean <- mean(CurrentRecRate)#
#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
FirstDataBoxPlots <- BoxplotAbsDiff#
#
# boxplot(BoxplotAbsDiff)#
#
for (j in 3:4){#
    Table <- read.table(FileNames[j])#
    RecMap <- rep(0,250001)#
    ColumnToCheck <- Table$V2[1]#
    StartingPosition <- Table$V3[1]#
    EndingPosition <- Table$V4[1]#
    NumberOfVariants <- 0#
    CurrentPosition <- 0#
    BoxplotAbsDiff <- c()#
    CurrentRecRate <- rep(0,250001)#
#
    for (i in 1:nrow(Table)){#
        if (Table$V2[i] != ColumnToCheck ){#
            CurrentPosition <- 0#
            StartingPosition <- Table$V3[i]#
            EndingPosition <- Table$V4[i]#
            NumberOfVariants <- NumberOfVariants + 1#
            ColumnToCheck <- Table$V2[i]#
            CurSum <- c()#
            CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
            CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
            TotalMean <- mean(CurrentRecRate)#
            AbsDifference <- 0#
            for (ind_i in 1:5){#
                AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
            }#
            AbsDifference <- AbsDifference / 5#
            if (AbsDifference == "NaN"){#
                AbsDifference <- 0#
            }#
#
            BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
            CurrentRecRate <- rep(0,250001)#
#
            #        break#
        }#
        if (i %% 1000 == 0){#
            print (i)#
        }#
        ToAdd <- Table$V3[i] - StartingPosition + 1#
        TheEnd <- Table$V4[i] - StartingPosition#
        #    print (ToAdd)#
        #    print (TheEnd)#
        #    break#
        RecMap[ToAdd:TheEnd] <- RecMap[ToAdd:TheEnd] + Table$V5[i]#
        CurrentRecRate[ToAdd:TheEnd] <- Table$V5[i]#
#
    }#
    if (j == 3){#
        jpeg(filename = "../Figures/SuppFigure30_RecMapPlotsSyn_Sites.jpeg", width = 960, quality = 90)#
        RecMapSyn <- RecMap[1:250000]/(27300)#
        plot(1:250000,RecMap[1:250000]/(15100), xlim = c(0,500002),xlab = "Position",ylab = "Recombination rate",xaxt="n", ylim = c(0, 1.65e-7), pch = 19)#
        axis(1,c(1,50001,100001,150001,200001,250001,300001,350001,400001,450001,500002),c("-250 kb","-200 kb","-150 kb","-100 kb", "-50 kb", "Syn Variant","50 kb","100 kb","150kb", "200 kb", "250 kb"))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(25001,1.65e-7,NumbersToPrint[1])#
        text(75001,1.65e-7,NumbersToPrint[2])#
        text(125001,1.65e-7,NumbersToPrint[3])#
        text(175001,1.65e-7,NumbersToPrint[4])#
        text(225001,1.65e-7,NumbersToPrint[5])#
#
    } else {#
        points(250001:500000,RecMap[1:250000]/(15100), pch = 19)#
        RecMapSyn <- c(RecMapSyn,RecMap[1:250000]/(27300))#
        Sums <- c()#
        Sums <- c(Sums, sum(RecMap[1:50000]))#
        Sums <- c(Sums, sum(RecMap[50001:100000]))#
        Sums <- c(Sums, sum(RecMap[100001:150000]))#
        Sums <- c(Sums, sum(RecMap[150001:200000]))#
        Sums <- c(Sums, sum(RecMap[200001:250000]))#
        NumbersToPrint <- formatC( Sums/(50000*15100),format = "e", digits = 2)#
        text(275001,1.65e-7,NumbersToPrint[1])#
        text(325001,1.65e-7,NumbersToPrint[2])#
        text(375001,1.65e-7,NumbersToPrint[3])#
        text(425001,1.65e-7,NumbersToPrint[4])#
        text(475001,1.65e-7,NumbersToPrint[5])#
    }#
}#
#
dev.off()#
#
CurSum <- c()#
CurSum <- c(CurSum,mean(CurrentRecRate[1:50000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[50001:100000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[100000:150000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[150001:200000]))#
CurSum <- c(CurSum,mean(CurrentRecRate[200001:250000]))#
#
TotalMean <- mean(CurrentRecRate[1:250000])#
#
AbsDifference <- 0#
for (ind_i in 1:5){#
    AbsDifference <- AbsDifference + abs (CurSum[ind_i] - TotalMean)#
}#
AbsDifference <- AbsDifference / 5#
#
if (AbsDifference == "NaN"){#
    AbsDifference <- 0#
}#
BoxplotAbsDiff <- c(BoxplotAbsDiff,sd(CurSum))#
#
pdf("../Figures/SuppFigure30_BoxPlots.pdf")#
par(mar=c(5.1,6.1,4.1,2.1))#
boxplot(FirstDataBoxPlots/100, BoxplotAbsDiff/100, names = c("Non synonymous","Synonomous"), ylab = expression( plain("sd (") ~ R[s[j]] ~ plain(")") ))#
#
dev.off()#
#
DataLeftSyn <- read.table("../Data/LeftBpRecRatePerVariantSynonymous.txt")#
DataRightSyn <- read.table("../Data/RightBpRecRatePerVariantSynonymous.txt")#
#
DataSyn <- rbind(DataLeftSyn,DataRightSyn)#
#
DataLeft <- read.table("../Data/LeftBpRecRatePerVariant.txt")#
DataRight <- read.table("../Data/RightBpRecRatePerVariant.txt")#
#
Data <- rbind(DataLeft,DataRight)#
#
mean(DataSyn$V1)#
mean(Data$V1)#
#
wilcox.test(DataSyn$V1,Data$V1)#
DataLeftSyn <- read.table("../Data/LeftBpRecRatePerVariantNoCpGSynonymous.txt")#
DataRightSyn <- read.table("../Data/RightBpRecRatePerVariantNoCpGSynonymous.txt")#
#
DataSyn <- rbind(DataLeftSyn,DataRightSyn)#
#
DataLeft <- read.table("../Data/LeftBpRecRatePerVariantNoCpG.txt")#
DataRight <- read.table("../Data/RightBpRecRatePerVariantNoCpG.txt")#
#
Data <- rbind(DataLeft,DataRight)#
#
mean(DataSyn$V1)#
mean(Data$V1)#
#
wilcox.test(DataSyn$V1,Data$V1)
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_0CoefNum5.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_25CoefNum5.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_50CoefNum5.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_-25CoefNum5.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_-50CoefNum5.txt")#
#
Plot <- paste("../Figures/SuppFigure31_UK10KSelInference.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(Selection4Ns_0$V1, Selection4Ns_Minus50$V1, Selection4Ns_Minus100$V1, Selection4Ns_50$V1, Selection4Ns_100$V1, names=c("0","-25","-50","25","50"), ylab="Estimated 4Ns values", xlab="Real 4Ns values", main="Inference of Selection", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=-25,lty=3)#
abline(h=-50,lty=3)#
abline(h=25,lty=3)#
abline(h=50,lty=3)#
######################## Only negative#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_0.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_-25.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KOnlyNeg4Ns_-50.txt")#
#
beanplot(Selection4Ns_0$V1,Selection4Ns_Minus50$V1,Selection4Ns_Minus100$V1,names=c("0","-25","-50"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="Inference of Selection", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, overall=10000, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
abline(h=0,lty=3)#
abline(h=-25,lty=3)#
abline(h=-50,lty=3)#
# abline(h=25,lty=3)#
# abline(h=50,lty=3)#
#
dev.off()
library(here)#
library(beanplot)#
library(viridis)#
#
pdf("../Figures/SuppFigure32_Selection.pdf",height = 13.66667/(5/3), width = 14/2)#
par(mfrow=c(3,1),mar=c(4.1,6.1,6.1,1.1))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec191.352")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec495.326")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec783.562")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1079.2")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1370.047")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1888.974")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2244.487")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2512.65")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2881.44")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3391.733")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3977.678")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4614.348")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5215.098")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5869.541")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6966.051")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7767.025")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8498.236")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10215.751")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12984.294")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec23003.3")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "A) Selection Inference 4Ns = 0\n 1% +- 0.05% frequency variants")#
Titles <- c(Titles, "B) Selection Inference 4Ns = -25\n 1% +- 0.05% frequency variants")#
Titles <- c(Titles, "C) Selection Inference 4Ns = -50\n 1% +- 0.05% frequency variants")#
Titles <- c(Titles, "D) Selection Inference 4Ns = 25\n 1% +- 0.05% frequency variants")#
Titles <- c(Titles, "E) Selection Inference 4Ns = 50\n 1% +- 0.05% frequency variants")#
#
RMSE_Normal <- 0#
VectorRMSE_Normal <- c()#
#
for (j in 1:5){#
    MatrixData <- matrix(nrow=100, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    RMSE_Normal <- RMSE_Normal + (sum(((MatrixData - YValue[j])^2)/2100))^(1/2)#
    VectorRMSE_Normal <- c(VectorRMSE_Normal, (sum(((MatrixData - YValue[j])^2)/2100))^(1/2))#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-95,95), overallline = "median",ll=0.5)#
abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly720")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly72191.352")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly72495.326")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly72783.562")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly721079.2")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly721370.047")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly721888.974")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly722244.487")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly722512.65")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly722881.44")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly723391.733")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly723977.678")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly724614.348")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly725215.098")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly725869.541")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly726966.051")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly727767.025")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly728498.236")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly7210215.751")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly7212984.294")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnly7223003.3")#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "F) Selection Inference 4Ns = 0 | 1% frequency variants\n (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "G) Selection Inference 4Ns = -25 | 1% frequency variants\n (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "H) Selection Inference 4Ns = -50 | 1% frequency variants\n (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "I) Selection Inference 4Ns = 25 | 1% frequency variants\n (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "J) Selection Inference 4Ns = 50 | 1% frequency variants\n (72 derived alleles in a sample of 7242 chromosomes)")#
#
RMSE_72 <- 0#
VectorRMSE_72 <- c()#
#
for (j in 1:5){#
    MatrixData <- matrix(nrow=100, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    RMSE_72 <- RMSE_72 + (sum(((MatrixData - YValue[j])^2)/2100))^(1/2)#
    VectorRMSE_72 <- c(VectorRMSE_72, (sum(((MatrixData - YValue[j])^2)/2100))^(1/2))#
#
beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-95,95), overallline = "median",ll=0.5, bw = "nrd0")#
abline(h=YValue[j], lty = 2)#
}#
#
ViridisColors <- viridis(2)#
#
plot(VectorRMSE_Normal,ylim= c(0,100), col = ViridisColors[1], xlab = "4Ns", ylab = "RMSE", cex.axis=2.2, cex.lab=2, cex.main=2.5, xaxt= "n", lwd = 6, main = "K) RMSE", type = "b", pch = 19, cex = 3)#
lines(VectorRMSE_72, col = ViridisColors[2], lwd = 3, type = "b", pch = 19, cex = 3)#
legend("topright",legend = c("1% +- 0.05% frequency variants", "1% frequency variants"),col=ViridisColors, pch=19, cex = 2, title = "", bty = "n")#
#
axis(1, at=c(1, 2, 3, 4, 5), labels = c("0", "-25", "-50", "25", "50"), cex.axis=2.2, cex.lab=2.5)#
#
dev.off()#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n 1% frequency variants (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n 1% frequency variants (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n 1% frequency variants (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n 1% frequency variants (72 derived alleles in a sample of 7242 chromosomes)")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n 1% frequency variants (72 derived alleles in a sample of 7242 chromosomes)")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5)#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 2:2){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE), ylim =c(-90,90),overallline = "median",ll=0.5,sub="HI!")#
    abline(h=YValue[j], lty = 2)#
}#
#
# dev.off()#
#
######################################################################
# pdf("../../Figures/SuppFigure13_SelectionOnlyNeg.pdf")#
# par(mfrow=c(3,1),mar=c(4.1,3.1,3.1,0.6))#
#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecOnlyNeg38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = -50\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 25\n")#
Titles <- c(Titles, "Selection Inference 4Ns = 50\n")#
#
for (j in 3:3){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5, names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"), cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5, ylim =c(-90,20),overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5, bw="nrd0")#
#    abline(h=YValue[j], lty = 2)#
}#
RecombinationPrefix <- c()#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec0")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec484.278")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec855.292")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1251.886")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec1624.489")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2164.258")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec2699.187")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3120.820")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec3509.574")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4083.76")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec4496.201")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec5625.89")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec6448.182")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec7504.213")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec8522.912")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec9955.981")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec10977.747")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec12265.958")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec14138.413")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec19608.766")#
RecombinationPrefix <- c(RecombinationPrefix,"../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRec38656.841")#
#
FourNsSuffix <- c()#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_0.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_-50.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_25.txt")#
FourNsSuffix <- c(FourNsSuffix,"4Ns4Ns_50.txt")#
#
YValue <- c()#
YValue <- c(YValue,0)#
YValue <- c(YValue,-25)#
YValue <- c(YValue,-50)#
YValue <- c(YValue,25)#
YValue <- c(YValue,50)#
#
Titles <- c()#
Titles <- c(Titles, "Selection Inference 4Ns = 0")#
Titles <- c(Titles, "Selection Inference 4Ns = -25")#
Titles <- c(Titles, "Selection Inference 4Ns = -50")#
Titles <- c(Titles, "Selection Inference 4Ns = 25")#
Titles <- c(Titles, "Selection Inference 4Ns = 50")#
#
for (j in 4:4){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
plot.new()#
#
for (j in 5:5){#
    MatrixData <- matrix(nrow=50, ncol=21)#
    for (i in 1:21){#
        File <- paste (RecombinationPrefix[i],FourNsSuffix[j],sep = "")#
        Data <- read.table(File)#
        MatrixData[,i] <- Data$V1#
    }#
#    beanplot(MatrixData[,1], MatrixData[,2],MatrixData[,3],MatrixData[,4],MatrixData[,5],MatrixData[,6],MatrixData[,7],MatrixData[,8],MatrixData[,9],MatrixData[,10],MatrixData[,11],MatrixData[,12],MatrixData[,13],MatrixData[,14],MatrixData[,15],MatrixData[,16],MatrixData[,17],MatrixData[,18],MatrixData[,19],MatrixData[,20],MatrixData[,21],ylab="Estimated 4Ns values",xlab="Quantile",main=Titles[j], cex.axis=2.2,cex.lab=2.5,cex.main=2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", names=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"),  maxstripline=0.15,beanlinewd=0.5,overall=10000, ylim =c(-90,90),what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
#    abline(h=YValue[j], lty = 2)#
}#
#
#plot("")#
dev.off()
### Set directory to the place where you have the 'PlottingScripts' folder#
#
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns-100")#
Selection <- c(Selection,"4Ns50")#
Selection <- c(Selection,"4Ns100")#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_-100")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
SelectionTest <- c(SelectionTest,"4Ns_100")#
#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
#
ColorViridis <- viridis(5)#
#
Plot <- paste("../Figures/SuppFigure33_LDistributionComparison.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,2) + 0.1)#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfL.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.03,0.5), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="A) Probability Distribution of L\n in a constant population size scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLPopExpansion.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.03,0.5), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="B) Probability Distribution of L\n in a population expansion scenario", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-100","-50","0","50","100"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
DistributionOfL <- read.table("../Results/DistributionOfL/DistributionOfLUK10K.txt")#
Max <- max(DistributionOfL)#
Min <- min(DistributionOfL)#
plot(1:6,DistributionOfL[1,], col=ColorViridis[3], type="l", lwd=6, ylim=c(0.03,0.5), ylab="Probability", xlab="L", cex.lab=2.5, cex.axis=2.5, xaxt="n", main="C) Probability Distribution of L\n in the scaled UK10K demographic model", cex.main=2.5)#
lines(1:6,DistributionOfL[2,],col=ColorViridis[4],lwd=6)#
lines(1:6,DistributionOfL[3,],col=ColorViridis[5],lwd=6)#
lines(1:6,DistributionOfL[4,],col=ColorViridis[2],lty=5,lwd=6)#
lines(1:6,DistributionOfL[5,],col=ColorViridis[1],lty=5,lwd=6)#
axis(1,at=c(1,2,3,4,5,6),labels=c(expression(w[1],w[2],w[3],w[4],w[5],w[6])),cex.lab=2.5,cex.axis=2.5)#
legend("center",c("-50","-25","0","25","50"), lty=c(6,6,1,1,1),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
#
dev.off()#
#
File = c("../Results/DistributionOfL/DistributionOfL.txt", "../Results/DistributionOfL/DistributionOfLPopExpansion.txt", "../Results/DistributionOfL/DistributionOfLUK10K.txt")#
#
Numbers <- c(1,4,5)#
TotalConcatenateSums <- c()#
for (i in 1:3){#
     DistributionOfL <- read.table(File[i])#
     ConcatenateSums <- c()#
     for (j in Numbers){#
         for (k in Numbers){#
             AbsoluteSum <- 0#
             for (l in 1:5){#
                 AbsoluteSum <- AbsoluteSum + abs(DistributionOfL[j,l] - DistributionOfL[k,l])#
             }#
             ConcatenateSums <- c(ConcatenateSums, AbsoluteSum)#
         }#
     }#
     TotalConcatenateSums <- c(TotalConcatenateSums, ConcatenateSums[2], ConcatenateSums[3], ConcatenateSums[6])#
}#
Plot <- paste("../Figures/SuppFigure33_LDistributionBoxplot.pdf",sep="")#
#
pdf(Plot, width=21)#
par(mfrow = c(1,3))#
par(mar=c(5,5,5,6) + 0.1)#
#
plot(1:3,TotalConcatenateSums[1:3], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "D) Constant population size scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = -50","4Ns = 0 vs 4Ns = -100","4Ns = -50 vs 4Ns = 100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[4:6], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "E) Population expansion scenario", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = -50","4Ns = 0 vs 4Ns = -100","4Ns = -50 vs 4Ns = -100"), cex.axis = 1.5 )#
#
plot(1:3,TotalConcatenateSums[7:9], type="o",pch=19,ylab=" Absolute difference between probability distributions of L", xaxt = "n",xlab= "", ylim = c(0,0.075), cex.axis = 2, cex.lab = 2, main = "F) Scaled UK10K demographic model", cex.main = 2.5)#
#
axis (1, at=c(1,2,3), labels = c("4Ns = 0 vs 4Ns = -25","4Ns = 0 vs 4Ns = -50","4Ns = -25 vs 4Ns = -50"), cex.axis = 1.5 )#
#
dev.off()
library(here)#
Data <- read.table("../Results/AllAgeESS/FinalStats.txt")#
#
Title = c("Constant Population Size", "Population Expansion Model\n(Expansion Time = 100 Gens ago)", "Ancient Bottleneck Model", "Population expansion Model \n(Expansion Time = 100,000 Gens ago)", "Population expansion Model\n(Expansion Time = 10,000 Gens ago)", "Population expansion Model\n(Expansion Time = 1,000 Gens ago)", "", "Schiffels and Durbin (2014)\nNature Genetics model", "Demographic Model in Africans\nTennessen et al (2012) Science model", "Scaled UK10K demographic model")#
#
pdf("../Figures/SuppFigure34_AllPlots.pdf",height = 3*7/2, width = 7*3/2)#
par(mfrow=c(3,3),mar=c(4.1,3.1,6.1,1.1))#
#
for (i in 1:6){#
#
plot(-200:200,Data[i,403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2, ylim =c(0,max(Data[i,403:803])), main = Title[i])#
abline(h=100, col = "red")#
}#
#
for (i in 8:10){#
#
plot(-200:200,Data[i,403:803],type="l",ylab="ESS",xlab="4Ns",cex.lab=1.4,cex.axis=1.5,lwd=2, ylim =c(0,max(Data[i,403:803])), main = Title[i])#
abline(h=100, col = "red")#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
### Figure 3#
#
Plot <- paste("../Figures/SuppFigure35_PopExpansionConstantPopSizeSelInferenceLowESS.pdf",sep="")#
#
pdf(Plot,width=7*3, height = 7*2)#
par(mfrow = c(2,3))#
par(mar=c(5,5,5,2) + 0.1)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="A) Inference of Selection in a Constant\nPopulation Size Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionConstantPopSize100_-100_N10000.txt")#
#
beanplot(abs(Selection4Ns_0$V1-200),abs(Selection4Ns_50$V1-200),abs(Selection4Ns_Minus50$V1-200),abs(Selection4Ns_100$V1-200),abs(Selection4Ns_Minus100$V1-200),names=c("0","50","-50","100","-100"),ylab="Estimated |4Ns| values",xlab="Real 4Ns values",main="B) Inference of Selection in a Constant\nPopulation Size Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsConstantPopSize.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "C)", cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSConstantPopSize.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red",cex.lab=1.4,cex.axis=1.5,lwd=2)#
legend("left",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="D) Inference of Selection in a Population\nExpansion Model (100,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
#
Selection4Ns_0 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_0_N10000.txt")#
Selection4Ns_50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_50_N10000.txt")#
Selection4Ns_100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_100_N10000.txt")#
Selection4Ns_Minus50 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-50_N10000.txt")#
Selection4Ns_Minus100 <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansion100_-100_N10000.txt")#
#
beanplot(Selection4Ns_0$V1-200,Selection4Ns_50$V1-200,Selection4Ns_Minus50$V1-200,Selection4Ns_100$V1-200,Selection4Ns_Minus100$V1-200,names=c("0","50","-50","100","-100"),ylab="Estimated 4Ns values",xlab="Real 4Ns values",main="E) Inference of Selection in a Population\nExpansion Model (1,000 trajectories)",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=-50,lty=3)#
abline(h=100,lty=3)#
abline(h=-100,lty=3)#
Data <- read.table("../Results/AllAgeESS/FinalStatsPopExpansion.txt")#
plot(-200:200,Data[403:803],type="l",ylab="ESS",xlab="4Ns", main = "F) ",cex.axis=2.2,cex.lab=2.5,cex.main=2.5,lwd=2, ylim= c(0,max(Data[403:803])))#
#
Data <- read.table("../Results/AllAgeESS/LowESSPopExpansion.txt")#
#
lines(-200:200,Data[403:803],type="l",col="red", cex.lab=1.4,cex.axis=1.5,lwd=2)#
#
legend("topleft",pch=19,col=c("black","red"),legend=c("100,000 trajectories","1,000 trajectories"), bty = "n", cex = 2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
DemographicScenarios <- c("ConstantPopSize","PopExpansion")#
FourNs <- c("0", "50", "100", "-50", "-100")#
FourNsLine <- c(0, 50, 100, 50, 100)#
Magnitude <- c( "NotSoSmallMut", "FivePercentSmallMut", "FivePercentBigMut", "NotSoBigMut")#
Titles <- c("Constant Population Size 4Ns = 0\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = 50\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = 100\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = -50\nActual Mutation rate = 1.2e-8","Constant Population Size 4Ns = -100\nActual Mutation rate = 1.2e-8")#
#
ViridisColors <- viridis(5)#
#
pdf ("../Figures/SuppFigure36_UK10K4Ns0AncMis.pdf")#
par(mar = c(6, 5, 1, 1))#
Data <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecMisAnc4Ns4Ns_0.txt")#
Data1 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecMisAnc4Ns4Ns_25.txt")#
Data2 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KSingleRecHighRecMisAnc4Ns4Ns_50.txt")#
DataTwo <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_0CoefNum5.txt")#
DataTwo1 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_25CoefNum5.txt")#
DataTwo2 <- read.table("../Results/ResultsSelectionInferred/SelectionUK10K4Ns_50CoefNum5.txt")#
#
        beanplot(DataTwo[,1], Data[,1] ,DataTwo1[,1], Data1[,1] ,DataTwo2[,1], Data2[,1] ,names=c("No a.m.\n 4Ns = 0","With a.m.\n 4Ns = 0","No a.m.\n 4Ns = 25","With a.m.\n 4Ns = 25","No a.m.\n 4Ns = 50","With a.m.\n 4Ns = 50"),ylab="Estimated 4Ns values",main="", cex.names = 0.75, cex = 1, cex.axis=1.,cex.lab=1.5,cex.main=2.5,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5)#
        abline(h=0,lty=3)#
abline(h=50,lty=3)#
abline(h=25,lty=3)#
#
DataSet <- data.frame(Data[,1], DataTwo[,1])#
kruskal.test(Data...1. ~ DataTwo...1., data = DataSet)#
#
dev.off()#
# , xlab="Real 4Ns values"
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
DemographicScenarios <- c("UK10K","UK10K")#
FourNs <- c("4Ns_0", "4Ns_25", "4Ns_50", "4Ns_-25", "4Ns_-50")#
DemographicScenariosTitle <- c("UK10K")#
FourNsTitle  <- c("4Ns = 0", "4Ns = 25", "4Ns = 50", "4Ns = -25", "4Ns = -50")#
#
Medians <- c()#
#
pdf ("../Figures/SuppFigure37_MisinferenceWithStatisticalPhasingUK10K.pdf", width = 8)#
par(mfrow = c(1,1))#
par(mar = c(4, 5, 5, 2))#
    BiasedEstimators <- c()#
    UnbiasedEstimators <- c()#
    for (j in 1:5){#
    File <- paste("../Results/ResultsSelectionInferred/SelectionUK10KLessStatPhasing",FourNs[j],"_N10000.txt", sep = "")#
    FileTwo <- paste("../Results/ResultsSelectionInferred/SelectionUK10KPhasing",FourNs[j],"_N10000.txt", sep = "")#
#
BiasedInference <- read.table(File)#
UnbiasedInference <- read.table(FileTwo)#
BiasedEstimators <- c(BiasedEstimators, BiasedInference$V1)#
UnbiasedEstimators <- c(UnbiasedEstimators, UnbiasedInference$V1)#
    }#
    boxplot( BiasedEstimators[1:100]  - UnbiasedEstimators[1:100], BiasedEstimators[101:200]  - UnbiasedEstimators[101:200], BiasedEstimators[201:300] - UnbiasedEstimators[201:300], BiasedEstimators[301:400]  - UnbiasedEstimators[301:400], BiasedEstimators[401:500] - UnbiasedEstimators[401:500] , ylim = c(-400,400), xlab = "4Ns", ylab = "Estimated 4Ns on statistically phased data - Estimated 4Ns on haplotype data", main = "UK10K", names = c(0, 25, 50, -25, -50) )#
#
abline (h= 0 , lty=2)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
library(viridis)#
#
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox (Personal)/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
DemographicScenarios <- c("UK10K")#
FourNs <- c("0", "-25", "-50", "25", "50")#
FourNsLine <- c(0, -25, -50, 25, 50)#
Magnitude <- c( "10", "12")#
Titles <- c("UK10K 4Ns = 0\nActual recombination rate = 5 X 8.25e-9","UK10K 4Ns = -25\nActual recombination rate = 5 X 8.25e-9","UK10K 4Ns = -50\nActual recombination rate = 5 X 8.25e-9","UK10K 4Ns = 25\nActual recombination rate = 5 X 8.25e-9","UK10K 4Ns = 50\nActual recombination rate = 5 X 8.25e-9")#
#
ViridisColors <- viridis(5)#
#
for (i in 1:1){#
    pdf ("../Figures/SuppFigure38_MutRecMisinferenceUK10K.pdf", width = 45/1.5, height=21/3)#
    par(mfrow = c(1,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], "9","SmallRec" , FourNs[j], ".txt", sep = "")#
                Data <- read.table(Title)#
                for (l in 1:100){#
                    DataMatrix[l,1] <- Data$V1[l]#
                }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i], "10","SmallRec" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,2] <- Data$V1[l]#
            }#
        Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i],"11","SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i],"12","SmallRec", FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,4] <- Data$V1[l]#
            }#
            Title <- paste("../Results/ResultsSelectionInferred/Selection", DemographicScenarios[i],"13","SmallRec", FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,5] <- Data$V1[l]#
            }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], DataMatrix[,4], DataMatrix[,5], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-95, 95), xlab = "Recombination rate used", names = c("5 X 6.11e-9","5 X 7.01e-9","5 X 8.25e-9","5 X 9.67e-9","1.12e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
}#
#
dev.off()#
#
Titles <- c("UK10K 4Ns = 0\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -25\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = -50\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = 25\nActual mutation rate = 5 X 1.5e-8","UK10K 4Ns = 50\nActual mutation rate = 5 X 1.5e-8")#
#
    pdf ("../Figures/SuppFigure29_MutMisinferenceUK10K.pdf", width = 45/1.5, height=21/3)#
    par(mfrow = c(1,5))#
    par(mar = c(5, 6, 5, 1))#
        for (j in 1:5){#
            DataMatrix <- matrix(,nrow= 100, ncol = 5)#
#
            Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K2SmallRecLowerMut_" , FourNs[j], ".txt", sep = "")#
                Data <- read.table(Title)#
                for (l in 1:100){#
                    DataMatrix[l,1] <- Data$V1[l]#
                }#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K0SmallRecLowMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,2] <- Data$V1[l]#
            }#
        Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K11SmallRec", FourNs[j], ".txt", sep = "")#
        Data <- read.table(Title)#
        for (l in 1:100){#
            DataMatrix[l,3] <- Data$V1[l]#
        }#
            Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K1SmallRecHighMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,4] <- Data$V1[l]#
            }#
            Title <- paste("../Results/ResultsSelectionInferred/SelectionUK10K3SmallRecHigherMut_" , FourNs[j], ".txt", sep = "")#
            Data <- read.table(Title)#
            for (l in 1:100){#
                DataMatrix[l,5] <- Data$V1[l]#
            }#
        beanplot(DataMatrix[,1] , DataMatrix[,2], DataMatrix[,3], DataMatrix[,4], DataMatrix[,5], ylab = "4Ns", cex.lab = 2, cex.axis = 1.3, ylim = c(-95, 95), xlab = "Mutation rate used", names = c("5 X 1.35e-8","5 X 1.425e-8","5 X 1.5e-8","5 X 1.575e-8","5 X 1.65e-8"), cex.names = 0.1, main = Titles[j], cex.main = 2 ,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,TRUE,TRUE),overallline = "median",ll=0.5,bw="nrd0" )#
        abline(h=FourNsLine[j], lty = 2)#
}#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure39_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the scaled UK10K model and the Boyko DFE", xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure40_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
SelectionNS <- read.table("../Results/ResultsSelectionInferred/SelectionUK10KBootstrap.txt")#
SelectionSyn <- read.table("../Results/ResultsSelectionInferred/SelectionSynUK10KBootstrap.txt")#
#
Plot <- paste("../Figures/SuppFigure41_UK10KSelInferenceSynNS.pdf",sep="")#
#
pdf(Plot,width=14)#
par(mfrow=c(1,2),mar=c(5,5,4,2) + 0.1)#
#
### ,mar=c(5,5,4,2) + 0.1#
#
beanplot(SelectionNS$V1, SelectionSyn$V1, names=c("Non Syn","Syn"), ylab="Estimated 4Ns values", xlab="Type of Variants", bw = "nrd0", main="Inference of Selection in the\nUK10K data", cex.axis=1.25, cex.lab=2, cex.main=1.5, col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6", maxstripline=0.15, beanlinewd=0.5, what=c(FALSE,TRUE,TRUE,TRUE), overallline = "median", ll=0.5)#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 1){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.03#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.03#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure42_DFEParameterEstimatesUK10K.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates\n in the UK10K dataset",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(here)#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 4594/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*123250612973)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*123250612973)#
#
#### The number of alleles comes from the population expansion model (36752 + 9108 / 4594 * 1221 + 1172 / 4594 * 352 + 1274 / 4594 * 241 + 164462 / 4594 * 49) * 1000 * 3000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KMouse.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*4594#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (36752 + 9108 / 4594 * 1221 + 1172 / 4594 * 352 + 1274 / 4594 * 241 + 164462 / 4594 * 49) * 1000 * 3000#
Prob_One_Percent <- 129806 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigure39_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 4594/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 4594/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print ("J value")#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print ("J value")#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    # points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    # points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,4]) -log10(0.001),0), max(log10(counts[2,4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,5]) -log10(0.001),0), max(log10(counts[2,5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,6]) -log10(0.001),0), max(log10(counts[2,6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,7]) -log10(0.001),0), max(log10(counts[2,7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,8]) -log10(0.001),0), max(log10(counts[2,8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,9]) -log10(0.001),0), max(log10(counts[2,9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,10]) -log10(0.001),0), max(log10(counts[2,10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,11]) -log10(0.001),0), max(log10(counts[2,11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(counts[1,1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(counts[1,2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(counts[1,3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(counts[2,1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(counts[2,2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(counts[2,3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- counts[1,1]#
logcountsThree[1,2] <- sum(counts[1,2:10])#
logcountsThree[1,3] <- counts[1,11]#
logcountsThree[2,1] <- counts[2,1]#
logcountsThree[2,2] <- sum(counts[2,2:10])#
logcountsThree[2,3] <- counts[2,11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure39_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigure39_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS7.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS7.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure39_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()
library(here)#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.06#
Beta = 75000#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (183760 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 6369 / 22970 * 1207 + 822310 / 22970 * 243) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (183760 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 6369 / 22970 * 1207 + 822310 / 22970 * 243) * 100 * 26000#
Prob_One_Percent <- 84288 / SitesDemography#
#
Probs <- Probs[1:10] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:10]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigure40_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print ("J value")#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print ("J value")#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,4]) -log10(0.001),0), max(log10(counts[2,4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,5]) -log10(0.001),0), max(log10(counts[2,5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,6]) -log10(0.001),0), max(log10(counts[2,6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,7]) -log10(0.001),0), max(log10(counts[2,7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,8]) -log10(0.001),0), max(log10(counts[2,8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,9]) -log10(0.001),0), max(log10(counts[2,9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,10]) -log10(0.001),0), max(log10(counts[2,10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(counts[1,11]) -log10(0.001),0), max(log10(counts[2,11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(counts[1,1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(counts[1,2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(counts[1,3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(counts[2,1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(counts[2,2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(counts[2,3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- counts[1,1]#
logcountsThree[1,2] <- sum(counts[1,2:10])#
logcountsThree[1,3] <- counts[1,11]#
logcountsThree[2,1] <- counts[2,1]#
logcountsThree[2,2] <- sum(counts[2,2:10])#
logcountsThree[2,3] <- counts[2,11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure40_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigure40_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableS8.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableS8.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure40_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigure44_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.1976878, 0.03350874, 0.7688034)#
#
sum(ifelse(MatrixFinalProbs[,1]> 0.1976878,1,0))#
Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
}#
sum(ifelse(Sums > 0.03350874,1,0))#
sum(ifelse(MatrixFinalProbs[,11]> 0.7688034,1,0))#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.54","= 0.2","= 0.22")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()
library(here)#
library(viridis)#
library(jpeg)#
library(plotrix)#
library(beanplot)#
library(RColorBrewer)#
#
####### DFE selection bootstrap #########
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
#
AllRows <- c()#
AllColumns <- c()#
#
for (i in 1:length(DFESelection$V1)){#
    if (DFESelection$V1[i] == 0){#
        SelectionDFERow <- ((DFESelection$V2[i] %% 52 ) + 1) * 5#
        SelectionDFEColumn <- (floor(DFESelection$V2[i] / 52 ) + 1) *.01#
        AllColumns <- c(AllColumns, SelectionDFEColumn)#
#        print (SelectionDFERow)#
        if (SelectionDFERow == 5){#
            AllRows <- c(AllRows,-55)#
#
        }#
        if (SelectionDFERow == 10){#
            AllRows <- c(AllRows,-20)#
            SelectionDFERow = -10#
        }#
        if (SelectionDFERow >= 15){#
            SelectionDFERow = SelectionDFERow + 250 - 10#
            AllRows <- c(AllRows,SelectionDFERow)#
        }#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[i] %% 50 ) + 1) * 5#
    SelectionDFEColumn <- (floor(DFESelection$V2[i] / 50 ) + 1) *.01#
    AllColumns <- c(AllColumns, SelectionDFEColumn)#
    AllRows <- c(AllRows, SelectionDFERow)#
    print (SelectionDFERow)#
    }#
}#
Plot <- paste("../Figures/SuppFigure43_DFEParameterEstimatesUK10KBoykoDFE.pdf",sep="")#
pdf(Plot,width=10)#
library(hexbin)#
par(mfrow=c(1,1))#
par(mar=c(5,5,4,2) + 0.1)#
# Create hexbin object and plot#
df <- data.frame(AllColumns,AllRows)#
colnames(df) <- c("Scale","Shape")#
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))#
h <- hexbin(df, xbins = 301,IDs=TRUE)#
#slot(h,"ybnds")[2] <- 2005#
#slot(h,"xbnds")[2] <- 3005#
#plot(h)#
#plot(h, colramp=rf)#
ColorViridis <- viridis(23)#
plot(slot(h,"ycm"),slot(h,"xcm"),col= ColorViridis[23],pch=19,cex=3,ylab="Scale",xlab="Shape",cex.lab=2,cex.axis=2,main="Variation in DFE parameter estimates in simulations\n under the UK10K model and the Boyko DFE",xaxt="n")#
text(slot(h,"ycm"),slot(h,"xcm"),slot(h,"count"),col="red",cex=1)#
# abline(v=-60, lty = 2)#
abline(v=-55, lty = 2)#
abline(v=-20, lty = 2)#
abline(v=5, lty = 2)#
abline(v=250, lty = 2)#
axis(1, at=c(-55, -20, 5, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500), labels = c("0.03", "3", "30", "300", "600", "900", "1200", "1500", "15000", "30000", "45000", "60000", "75000"), cex.axis = 1.2)#
# beanplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.axis=1.3,cex.lab=2,cex.main=1.2,col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",maxstripline=0.15,beanlinewd=0.5,overall=10000,what=c(FALSE,TRUE,FALSE,TRUE),overallline = "median",ll=0.5,bw="nrd0")#
# boxplot(-SelectionDFEColumn$V1*SelectionDFERow$V1,names=c("Data"),ylab="Estimated 4Ns values",xlab="",main="Variation in the estimated 4Ns values\n in the UK10K dataset",cex.lab=2,cex.axis=2)#
dev.off()
library(viridis)#
library(here)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
SelectionDFERow <- ((1560 %% 52 ) + 1)#
SelectionDFEColumn <- ((1560 / 52 ) + 1)#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
for (i in 1:10){#
     UpperBound <- i*5 + 2#
     LowerBound <- (i-1)*5 + 3#
     CurrentSum <- sum(DFEPars[104,LowerBound:UpperBound])#
     #    print (i)#
     #    print (CurrentSum)#
     P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
 }#
#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# Alpha = 0.9#
# Beta = 75000#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
# for (i in 1:10){#
    # print (i)#
#     Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
#     P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
# }#
#
# Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (183760 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 6369 / 22970 * 1207 + 822310 / 22970 * 243) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
#
Probs <- Probs[1:10] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:10]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
#pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(4, alpha = 0.7)#
pdf("../Figures/SuppFigure43_BarPlot_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" *bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# legend = c(expression("Real" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Inferred"  ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression('P'[psi]~ "("* bolditalic(s[j])*" | "* italic(f) * ", "* italic(D) *")")), ylim = c(0, 5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex= 0.95), yaxt="n", xaxt = "n", space = c(0, 2))#
axis (2,at=c(0+0.01, 1+0.01, 2+0.01, 3+0.01), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
#axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.01, 0+.01), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.01, 0+.01), col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 5 + 1.5, max(log10(CurrentMean) - log10(0.001)+.01, 0+.01), col="black", pch=8, bg = "black", cex=1)#
}#
#
#####################################################################################
dev.off()#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsSuppTableS9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentSuppTableS9.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
######################################################################################################################################################################################################### Sum#
Alpha = 0.06#
Beta = 75000#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (183760 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 6369 / 22970 * 1207 + 822310 / 22970 * 243) * 100 * 3000#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) - log10(0.001),0)#
logcounts[1,2] <- max(log10(sum(P_Allele_Is_2Ns_given_OnePercent[2:10])) - log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) - log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) - log10(0.001), 0)#
logcounts[2,2] <- max(log10(sum(Probs[2:10])) - log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[11]) - log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) - log10(0.001),0)#
logcounts[3,2] <- max(log10(sum(ProbsBoyko[2:10])) - log10(0.001) ,0)#
logcounts[3,3] <- max(log10(ProbsBoyko[11]) - log10(0.001),0)#
logcounts[4,1] <- max(log10(ProbsKim[1]) - log10(0.001) ,0)#
logcounts[4,2] <- max(log10(sum(ProbsKim[2:10])) - log10(0.001),0)#
logcounts[4,3] <- max(log10(ProbsKim[11]) - log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table ### Caution the next plot is wrong in the intermediate bin. Need to correct.#
#
ViridisColors <- viridis(4, alpha = 0.7)#
# pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBinsLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
# barplot(logcounts + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") , expression("Kim et al 2017 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(-0.1, 3.5), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=1.3), yaxt="n")#
#
# axis (2,at=c(0+0.1,1+0.1,2+0.1,3+0.1), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    SumLower <- SumLower + Quantiles[1]#
    SumUpper <- SumUpper + Quantiles[2]#
    }#
    #    points((i - 1)* 5 + 2.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    SumLower <- 0#
    SumUpper <- 0#
    for (j in 2:10){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        SumLower <- SumLower + Quantiles[1]#
        SumUpper <- SumUpper + Quantiles[2]#
    }#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    #    points((i - 1)* 5 + 1.5, max(log10(SumLower) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(SumUpper) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
#
    }else{#
    Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #     points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001)+.1, 0+.1), col="black", pch=24, bg = "black", cex=1)#
    #     points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001)+.1, 0+.1), col="black", pch=25, bg = "black", cex=1)#
    }#
}#
#
#####################################################################################
# dev.off()#
######################################################################################################################################################## Natural scale #######################################
######################################################################################################################################################################################################### Sum#
Alpha = 0.06#
Beta = 75000#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
    # print (i)#
    Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
    P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
    NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*61603609695)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 1000#
#
SelectionCoefficientList <- read.table("../Results/CalculateDFEOfNewMutations/ExitOnePercentSValuesUK10KHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 33409384#
MutationRate <- 1.5e-8#
SitesDemography <- (22970*183760 + 45544 * 6104 + 5856 * 1760 + 6369 * 1207 + 822310 * 243) * NumberOfNonCpGSites * MutationRate#
Prob_One_Percent <- 275 / SitesDemography#
#
Probs <- Probs[1:10] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:10]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
    Label <- paste((i-1)*5,"-",i*5,sep="")#
    Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
# pdf("../Figures/Figure9_UK10KDFE_StandingNewLargePopSize.pdf",width=19)#
# par(mar=c(5.1,5.1,4.1,2.1))#
#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
# dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4],ProbsKim[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5],ProbsKim[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6],ProbsKim[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7],ProbsKim[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8],ProbsKim[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9],ProbsKim[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10],ProbsKim[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11],ProbsKim[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
counts[4,1] <- ProbsKim[1]#
counts[4,2] <- ProbsKim[2]#
counts[4,3] <- ProbsKim[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
#
############################### Log-scale count table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0), max(log10(ProbsKim[4]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0), max(log10(ProbsKim[5]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0), max(log10(ProbsKim[6]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0), max(log10(ProbsKim[7]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0), max(log10(ProbsKim[8]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0), max(log10(ProbsKim[9]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0), max(log10(ProbsKim[10]) -log10(0.001),0)))#
# logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0), max(log10(ProbsKim[11]) -log10(0.001),0)))#
# logcounts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
# logcounts[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
# logcounts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcounts[1,1] <- Probs[1]#
logcounts[1,2] <- sum(Probs[2:10])#
logcounts[1,3] <- Probs[11]#
logcounts[2,1] <- ProbsBoyko[1]#
logcounts[2,2] <- sum(ProbsBoyko[2:10])#
logcounts[2,3] <- ProbsBoyko[11]#
logcounts[3,1] <- ProbsKim[1]#
logcounts[3,2] <- sum(ProbsKim[2:10])#
logcounts[3,3] <- ProbsKim[11]#
colnames(logcounts) <- c("0-5", "5-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)", "Kim et al 2017 P(4Ns | DFE)")#
############################### End of Log-scale count table#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/Figure9_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleLargePopSize.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab=expression(bolditalic(s[j]) * " (4Ns intervals)"), col=ViridisColors,#
legend = c( expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") , expression("Kim et al 2017 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(-0.01, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "center",cex=2), yaxt="n")#
#
# egend = c(expression("Inferred " ~ 'P'[psi] ~ "(" *bolditalic(s[j])*" | 1%, " * ", "* italic(D) * ")"), expression("Inferred" ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")"), expression("Boyko et al 2008 " ~ 'P'[psi] ~ "(" ~ bolditalic(s[j]) ~ ")") , expression("Kim et al 2017 P("*bolditalic(s[j]) * ")") ), ylim = c(0, 3.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2)#
#
# text(3, 1.1,"p-value = 0.1", cex = 2)#
# text(8, 1.1,"p-value = 0.54", cex = 2)#
# text(13, 1.1,"p-value < 0.01", cex = 2)#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceBootstrapUK10KDFETest.txt")#
DFEPars <- read.table ("../Scripts/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
}#
#
FinalMedian <- c()#
#
Cells <- c(1, 2, 11)#
#
for (i in 1:3){#
    if (i == 2){#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixFinalProbs[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixFinalProbs[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (SumLower)#
        print (SumUpper)#
#
        points((i - 1)* 4 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        SumLower <- 0#
        SumUpper <- 0#
        Mean <- 0#
        for (j in 2:10){#
            Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,j],c(0.05,0.95))#
            SumLower <- SumLower + Quantiles[1]#
            SumUpper <- SumUpper + Quantiles[2]#
            Mean <-  Mean + mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,j])#
        }#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        #        points((i - 1)* 5 + 1.5, SumLower + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, SumUpper + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Mean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
    }else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,Cells[i]])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[1] + 0.01, col="black", pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 5 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
#####################################################################################
dev.off()#
#
#################################################################################### Density plots
Selection4Ns_Minus50_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-50_N10000.txt")#
Selection4Ns_Minus100_100Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionYRI-100_N10000.txt")
quantile(Selection4Ns_Minus100_100Gens)
quantile(Selection4Ns_Minus100_100Gens$V1)
quantile(Selection4Ns_Minus100_100Gens$V1,c(0.2,0.8))
quantile(Selection4Ns_Minus100_100Gens$V1,c(0.1,0.9))
quantile(Selection4Ns_Minus100_100Gens$V1,c(0.2,0.8))
quantile(Selection4Ns_Minus100_100Gens$V1,c(0.4,0.6))
quantile(Selection4Ns_Minus100_100Gens$V1,c(0.3,0.7))
quantile(Selection4Ns_Minus50_100Gens$V1,c(0.3,0.7))
quantile(Selection4Ns_Minus50_100Gens$V1,c(0.2,0.8))
quantile(Selection4Ns_Minus50_100Gens$V1,c(0.1,0.9))
Selection4Ns_Minus50_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-50_N10000.txt")#
Selection4Ns_Minus100_1000Gens <- read.table("../Results/ResultsSelectionInferred/SelectionPopExpansionCEU-100_N10000.txt")
quantile(Selection4Ns_Minus50_1000Gens$V1,c(0.1,0.9))
quantile(Selection4Ns_Minus50_1000Gens$V1,c(0.05,0.95))
quantile(Selection4Ns_Minus50_1000Gens$V1,c(0.1,0.9))
quantile(Selection4Ns_Minus100_1000Gens$V1,c(0.1,0.9))
