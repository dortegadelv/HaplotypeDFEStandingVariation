50/8
25+20+15+20+5
25+20+30+20+5
45+20
15*3
45+20
50-3
50/3
45*7
2.5 * 10^9
250000000
dpois(1,1)
dpois(1,4)
dpois(1,5)
dpois(1,5)*2000000000*.001
dpois(1,4)*2000000000*.001
dpois(2,4)*2000000000*.001
1100000-337177
11000000
10*600000*0.01
10*600000*0.0001
10*600000*0.000001
0.00000125
0.0000000125
0.000000015
4363/11000000
11000000 - 4363
1100000 - 4363
.01*.01*.01
1/1100000
663/1100000
1/(4*10000*1/5e-8)
1/(4*10000*1.5e-8)
4*10000*1.5e-8
0.0006
1000/365
365*3
15000+15000+6000+1000
15000 / 37000
1000/37000
2000/37000
9000+30000+15000+6000+1000
61000/3
1000/61000
3000/61000
6000/61000
30000*20
1000/25
63000/3
21000*20
30000/20
37577*18
5241+1329
6570*18
676386-118260
5000/300000
0.01666667*8000
300000/5000
60*5000
60*8000
500000/20
400+600+200
1200*4
1000+850+1000+500
18000+15000+11000
4000/44000
6000/44000
30000
60*10000
30000*20
23000+13000+13000
4000/49000
6000/49000
2000/49000
23000+17000+13000
4000/53000
2000/52000
5000/52000
4000/52000
10000/600000
600000/10000
60*10000
10000/600000
0.01666667*600000
4000+30000+11000+5000+2000
4000/52000
11000/52000
5000/52000
2000/52000
12000*5
14694*3
11065.50*3
715*3
60000+44082+33196.5+2145
8*20
1707-5
1702/2
255*4
4*6
55000/24
255*10
55445/100
54194+73+73+73+68
54194+63+63+63+68
2 * 226252
5 * 226252
1131260/2
5 * 226252
2* 226252 * 5
2* 226252 * 5 / 5
226252 * 5
226252 * 5 / 2
226252 * 5
1131260 * 2
2262520/5
2262520/4
565630/2
226252*5
1131260/2
452504*5
2262520/4
700(52)
700*52
32194-57-9.50-40-789.30
31298.2-2952.72
3600/2500
3700/2500
3721/2500
dpois(250000/1000000)
dpois(1,250000/1000000)
dpois(2000,250000/1000000)
dpois(1,250000/1000000)*1800
dpois(1,250000/1000000)*1800 * 0.01
50/50
50*25
50*49
50/2
50/3
50/4
50/5
50/6
50/7
50/10
10*25
25*200
5000/4
4*10000*.01
2/6
2*9/6
13.9*61
1000/100000
3450/1735350
(1-.7111)/(1-.7589)
1.198258 - 1
(1-.8531)/(1-.8638)
(1-.8638)/(1-.8531)
(1-.8351)/(1-.8638)
1000/5
4*1000*.05
4*1000*.005
4*1000*.001
4*1000*.00125
252+26+13+26+51+21+11+11+12+19+10+1
3450/300000000
1/100000
0.2*60
15/169
7/102
7/109
1e-4*1000
1e-4*10000
1e-4*100000
100*20
10855542 +25000
10855542 +250000
16380196 + 250000
16380196 + 500000
16380196 -250000
11105542 + 2500000
11105542 + 250000
10000*.0125
10000*.125
1100000
10^7
10000000
5000/25
2500/25
1e-4*500000
1e-4*1000000
2*15000/3*1e-8
9-15
24-6
Matrix <- (nrow=4,nrow=4)
Matrix <- (,nrow=4,nrow=4)
Matrix <- matrix(nrow=4,nrow=4)
Matrix <- matrix(,nrow=4,nrow=4)
Matrix <- matrix(,nrow=4,ncol=4)
Matrix
Matrix <- matrix(nrow=4,ncol=4)
825*20
45*7
18000*19.03
30*10
30*10*10
60*24
146-23
146-123
23*30
690/60
21*21
8292 * 1.48671e-04
0.22018806380597428/0.0001
0.04457228061998871/0.0001
2.691172883700121/0.0001
0.22018806380597428/0.0001
5000.0*.0.16677688224562598
5000*0.16677688224562598
5000*0.03218540108616168
Test <- c(10,20,30)
1/Test
3 / (1/Test)
3 / (1/sum(Test))
3 / sum(1/Test)
1/10 + 1/20 + 1/30
3/0.1833333
Test <- c(10,10,10,20,30)
5 / sum(1/Test)
(1/10)^3 + 1/20 + 1/30
5/0.08433333
1/20 + 1/30 + 1/10 + 1/10 + 1/10
(1/10)*3 + 1/20 + 1/30
.0003*10000
25e-5 * 12300
3e-5 * 12300
1000/(10000*250000)
1000/(20000*250000)
1000/(20000*500000)
1000/(200000*500000)
100/(20000*250000)
319.8626*5
76163488446
(229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000
3707*3
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/Figures")#
#
library(viridis)#
library(jpeg)#
library(plotrix)#
#
DemScenario <- c()#
DemScenario <- c(DemScenario,"AncientBottleneck")#
DemScenario <- c(DemScenario,"AncientBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSize")#
DemScenario <- c(DemScenario,"ConstantPopSizePointFivePercent")#
DemScenario <- c(DemScenario,"MediumBottleneck")#
DemScenario <- c(DemScenario,"MediumBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"PopExpansion")#
DemScenario <- c(DemScenario,"PopExpansionPointFivePercent")#
DemScenario <- c(DemScenario,"RecentBottleneck")#
DemScenario <- c(DemScenario,"RecentBottleneckPointFivePercent")#
DemScenario <- c(DemScenario,"ConstantPopSizePopFrequency")#
DemScenario <- c(DemScenario,"UK10K")#
#
Selection <- c()#
Selection <- c(Selection,"4Ns0")#
Selection <- c(Selection,"4Ns-25")#
Selection <- c(Selection,"4Ns-50")#
Selection <- c(Selection,"4Ns25")#
Selection <- c(Selection,"4Ns50")#
#
SelectionTraj <- c()#
SelectionTraj <- c(Selection,"4Ns0")#
SelectionTraj <- c(Selection,"4Ns-25")#
SelectionTraj <- c(Selection,"4Ns-50")#
SelectionTraj <- c(Selection,"4Ns25")#
SelectionTraj <- c(Selection,"4Ns50")#
#
SelectionTest <- c()#
SelectionTest <- c(SelectionTest,"4Ns_0")#
SelectionTest <- c(SelectionTest,"4Ns_-25")#
SelectionTest <- c(SelectionTest,"4Ns_-50")#
SelectionTest <- c(SelectionTest,"4Ns_25")#
SelectionTest <- c(SelectionTest,"4Ns_50")#
#
SelectionTestAge <- c()#
SelectionTestAge <- c(SelectionTestAge,"4Ns_0")#
SelectionTestAge <- c(SelectionTestAge,"4Ns_-25")#
SelectionTestAge <- c(SelectionTestAge,"4Ns_-50")#
SelectionTestAge <- c(SelectionTestAge,"4Ns_25")#
SelectionTestAge <- c(SelectionTestAge,"4Ns_50")#
ListMaxFreq <- c()#
ListMaxAge <- c()#
ListMaxT2 <- c()#
#
Ne <- c()#
Ne[1]=10000#
Ne[2]=10000#
Ne[3]=20000#
Ne[4]=20000#
Ne[5]=10000#
Ne[6]=10000#
Ne[7]=100000#
Ne[8]=100000#
Ne[9]=10000#
Ne[10]=10000#
Ne[11]=20000#
Ne[12]=346884#
XLimFigureOne <- c()#
XLimFigureOne[1]=2500#
XLimFigureOne[2]=2500#
XLimFigureOne[3]=1000#
XLimFigureOne[4]=1000#
XLimFigureOne[5]=2500#
XLimFigureOne[6]=2500#
XLimFigureOne[7]=3500#
XLimFigureOne[8]=3500#
XLimFigureOne[9]=3500#
XLimFigureOne[10]=3500#
XLimFigureOne[11]=1000#
XLimFigureOne[12]=2000#
#
XLimFigureTwo <- c()#
XLimFigureTwo[1]=1500#
XLimFigureTwo[2]=900#
XLimFigureTwo[3]=3000#
XLimFigureTwo[4]=2000#
XLimFigureTwo[5]=1500#
XLimFigureTwo[6]=900#
XLimFigureTwo[7]=1750#
XLimFigureTwo[8]=1000#
XLimFigureTwo[9]=2000#
XLimFigureTwo[10]=900#
XLimFigureTwo[11]=3000#
XLimFigureTwo[12]=2500#
YLimFigureTwo <- c()#
YLimFigureTwo[1]=0.225#
YLimFigureTwo[2]=0.3#
YLimFigureTwo[3]=0.125#
YLimFigureTwo[4]=0.175#
YLimFigureTwo[5]=0.2#
YLimFigureTwo[6]=0.3#
YLimFigureTwo[7]=0.275#
YLimFigureTwo[8]=0.325#
YLimFigureTwo[9]=0.35#
YLimFigureTwo[10]=0.5#
YLimFigureTwo[11]=0.125#
YLimFigureTwo[12]=0.125#
#
XLimFigureThree <- c()#
XLimFigureThree[1]=350#
XLimFigureThree[2]=150#
XLimFigureThree[3]=650#
XLimFigureThree[4]=400#
XLimFigureThree[5]=300#
XLimFigureThree[6]=150#
XLimFigureThree[7]=400#
XLimFigureThree[8]=300#
XLimFigureThree[9]=300#
XLimFigureThree[10]=150#
XLimFigureThree[11]=650#
XLimFigureThree[12]=200#
for (j in 12:12){#
	print(DemScenario[j])#
	MaxFreq <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxFreq <- max(MaxFreq,Data$V2)#
		print(MaxFreq)#
	}#
	ListMaxFreq <- c(ListMaxFreq,MaxFreq)#
	MaxAge <- 0#
	TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Max <- max(density(Data$V1*Ne[j]*2,from=0,to=quantile(Data$V1*Ne[j]*2,0.99))$x)#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxAge <- max(MaxAge,(density(Data$V1*Ne[j]*2,from=0,to=Max)$y))#
		print(MaxAge)#
	}#
	ListMaxAge <- c(ListMaxAge,MaxAge)#
	MaxT2 <- 0#
	for (i in 1:5){#
		TrajectoryFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[i],".txt",sep="")#
		Data <- read.table(TrajectoryFile)#
		MaxT2 <- max(MaxT2,Data$V2)#
		print(MaxT2)#
	}#
	ListMaxT2 <- c(ListMaxT2,MaxT2)	#
}#
############################################################################ Only three figures #
#
for (j in 12:12){#
	Plot <- paste("../Figures/Figure8_UK10KFreqAgeT2.pdf",sep="")#
	pdf(Plot,width=28/1.6,height=7/1.55)#
	par(mfrow=c(1,4))#
	par(mar=c(5,5,5,2) + 0.1)#
############### Population scenarios#
	if (j==12){#
		plot(c(100000,100000-46,100000-(46+244),100000-(61+229+352),100000-(61+229+352+1221),100000-(61+229+352+1221+22971)),c(226252/2,1496/2,1171/2,9109/2,4594/2,14600/2),type="s",xlim=c(100000-3000,100000),ylim=c(0,226252/2),ylab="Effective Population Size",xlab="Time before the present",main="A) Scaled UK10K Model",xaxt='n',yaxt='n',cex.main=2.5,cex.lab=2.5,col="red",lwd=6)#
		axis(1,at=c(100000,100000-1000,100000-2000,100000-3000,100000-4000,100000-5000,100000-6000),labels = c("Present","1000","2000","3000","4000","5000","6000"),cex.axis=2.5)#
		axis(2,at=c(150000,100000,50000,0),labels = c("150000","100000","50000","0"),cex.axis=2.5)#
	}	#
############## Trajectories#
par(mar=c(5,5,5,2) + 0.1)#
#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[1],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	ColorViridis <- viridis(5)#
	ColorViridisAlpha <- viridis(5,alpha=0.6)#
	Color <- col2rgb("black")#
	if (j==7 || j==8){#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[1]*1.3),main="B) Average Frequency \nTrajectory",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
	}else{#
		plot(Data$V1[5000:1],Data$V2[1:5000],xlab="Time before the present",ylab="Mean Allele Frequency",type="l",xlim=c(XLimFigureOne[j],5000),ylim=c(0,ListMaxFreq[1]),main="B) Average Frequency \nTrajectory",xaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
	}#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3)#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3)#
#lines(Data$V1[10000:1],ISData$V2[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	if (j==7 || j==8){#
	abline(v=5000-100,lty=3,cex=3,lwd=3)#
	}#
	if (j==1 || j==2){#
		abline(v=5000-5000,lty=3,lwd=3)#
		abline(v=5000-5200,lty=3,lwd=3)#
	}#
	if (j==5 || j==6){#
		abline(v=5000-2000,lty=3,lwd=3)#
		abline(v=5000-2200,lty=3,lwd=3)#
	}#
	if (j==9 || j==10){#
		abline(v=5000-100,lty=3,cex=3,lwd=3)#
		abline(v=5000-300,lty=3,cex=3,lwd=3)#
	}#
	if (j==9 || j==10){#
		abline(v=5000-100,lty=3,cex=3,lwd=3)#
		abline(v=5000-300,lty=3,cex=3,lwd=3)#
	}#
	if (j==12){#
		abline(v=5000-61,lty=3,cex=3,lwd=3)#
		abline(v=5000-(61+229),lty=3,cex=3,lwd=3)#
		abline(v=5000-(61+229+352),lty=3,cex=3,lwd=3)#
		abline(v=5000-(61+229+352+1221),lty=3,cex=3,lwd=3)#
		abline(v=5000-(61+229+352+1221),lty=3,cex=3,lwd=3)#
		abline(v=5000-(61+229+352+1221+22971),lty=3,cex=3,lwd=3)#
#
	}#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[2],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[2])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="purple")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="purple")#
#lines(Data$V1[10000:1],ISData$V3[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[3],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[5000:1],Data$V2[1:5000],lwd=6,col=ColorViridis[1])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="orange")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="orange")#
#lines(Data$V1[10000:1],ISData$V4[1:10000],lwd=10,col=rgb(Color[1,1],Color[2,1],Color[3,1],100,maxColorValue=255))#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[4],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[4])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="red")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="red")#
	TrajectoryFile <- paste("../Results/FrequencyTrajectories/OutMeanTraj",DemScenario[j],SelectionTraj[5],".txt",sep="")#
	Data <- read.table(TrajectoryFile)#
	lines(Data$V1[5000:1],Data$V2[1:5000],lty=5,lwd=6,col=ColorViridis[5])#
#lines(Data$V1[5000:1],Data$V3[1:5000],lty=3,col="dodgerblue")#
#lines(Data$V1[5000:1],Data$V4[1:5000],lty=3,col="dodgerblue")#
	if (j == 1 || j == 2 ){#
	legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 5){#
	legend(5000-1500,0.0078,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 6){#
		legend(5000-1600,0.0035,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 9){#
		legend(5000-1500,0.017,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if( j == 10){#
		legend(5000-1500,0.0065,c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
	}else if (j == 7 || j == 8 ){#
		legend("topleft",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N[0],'s',sep="")),bty="n")	#
	}else if (j == 3 ||j == 4 ||j == 11){#
		legend("center",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title=expression(paste(4,N,'s',sep="")),bty="n")#
	}#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(5000,4000,3000,1000,0),labels=c("Present","1000","2000","4000","5000"),cex.lab=2.5,cex.axis=2.5)#
	legend("topleft",c("-50","-25","0","25","50"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=1.2,title=expression(paste(4,N[0],'s',sep="")),bty="n")#
#
	par(mar=c(5,5,5,2) + 0.1)#
	AgesFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[1],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("black")#
	Max <- quantile(Data$V1*Ne[j]*2,0.99)#
	if (j==7){#
		Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
		Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
		XSubset <- subset(rev(density(Data$V1*Ne[j]*2,from=0,to=Max)$x),rev(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)<=XLimFigureTwo[j]*0.78 )#
		Length <- length(XSubset) - 1#
		MaxLength <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)#
		plot(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],xlab="Allele Age",ylab="Probability",type="l",ylim=c(-0.2*ListMaxAge[1],ListMaxAge[1]),main="C) Allele Age",xaxt="n",yaxt="n",col=ColorViridis[3],cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,xlim=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j],max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)))#
		SD <- sd(Data$V1*Ne[j]*2)#
		arrows(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j]+0.1*XLimFigureTwo[j],-0.12*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.12*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[3],lwd=6)#
#		plot(max(Data$V1*Ne[j]*2) - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),xlab="Allele Age",ylab="Probability",type="l",ylim=c(0,YLimFigureTwo[j]),main="B) Allele Age",xaxt="n",cex.lab=2,cex.main=2,cex.axis=1.5,lwd=6,xlim=c(max(density(Data$V1*Ne[j]*2,from=0)$x)-XLimFigureTwo[j],max(Data$V1*Ne[j]*2)))#
#		abline(v=mean(Max- Data$V1*Ne[j]*2),lwd=6,col=ColorViridisAlpha[3])#
		points(Max - mean(Data$V1*Ne[j]*2),-0.12*ListMaxAge[1],pch=20,col=ColorViridis[3],cex=3)#
		axis(2,at=c(0,0.002,0.004,0.006,0.008,0.01,0.012,0.014,0.016,0.018,0.02),labels=c("0","0.002","0.004","0.006","0.008","0.01","0.012","0.014","0.016","0.018","0.02"),cex.lab=2.5,cex.axis=2.5)#
## X values #
		XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
		Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
		SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
		SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
		YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
		TransformedXValues <- SubsetXValues - Threshold#
		XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
		lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[3],lwd=6 )#
	}else{#
		Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
		Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
		XSubset <- subset(rev(density(Data$V1*Ne[j]*2,from=0,to=Max)$x),rev(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)<=XLimFigureTwo[j]*0.78 )#
		Length <- length(XSubset) - 1#
		MaxLength <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)#
		plot(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],xlab="Allele Age",ylab="Probability",type="l",ylim=c(-0.2*ListMaxAge[1],ListMaxAge[1]),main="C) Allele Age",xaxt="n",yaxt="n",col=ColorViridis[3],cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,xlim=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j],max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)))#
		SD <- sd(Data$V1*Ne[j]*2)#
		arrows(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j]+0.1*XLimFigureTwo[j],-0.12*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.12*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[3],lwd=6)#
#		abline(v=mean(Max - Data$V1*Ne[j]*2),lwd=6,col=ColorViridisAlpha[3])#
		points(Max - mean(Data$V1*Ne[j]*2),-0.12*ListMaxAge[1],pch=20,col=ColorViridis[3],cex=3)#
#		plot(max(Data$V1*Ne[j]*2) - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),xlab="Allele Age",ylab="Probability",type="l",ylim=c(0,YLimFigureTwo[j]),main="B) Allele Age",xaxt="n",cex.lab=2,cex.main=2,cex.axis=1.5,lwd=6,xlim=c(max(density(Data$V1*Ne[j]*2,from=0)$x)-XLimFigureTwo[j],max(Data$V1*Ne[j]*2)))#
		axis(2,at=c(0,0.002,0.004,0.006,0.008,0.01,0.012,0.014,0.016,0.018,0.02),labels=c("0","0.002","0.004","0.006","0.008","0.01","0.012","0.014","0.016","0.018","0.02"),cex.lab=2.5,cex.axis=2.5)#
## X values #
		XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
		Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
		SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
		SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
		YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
		TransformedXValues <- SubsetXValues - Threshold#
		XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
		lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[3],lwd=6 )#
	}#
	if (j==7 || j==8){#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,100,lty=3,lwd=3)#
	}#
	if (j==1 || j==2){#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5000,lty=3,lwd=3)#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5200,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5000,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5000,100,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5200,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-5200,300,lty=3,lwd=3)#
	}#
	if (j==5 || j==6){#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2000,lty=3,lwd=3)#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2200,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2000,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2000,100,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2200,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-2200,300,lty=3,lwd=3)#
	}#
	if (j==9 || j==10){#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,lty=3,lwd=3)#
#		abline(v=max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-300,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-100,100,lty=3,lwd=3)#
		segments(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-300,0,max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-300,300,lty=3,lwd=3)#
	}#
	ValueToPrintXAxis <- round(mean(Data$V1*Ne[j]*2)+SD)#
	AgesFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[2],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
	Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
	Color <- col2rgb("purple")#
# lines(Max  - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),col="purple",lwd=6)#
	lines(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],col=ColorViridis[2],lwd=6)#
	SD <- sd(Data$V1*Ne[j]*2)#
	arrows(Max- mean(Data$V1*Ne[j]*2)-SD,-0.08*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.08*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[2],lwd=6)#
## X values #
	XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
	Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
	SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
	TransformedXValues <- SubsetXValues - Threshold#
	XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
#	Check <- length(subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > (mean(Data$V1*Ne[j]*2)+SD - 0.1*XLimFigureTwo[j])))#
#	StartingYValue <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - Check#
	lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[2],lwd=6 )#
#	abline(v=mean(Max - Data$V1*Ne[j]*2),lwd=6,col=ColorViridisAlpha[2])#
	points(Max - mean(Data$V1*Ne[j]*2),-0.08*ListMaxAge[1],pch=20,col=ColorViridis[2],cex=3)#
	AgesFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[3],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
	Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
	Color <- col2rgb("orange")#
#lines(Max  - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),col="orange",lwd=6)#
	lines(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],col=ColorViridis[1],lwd=6)#
	SD <- sd(Data$V1*Ne[j]*2)#
	arrows(Max- mean(Data$V1*Ne[j]*2)-SD,-0.04*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.04*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[1],lwd=6)#
## X values #
	XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
	Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
	SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
	TransformedXValues <- SubsetXValues - Threshold#
	XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
#	Check <- length(subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > (mean(Data$V1*Ne[j]*2)+SD - 0.1*XLimFigureTwo[j])))#
#	StartingYValue <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - Check#
	lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[1],lwd=6 )#
#abline(v=mean(Max - Data$V1*Ne[j]*2),lwd=6,col=ColorViridisAlpha[1])#
	points(Max - mean(Data$V1*Ne[j]*2),-0.04*ListMaxAge[1],pch=20,col=ColorViridis[1],cex=3)#
	AgesFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[4],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
	Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
#lines(Max  - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),col="red",lty=5,lwd=6)#
	lines(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],lty=5,col=ColorViridis[4],lwd=6)#
#abline(v=mean(Max - Data$V1*Ne[j]*2),lty=5,lwd=6,col=ColorViridisAlpha[4])#
	SD <- sd(Data$V1*Ne[j]*2)#
	arrows(Max- mean(Data$V1*Ne[j]*2)-SD,-0.16*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.16*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[4],lwd=6)#
## X values #
	XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
	Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
	SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
	TransformedXValues <- SubsetXValues - Threshold#
	XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
#	Check <- length(subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > (mean(Data$V1*Ne[j]*2)+SD - 0.1*XLimFigureTwo[j])))#
#	StartingYValue <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - Check#
	lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[4],lwd=6 ,lty=5)#
	points(Max - mean(Data$V1*Ne[j]*2),-0.16*ListMaxAge[1],pch=20,col=ColorViridis[4],cex=3)#
	AgesFile <- paste("../Results/AlleleAges/Ages",DemScenario[j],"_",SelectionTestAge[5],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Breaks <- seq(from=0,to=max(Data$V1*Ne[j]*2+50),by=50)#
	Histogram <- hist(Data$V1*2*Ne[j],breaks=Breaks,plot=FALSE)#
#lines(Max  - 0:99*50,Histogram$counts[1:100]/sum(Histogram$counts),col="dodgerblue",lty=5,lwd=6)#
	lines(rev(c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.22*(XLimFigureTwo[j]),density(Data$V1*Ne[j]*2,from=0,to=Max)$x[(MaxLength-Length):(MaxLength)])),density(Data$V1*Ne[j]*2,from=0,to=Max)$y[1:(Length+2)],lty=5,col=ColorViridis[5],lwd=6)#
	SD <- sd(Data$V1*Ne[j]*2)#
	arrows(Max- mean(Data$V1*Ne[j]*2)-SD,-0.2*ListMaxAge[1],min(Max- mean(Data$V1*Ne[j]*2)+SD,Max),-0.2*ListMaxAge[1], length=0.05, angle=90, code=3,col=ColorViridis[5],lwd=6)#
## X values #
	XFirstValue <- max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - 0.8*XLimFigureTwo[j]#
	Threshold <- mean(Data$V1*Ne[j]*2) + SD-0.1*XLimFigureTwo[j]#
	SubsetXValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	SubsetYValues <- subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$y,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > Threshold)#
	YValuesToPrint <- c(density(Data$V1*Ne[j]*2,from=0,to=Max)$y[length(density(Data$V1*Ne[j]*2,from=0,to=Max)$y) - length(SubsetYValues)],SubsetYValues)#
	TransformedXValues <- SubsetXValues - Threshold#
	XValuesToPrint <- c(XFirstValue,XFirstValue-TransformedXValues)#
#	Check <- length(subset(density(Data$V1*Ne[j]*2,from=0,to=Max)$x,density(Data$V1*Ne[j]*2,from=0,to=Max)$x > (mean(Data$V1*Ne[j]*2)+SD - 0.1*XLimFigureTwo[j])))#
#	StartingYValue <- length(density(Data$V1*Ne[j]*2,from=0,to=Max)$x) - Check#
	lines(rev(c(XValuesToPrint)),YValuesToPrint,col=ColorViridis[5],lwd=6,lty=5 )#
	points(Max - mean(Data$V1*Ne[j]*2),-0.2*ListMaxAge[1],pch=20,col=ColorViridis[5],cex=3)#
#	legend("topleft",c("-100","-50","0","50","100"), lty=c(1,1,1,6,6),lwd=6,col=ColorViridis,cex=2,title="4Ns",bty="n")#
#	XLimFigureTwo[1]=1500#
#	XLimFigureTwo[2]=900#
#	XLimFigureTwo[3]=3000#
#	XLimFigureTwo[4]=2000#
#	XLimFigureTwo[5]=1500#
#	XLimFigureTwo[6]=900#
#	XLimFigureTwo[7]=1750#
#	XLimFigureTwo[8]=1000#
#	XLimFigureTwo[9]=2000#
#	XLimFigureTwo[10]=900#
#	XLimFigureTwo[11]=3000#
	if (XLimFigureTwo[j] <= 1000){#
		axis(1,at=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.1*(XLimFigureTwo[j]),Max-500,Max-250,Max),labels=c(ValueToPrintXAxis,"500","250","Present"),cex.lab=2.5,cex.axis=2.5)#
	}else if (XLimFigureTwo[j] <= 1500){#
		axis(1,at=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.1*(XLimFigureTwo[j]),Max-1000,Max-500,Max),labels=c(ValueToPrintXAxis,"1000","500","Present"),cex.lab=2.5,cex.axis=2.5)#
	}else if (XLimFigureTwo[j] <= 1750){#
		axis(1,at=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.1*(XLimFigureTwo[j]),Max-1000,Max-500,Max),labels=c(ValueToPrintXAxis,"1000","500","Present"),cex.lab=2.5,cex.axis=2.5)#
	}else if (XLimFigureTwo[j] <= 2000){#
		axis(1,at=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.1*(XLimFigureTwo[j]),Max-1500,Max-1000,Max-500,Max),labels=c(ValueToPrintXAxis,"1500","1000","500","Present"),cex.lab=2.5,cex.axis=2.5)#
	}else if (XLimFigureTwo[j] <= 3000){#
		axis(1,at=c(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.1*(XLimFigureTwo[j]),Max-4000,Max-3000,Max-2000,Max-1000,Max),labels=c(ValueToPrintXAxis,"4000","3000","2000","1000","Present"),cex.lab=2.5,cex.axis=2.5)#
	}#
#	axis(1,at=c(Max-2500,Max-2000,Max-1500,Max-1000,Max-500,Max),labels=c("2500","2000","1500","1000","500","Present"),cex.lab=2,cex.axis=2)#
#	rect(max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j]+10,-0.02*ListMaxAge[j],max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j]+0.2*(XLimFigureTwo[j]),ListMaxAge[j],col="white",border=NA)#
	Color <- col2rgb("black")#
	axis.break(1, max(density(Data$V1*Ne[j]*2,from=0,to=Max)$x)-XLimFigureTwo[j] + 0.2*(XLimFigureTwo[j]), style = "gap")#
#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[1],".txt",sep="")#
	Data <- read.table(AgesFile)#
#
    par(mar=c(5,5,5,3) + 0.1)#
#
	plot(Data$V1[XLimFigureThree[j]:1],Data$V2[1:XLimFigureThree[j]],xlab=expression(bold(T[2])),ylab="Probability",type="l",main=expression(bold(paste("D) ",T[2],sep=""))),ylim=c(-0.2*ListMaxT2[1],1.05*ListMaxT2[1]),xaxt="n",yaxt="n",cex.lab=2.5,cex.main=2.5,cex.axis=2.5,lwd=6,col=ColorViridis[3])#
#,ylim=c(0,1.0)#
	if (j==7 || j==8){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
	}#
	if (j==1 || j==2){#
#		abline(v=Data$V1[XLimFigureThree[j]]-5000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-5200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5000,0,Data$V1[XLimFigureThree[j]]-5000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-5200,0,Data$V1[XLimFigureThree[j]]-5200,300,lty=3,lwd=3)#
	}#
	if (j==5 || j==6){#
#		abline(v=Data$V1[XLimFigureThree[j]]-2000,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-2200,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2000,0,Data$V1[XLimFigureThree[j]]-2000,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-2200,0,Data$V1[XLimFigureThree[j]]-2200,300,lty=3,lwd=3)#
	}#
	if (j==9 || j==10){#
#		abline(v=Data$V1[XLimFigureThree[j]]-100,lty=3,lwd=3)#
#		abline(v=Data$V1[XLimFigureThree[j]]-300,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-100,0,Data$V1[XLimFigureThree[j]]-100,100,lty=3,lwd=3)#
		segments(Data$V1[XLimFigureThree[j]]-300,0,Data$V1[XLimFigureThree[j]]-100,300,lty=3,lwd=3)#
	}#
	SD <- (sum(Data$V1*Data$V1*Data$V2) - sum(Data$V1*Data$V2)*sum(Data$V1*Data$V2))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V2)-SD,-0.12*ListMaxT2[1],min(XLimFigureThree[j]- sum(Data$V1*Data$V2)+SD,XLimFigureThree[j]),-0.12*ListMaxT2[1], length=0.05, angle=90, code=3,col=ColorViridis[3],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V2),-0.12*ListMaxT2[1],pch=20,col=ColorViridis[3],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[2],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("purple")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V2[1:XLimFigureThree[j]],col=ColorViridis[2],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V2) - sum(Data$V1*Data$V2)*sum(Data$V1*Data$V2))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V2)-SD,-0.08*ListMaxT2[1],min(XLimFigureThree[j]- sum(Data$V1*Data$V2)+SD,XLimFigureThree[j]),-0.08*ListMaxT2[1], length=0.05, angle=90, code=3,col=ColorViridis[2],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V2),-0.08*ListMaxT2[1],pch=20,col=ColorViridis[2],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[3],".txt",sep="")#
	Data <- read.table(AgesFile)#
	Color <- col2rgb("orange")#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V2[1:XLimFigureThree[j]],col=ColorViridis[1],lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V2) - sum(Data$V1*Data$V2)*sum(Data$V1*Data$V2))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V2)-SD,-0.04*ListMaxT2[1],min(XLimFigureThree[j]- sum(Data$V1*Data$V2)+SD,XLimFigureThree[j]),-0.04*ListMaxT2[1], length=0.05, angle=90, code=3,col=ColorViridis[1],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V2),-0.04*ListMaxT2[1],pch=20,col=ColorViridis[1],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[4],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V2[1:XLimFigureThree[j]],col=ColorViridis[4],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V2) - sum(Data$V1*Data$V2)*sum(Data$V1*Data$V2))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V2)-SD,-0.16*ListMaxT2[1],min(XLimFigureThree[j]- sum(Data$V1*Data$V2)+SD,XLimFigureThree[j]),-0.16*ListMaxT2[1], length=0.05, angle=90, code=3,col=ColorViridis[4],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V2),-0.16*ListMaxT2[1],pch=20,col=ColorViridis[4],cex=3)#
	AgesFile <- paste("../Results/TTwos/",DemScenario[j],"_",SelectionTest[5],".txt",sep="")#
	Data <- read.table(AgesFile)#
	lines(Data$V1[XLimFigureThree[j]:1],Data$V2[1:XLimFigureThree[j]],col=ColorViridis[5],lty=5,lwd=6)#
	SD <- (sum(Data$V1*Data$V1*Data$V2) - sum(Data$V1*Data$V2)*sum(Data$V1*Data$V2))^(1/2)#
	arrows(XLimFigureThree[j]- sum(Data$V1*Data$V2)-SD,-0.2*ListMaxT2[1],min(XLimFigureThree[j]- sum(Data$V1*Data$V2)+SD,XLimFigureThree[j]),-0.2*ListMaxT2[1], length=0.05, angle=90, code=3,col=ColorViridis[5],lwd=6)#
	points(XLimFigureThree[j]- sum(Data$V1*Data$V2),-0.2*ListMaxT2[1],pch=20,col=ColorViridis[5],cex=3)#
#legend("topleft",c("0","-50","-100","50","100"),pch=19,col=c("black","purple","orange","red","dodgerblue"),cex=1.5,title="4Ns",bty="n")#
	axis(1,at=c(XLimFigureThree[j]-700,XLimFigureThree[j]-600,XLimFigureThree[j]-500,XLimFigureThree[j]-400,XLimFigureThree[j]-300,XLimFigureThree[j]-200,XLimFigureThree[j]-100,XLimFigureThree[j]),labels=c("700","600","500","400","300","200","100","Present"),cex.lab=2.5,cex.axis=2.5)#
	axis(2,at=c(0,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04),labels=c("0","0.005","0.01","0.015","0.02","0.025","0.03","0.035","0.04"),cex.lab=2.5,cex.axis=2.5)#
	dev.off()#
}
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
Prob_One_Percent <- 11048 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure10_1_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.56","= 0.56","= 0.08")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
PValToPrint
PValues
PValue
AllPValues
setwd("/Users/vicentediegoortegadelvecchyo/Dropbox/Documents/DissertationThesis/PurifyingSelection/Drafts/HaplotypeDFEStandingVariation/PlottingScripts")#
#
library(viridis)#
#
### P (allele is 2Ns = x | allele is at 1%)#
#
Alpha = 0.01#
Beta = 0.03#
#
P_Allele_Is_2Ns_given_OnePercent <- c()#
#
# P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
}#
#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,Prob)#
#
### P (allele is at 1% | allele is 2Ns x)#
Alpha = 0.11#
Beta = 8636364 * 22970/2000000#
#
P_Allele_Is_2Ns <- c()#
NumberOfAllelesAt2Ns <- c()#
RealProbs <- c()#
# P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,pgamma(0.5,Alpha,scale=Beta))#
for (i in 1:10){#
# print (i)#
	Prob <- pgamma(i*2.5,Alpha,scale=Beta) - pgamma((i-1)*2.5,Alpha,scale=Beta)#
	P_Allele_Is_2Ns <- c(P_Allele_Is_2Ns,Prob)#
	NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
}#
Prob <- 1 - pgamma(25,Alpha,scale=Beta)#
NumberOfAllelesAt2Ns <- c(NumberOfAllelesAt2Ns,Prob*76163488446)#
#
#### The number of alleles comes from the population expansion model (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
#
SelectionCoefficientList <- read.table("../Results/ExitSValues/ExitOnePercentSValuesUK10KMouseHighPop.txt")#
#
TwoNsValues <- SelectionCoefficientList$V2*22970#
#
Check <- hist(TwoNsValues,breaks=c(0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,100000000))#
Counts_At_OnePercent_Given2Ns <- Check$counts#
#
Probabilities_At_One_Percent_Given_2Ns= Counts_At_OnePercent_Given2Ns/ NumberOfAllelesAt2Ns#
#
###### The whole stuff#
#
Probs <- P_Allele_Is_2Ns_given_OnePercent#
#
## This is the over the number of NonCpG sites where a nonsynonymous mutation can take place that are far away from centromeres and telomeres#
NumberOfNonCpGSites <- 26368474#
MutationRate <- 1.5e-8#
SitesDemography <- (229700 + 45544 / 22970 * 6104 + 5856 / 22970 * 1760 + 7480 / 22970 * 1222 + 1131262 / 22970 * 228) * 100 * 3000#
Prob_One_Percent <- 11048 / SitesDemography#
#
Probs <- Probs[1:11] * Prob_One_Percent / Probabilities_At_One_Percent_Given_2Ns[1:11]#
#
if (sum(Probs) > 1.0){#
    Probs[11] = 0#
    Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
    Probs[11] <- 1 - sum (Probs[1:10])#
}#
# Probs <- Probs[1:11] / sum (Probs[1:11] )#
Labels <- c()#
for (i in 1:10){#
Label <- paste((i-1)*5,"-",i*5,sep="")#
	Labels <- c(Labels,Label)#
}#
#
Label <- paste(">",50,sep="")#
Labels <- c(Labels,Label)#
#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
dev.off()#
#
Alpha = 0.184#
Beta = 319.8626 * 22970/2000#
#
ProbsBoyko <- c()#
for (i in 1:10){#
Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsBoyko <- c(ProbsBoyko, Prob)#
#
Alpha = 0.169#
Beta = 1327.4 * 22970/(2*11261)#
#
ProbsKim <- c()#
for (i in 1:10){#
    Prob <- pgamma(5*i *.5,Alpha,scale=Beta) - pgamma(5*(i-1) *.5,Alpha,scale=Beta)#
    ProbsKim <- c(ProbsKim, Prob)#
}#
Prob <- 1 - pgamma(50 *.5,Alpha,scale=Beta)#
ProbsKim <- c(ProbsKim, Prob)#
counts <- table(mtcars$vs, mtcars$gear)#
counts <- rbind(counts,c(1,2,3))#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
counts[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
counts[1,2] <- P_Allele_Is_2Ns_given_OnePercent[2]#
counts[1,3] <- P_Allele_Is_2Ns_given_OnePercent[3]#
counts[2,1] <- Probs[1]#
counts[2,2] <- Probs[2]#
counts[2,3] <- Probs[3]#
counts[3,1] <- ProbsBoyko[1]#
counts[3,2] <- ProbsBoyko[2]#
counts[3,3] <- ProbsBoyko[3]#
colnames(counts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
ViridisColors <- viridis(3, alpha = 0.7)#
# barplot(log10(counts)-log10(0.001), main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
#   	legend = rownames(counts), ylim = c(0, 3.1), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0,1,2,3), labels = c(0,10^-2,10^-1,10^0))#
# counts <- table(Probs[1:11], P_Allele_Is_2Ns_given_OnePercent[1:11])#
# plot(1:11, Probs[1:11], col="blue", ylim=c(0,0.9), xaxt="n", ylab="Probability", xlab="4Ns", lwd=3, cex.lab=2, cex.axis=2, lty=1, type = "o")#
# lines(1:15,Probs[1:15],col="blue",lwd=3)#
# lines(1:11,P_Allele_Is_2Ns_given_OnePercent[1:11],col="green",lwd=3, type = "o")#
# legend("topright",c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns| DFE)"),pch=19,col=c("blue","green"),cex=2)#
# axis(1, at=c(1:11), labels=Labels,cex.axis=2)#
#
#################################################################################### Upper and lower 5% quantile#
#
DFESelection <- read.table("../Results/ResultsSelectionInferred/SelectionLargerSpaceHighPopUK10KDFETestHighPop.txt")#
DFEPars <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/AnotherDFETableOfProbabilities.txt")#
DFEParsTwo <- read.table ("../ScriptsOctober22_2017/Sims/UK10K_OnePercenters/ImportanceSamplingSims/DFETableOfProbabilities.txt")#
#
MatrixProbs <- c()#
MatrixP_Allele_Is_2Ns_given_OnePercent <- c()#
for (j in 1:100){#
    if (DFESelection$V1[j] == 0){#
SelectionDFERow <- ((DFESelection$V2[j] %% 52 ) + 1)#
SelectionDFEColumn <- (floor(DFESelection$V2[j] / 52 ) + 1)#
print (j)#
print (SelectionDFERow)#
print (SelectionDFEColumn)#
#
DFEParameterNumber <- (SelectionDFEColumn-1)*52 + SelectionDFERow#
P_Allele_Is_2Ns_given_OnePercent <- c()#
print (DFEParameterNumber)#
for (i in 1:10){#
    UpperBound <- i*5 + 2#
    LowerBound <- (i-1)*5 + 3#
    CurrentSum <- sum(DFEPars[DFEParameterNumber,LowerBound:UpperBound])#
    #    print (i)#
    #    print (CurrentSum)#
    P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
}#
Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
#
# print (Probs)#
Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
# print (Probs)#
if (sum(Probs) > 1.0){#
Probs[11] = 0#
Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
}else{#
Probs[11] <- 1 - sum (Probs[1:10])#
}#
P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
# print (Probs)#
if (j==1){#
    MatrixFinalProbs <- matrix(Probs,nrow=1)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
}else{#
    MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
    MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
}#
    }else{#
    SelectionDFERow <- ((DFESelection$V2[j] %% 50 ) + 1)#
    SelectionDFEColumn <- (floor(DFESelection$V2[j] / 50 ) + 1)#
    print (j)#
    print (SelectionDFERow)#
    print (SelectionDFEColumn)#
    DFEParameterNumber <- (SelectionDFEColumn-1)*50 + SelectionDFERow#
    P_Allele_Is_2Ns_given_OnePercent <- c()#
    print (DFEParameterNumber)#
    for (i in 1:10){#
        UpperBound <- i*5 + 2#
        LowerBound <- (i-1)*5 + 3#
        CurrentSum <- sum(DFEParsTwo[DFEParameterNumber,LowerBound:UpperBound])#
        #    print (i)#
        #    print (CurrentSum)#
        P_Allele_Is_2Ns_given_OnePercent <- c(P_Allele_Is_2Ns_given_OnePercent,CurrentSum)#
    }#
    Probs <- P_Allele_Is_2Ns_given_OnePercent[1:10] * Prob_One_Percent#
    # print (Probs)#
    Probs <- Probs[1:10] / Probabilities_At_One_Percent_Given_2Ns[1:10]#
    # print (Probs)#
    if (sum(Probs) > 1.0){#
        Probs[11] = 0#
        Probs[1:10] <- Probs[1:10] / sum(Probs[1:10])#
    }else{#
        Probs[11] <- 1 - sum (Probs[1:10])#
    }#
    P_Allele_Is_2Ns_given_OnePercent[11] <- 1 - sum(P_Allele_Is_2Ns_given_OnePercent)#
    # print (Probs)#
    if (j==1){#
        MatrixFinalProbs <- matrix(Probs,nrow=1)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- matrix(P_Allele_Is_2Ns_given_OnePercent,nrow=1)#
    }else{#
        MatrixFinalProbs <- rbind ( MatrixFinalProbs,Probs)#
        MatrixP_Allele_Is_2Ns_given_OnePercent <- rbind(MatrixP_Allele_Is_2Ns_given_OnePercent,P_Allele_Is_2Ns_given_OnePercent)#
    }#
    }#
}#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 5 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.5))#
    counts[1,i] <- Quantiles[1]#
#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0), col="black",pch=24, bg = "black", cex=1)#
    #    points((i - 1)* 5 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0), col="black", pch=25, bg = "black", cex=1)#
#
}#
#
################# Create log-table#
#
logcounts <- table(mtcars$vs, mtcars$gear)#
logcounts <- rbind(logcounts,c(1,2,3))#
#logcounts <- rbind(logcounts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[4]) -log10(0.001),0), max(log10(Probs[4]) -log10(0.001),0), max(log10(ProbsBoyko[4]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[5]) -log10(0.001),0), max(log10(Probs[5]) -log10(0.001),0), max(log10(ProbsBoyko[5]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[6]) -log10(0.001),0), max(log10(Probs[6]) -log10(0.001),0), max(log10(ProbsBoyko[6]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[7]) -log10(0.001),0), max(log10(Probs[7]) -log10(0.001),0), max(log10(ProbsBoyko[7]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[8]) -log10(0.001),0), max(log10(Probs[8]) -log10(0.001),0), max(log10(ProbsBoyko[8]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[9]) -log10(0.001),0), max(log10(Probs[9]) -log10(0.001),0), max(log10(ProbsBoyko[9]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[10]) -log10(0.001),0), max(log10(Probs[10]) -log10(0.001),0), max(log10(ProbsBoyko[10]) -log10(0.001),0)))#
logcounts <- cbind(logcounts,c(max(log10(P_Allele_Is_2Ns_given_OnePercent[11]) -log10(0.001),0), max(log10(Probs[11]) -log10(0.001),0), max(log10(ProbsBoyko[11]) -log10(0.001),0)))#
logcounts[1,1] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[1]) -log10(0.001),0)#
logcounts[1,2] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[2]) -log10(0.001),0)#
logcounts[1,3] <- max(log10(P_Allele_Is_2Ns_given_OnePercent[3]) -log10(0.001),0)#
logcounts[2,1] <- max(log10(Probs[1]) -log10(0.001),0)#
logcounts[2,2] <- max(log10(Probs[2]) -log10(0.001),0)#
logcounts[2,3] <- max(log10(Probs[3]) -log10(0.001),0)#
logcounts[3,1] <- max(log10(ProbsBoyko[1]) -log10(0.001),0)#
logcounts[3,2] <- max(log10(ProbsBoyko[2]) -log10(0.001),0)#
logcounts[3,3] <- max(log10(ProbsBoyko[3]) -log10(0.001),0)#
#logcounts[4,1] <- max(log10(ProbsKim[1]) -log10(0.001),0)#
#logcounts[4,2] <- max(log10(ProbsKim[2]) -log10(0.001),0)#
#logcounts[4,3] <- max(log10(ProbsKim[3]) -log10(0.001),0)#
colnames(logcounts) <- c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", ">50")#
rownames(logcounts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
logcountsThree <- table(mtcars$vs, mtcars$gear)#
logcountsThree <- rbind(logcountsThree,c(1,2,3))#
# logcounts <- rbind(logcounts,c(1,2,3))#
#
# counts <- rbind(counts,c(1,2,3))#
# counts <- cbind(counts,c(Probs[3],P_Allele_Is_2Ns_given_OnePercent[3]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[4],Probs[4],ProbsBoyko[4]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[5],Probs[5],ProbsBoyko[5]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[6],Probs[6],ProbsBoyko[6]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[7],Probs[7],ProbsBoyko[7]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[8],Probs[8],ProbsBoyko[8]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[9],Probs[9],ProbsBoyko[9]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[10],Probs[10],ProbsBoyko[10]))#
# counts <- cbind(counts,c(P_Allele_Is_2Ns_given_OnePercent[11],Probs[11],ProbsBoyko[11]))#
logcountsThree[1,1] <- P_Allele_Is_2Ns_given_OnePercent[1]#
logcountsThree[1,2] <- sum(P_Allele_Is_2Ns_given_OnePercent[2:10])#
logcountsThree[1,3] <- P_Allele_Is_2Ns_given_OnePercent[11]#
logcountsThree[2,1] <- Probs[1]#
logcountsThree[2,2] <- sum(Probs[2:10])#
logcountsThree[2,3] <- Probs[11]#
logcountsThree[3,1] <- ProbsBoyko[1]#
logcountsThree[3,2] <- sum(ProbsBoyko[2:10])#
logcountsThree[3,3] <- ProbsBoyko[11]#
#
colnames(logcountsThree) <- c("0-5", "5-50", ">50")#
rownames(logcountsThree) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
################# End of log-table#
pdf("../Figures/SuppFigure10_1_UK10KDFE_Boyko.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
barplot(logcounts + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred "* P[psi]* "("* bolditalic(s[j])*" | 1%" * ", "* italic(D) * ")"), expression("Inferred "* P[psi]* "("* bolditalic(s[j])* ")"), expression("Boyko et al 2008 "* P[psi]* "("* bolditalic(s[j])* ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
FinalMedian <- c()#
for (i in 1:11){#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,i])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 2.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,i],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,i])#
#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[1]) - log10(0.001), 0) + 0.01, col="black",pch=24, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(Quantiles[2]) - log10(0.001), 0) + 0.01, col="black", pch=25, bg = "black", cex=1)#
    points((i - 1)* 4 + 1.5, max(log10(CurrentMean) - log10(0.001), 0) + 0.01, col="black", pch=8, bg = "black", cex=1)#
}#
#####################################################################################
dev.off()#
#
#################################################################################### Put lines Supp Fig S9#
pdf("../Figures/SuppFigureX_UK10KDFE_Boyko_Lines.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
#
# barplot(log10(counts)-log10(0.001) + 0.1, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ) , ylim = c(0, 3.3), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# rownames(counts) <- c("Inferred P(4Ns | 1%, DFE, D)", "Inferred P(4Ns | DFE)","Boyko et al 2008 P(4Ns | DFE)")#
#
# axis (2,at=c(0 + 0.1, 1 + 0.1, 2 + 0.1, 3 + 0.1), labels = c(0,10^-2,10^-1,10^0))#
#
ViridisColors <- viridis(5)#
#
ProbVector <- c()#
for (j in 1:11){#
ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[1,j]) - log10(0.001),0) + 0.01)#
}#
#
plot(1:11, ProbVector, lty=1, type ="o", pch = 19 , yaxt="n", ylim = c(0, 3.3), col= ViridisColors[1])#
axis (2,at=c(0 + 0.01, 1 + 0.01, 2 + 0.01, 3 + 0.01), labels = c(0,10^-2,10^-1,10^0))#
#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[2,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[2])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[3,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[3])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[4,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[4])#
ProbVector <- c()#
for (j in 1:11){#
    ProbVector <- c(ProbVector, max(log10(MatrixFinalProbs[5,j]) - log10(0.001),0) + 0.01)#
}#
#
lines(1:11, ProbVector, lty=1, type ="o", pch = 19, col= ViridisColors[5])#
#####################################################################################
dev.off()#
#################################################################################### Create table of confidence intervals ####################################################
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixFinalProbs[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsFinalProbsTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
#
Probs <- c(0.75, 0.9, 0.95, 0.975)#
#
Table <- matrix(nrow=8, ncol= 11)#
#
for (i in 1:11){#
    for (j in 1:4){#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,i],c(1-Probs[j], Probs[j]))#
        Table[(j*2 - 1), i] <- Quantiles[1]#
        Table[(j*2), i] <- Quantiles[2]#
    }#
}#
#
write.table(Table, file ="../Figures/ConfidenceIntervalsP2NsOnePercentTableSX.txt", sep = "\t", row.names = FALSE, col.names = FALSE)#
########### Do plot with only three bins#
#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_BarPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
par(mar=c(5.1,5.1,4.1,2.1))#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred " ~ 'P'[psi] * "(" * bolditalic(s[j])*" | 1%, "* italic(D) * ")"), expression("Inferred " * 'P'[psi] * "(" * bolditalic(s[j]) * ")"), expression("Boyko et al 2008 " * 'P'[psi] * "(" * bolditalic(s[j]) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
    NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
            }#
#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    print ("MinMax")#
    print (i)#
    print (Quantiles[1])#
    print (Quantiles[2])#
    # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
    # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
    Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
    FinalMedian <- c(FinalMedian,Quantiles[1])#
    counts[2,i] <- Quantiles[1]#
    Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
    CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
    #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
    points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
    points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
############################### Compare with real results Density plot Stuff#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScaleHighPop.pdf",width=19)#
#
Title <- c("A) Probability of having a 4Ns value < 5\n on inferences done on 100 simulations\n using the Boyko DFE", "B) Probability of having a 4Ns value between 5 and 50\n on inferences done on 100 simulations\n using the Boyko DFE", "C) Probability of having a 4Ns value > 50\n on inferences done on 100 simulations\n using the Boyko DFE")#
par(mar=c(5.1,5.1,6.1,2.1))#
par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
Xlabels <- c("Proportion of new mutations with a 4Ns value < 5", "Proportion of new mutations with 4Ns between 5 and 50","Proportion of new mutations with a 4Ns value > 50")#
# barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
# legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
# axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
PValToPrint <- c("= 0.48","= 0.56","= 0.14")#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        ThisDensity <- density (Sums, from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else {#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        ThisDensity <- density (MatrixFinalProbs[,NumberToCheck], from = 0, to = 1)#
        plot(ThisDensity, ylab="Probability", xlab= Xlabels[i], main = Title[i], cex.lab = 2, cex.main = 2, yaxt="n", xlim = c(0,1))#
        abline(v = ProbFromData[i], lty = 2)#
        ToPrint <- paste("p-value ",PValToPrint[i],sep="")#
        legend("topright",ToPrint, bty = "n",cex=1.5)#
        print ("MinMax")#
        print (i)#
        print (Quantiles[1])#
        print (Quantiles[2])#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
}#
#
dev.off()#
#
#################################################################### Density plot Stuff#
#
#################################################################### P- value computations#
#
### First bin#
ViridisColors <- viridis(3, alpha = 0.7)#
pdf("../Figures/SuppFigureX_DensityPlot_UK10KDFE_StandingNew_OnlyThreeBins_NaturalScale.pdf",width=19)#
#
Title <- c("Probability of having a 4Ns value < 5\n on inferences done over 100 simulations", "Probability of having a 4Ns value between 5 and 50\n on inferences done over 100 simulations", "Probability of having a 4Ns value > 50\n on inferences done over 100 simulations")#
#par(mar=c(5.1,5.1,4.1,2.1))#
# par(mfrow=c(1,3))#
#
ProbFromData <- c (0.2330944, 0.0, 0.7669056)#
AllPValues <- c()#
barplot(logcountsThree + 0.01, main="", ylab="Probability", xlab="4Ns", col=ViridisColors,#
legend = c(expression("Inferred P("*bolditalic(s[j])*" | 1%, "* italic(DFE) * ", "* italic(D) * ")"), expression("Inferred P("*bolditalic(s[j])*" | "* italic(DFE) * ")"), expression("Boyko et al 2008 P("*bolditalic(s[j])*" | "* italic(DFE) * ")") ), ylim = c(0, 1.2), beside=TRUE,cex.lab=2,cex.axis=2,cex.names=2, args.legend = list(x = "top",cex=2), yaxt="n")#
#
axis (2,at=c(0+0.01, 0.25+0.01, 0.5+0.01, 0.75 + 0.01, 1+0.01), labels = c(0, 0.25, 0.5, 0.75, 1.0),cex.axis=2, cex.lab = 2)#
#
FinalMedian <- c()#
for (i in 1:3){#
    if (i == 1){#
        NumberToCheck <- 1#
    }#
    if (i == 3){#
        NumberToCheck <- 11#
    }#
    if (i == 2){#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixFinalProbs[CurNumber,2:10]))#
        }#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] >= Sums[Number]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        #        CurrentMean <- mean(Sums)#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Sums <- c()#
        for (CurNumber in 1:100){#
            Sums <- c(Sums,sum(MatrixP_Allele_Is_2Ns_given_OnePercent[CurNumber,2:10]))#
        }#
        #        Quantiles <- quantile(sum(MatrixP_Allele_Is_2Ns_given_OnePercent[,2:10]),c(0.05,0.95))#
        Quantiles <- quantile(Sums,c(0.05,0.95))#
        CurrentMean <- mean(Sums)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 1){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    } else if (i == 3){#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixFinalProbs[,NumberToCheck])#
        PValue = 0#
        for (Number in 1:100){#
            if (ProbFromData[i] < MatrixFinalProbs[Number,NumberToCheck]){#
                PValue <- PValue + 1#
            }#
        }#
        AllPValues <- c(AllPValues, PValue)#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 2.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
        # print(max(log10(Quantiles[1]) - log10(0.001)), 0)#
        # print(max(log10(Quantiles[2]) - log10(0.001)), 0)#
        Quantiles <- quantile(MatrixFinalProbs[,NumberToCheck],c(0.5))#
        FinalMedian <- c(FinalMedian,Quantiles[1])#
        counts[2,i] <- Quantiles[1]#
        Quantiles <- quantile(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck],c(0.05,0.95))#
        CurrentMean <- mean(MatrixP_Allele_Is_2Ns_given_OnePercent[,NumberToCheck])#
        #segments (i,Quantiles[1],x1=i,Quantiles[2],col=ColorViridis[2], lwd = 4, lty=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[1] + 0.01, col="black",pch=24, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, Quantiles[2] + 0.01, col="black", pch=25, bg = "black", cex=2)#
        #        points((i - 1)* 4 + 1.5, CurrentMean + 0.01, col="black", pch=8, bg = "black", cex=2)#
    }#
#
}#
#
dev.off()
